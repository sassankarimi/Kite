{"version":3,"file":"5.js","sources":["webpack:///./components/tour/filter.js"],"sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\n\r\n//redux\r\nimport { connect , useSelector , useDispatch } from \"react-redux\";\r\nimport { setStars , setAirlines} from \"../../redux/tourFilters/action\";\r\nimport { add_item } from \"../../redux/basicdatas/action\";\r\n\r\n//UI Libraries\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport { MdKeyboardArrowDown } from \"react-icons/md\";\r\nimport { Collapse, Button } from \"reactstrap\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { MdStarBorder, MdStar, MdClose } from \"react-icons/md\";\r\nimport StarRating from \"react-rating\";\r\n\r\n//Utilities\r\nimport { BarLoading } from \"../../Functions\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\"\r\n  }\r\n});\r\nconst useStylesCheckbox = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction valuetext(value) {\r\n  return `${value}°C`;\r\n}\r\n\r\nfunction RangeSlider(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState([20, 37]);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n    props.dispatch(set_preis(newValue));\r\n    props.dispatch(add_item(newValue));\r\n  };\r\n  //console.log(\"props in preis\", props.preis)\r\n  //console.log(\"basicDatas props in filter\", props.basicDatas)\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <Typography id=\"range-slider\" gutterBottom>\r\n        Temperature range\r\n      </Typography> */}\r\n      <Slider\r\n        value={value}\r\n        onChange={(e, value) => handleChange(e, value)}\r\n        valueLabelDisplay=\"auto\"\r\n        aria-labelledby=\"range-slider\"\r\n        getAriaValueText={valuetext}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SimpleRating() {\r\n  const [value, setValue] = React.useState(2);\r\n\r\n  return (\r\n    <div>\r\n      <Box\r\n        component=\"fieldset\"\r\n        mb={3}\r\n        borderColor=\"transparent\"\r\n        className=\"star-rating\"\r\n      >\r\n        <Rating\r\n          name=\"simple-controlled\"\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\n// function Score() {\r\n//   return (\r\n//     <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n//     <Typography component=\"legend\">Custom icon set</Typography>\r\n//     <Rating\r\n//       name=\"customized-icons\"\r\n//       defaultValue={2}\r\n//       getLabelText={value => customIcons[value].label}\r\n//       IconContainerComponent={IconContainer}\r\n//     />\r\n//   </Box>\r\n//   )\r\n// }\r\n\r\nconst FilterCollapse1 = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div className=\"filter-collapse border-bottom\">\r\n      <p onClick={toggle}>\r\n        توقف ها\r\n        <MdKeyboardArrowDown />\r\n      </p>\r\n      <Collapse isOpen={isOpen}>\r\n        <div></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst StarFilter = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const starValue= useSelector(state=>state.tourFilterReducer.stars)\r\n  const dispatch = useDispatch();\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  function handleStars(value) {\r\n    console.log(\"star rating value in seatch Filter :\", value);\r\n    dispatch(setStars(value));\r\n  }\r\n\r\n  return (\r\n    <div className=\"filter-collapse border-bottom\">\r\n      <p onClick={toggle}>\r\n        ستاره دار\r\n        <MdKeyboardArrowDown />\r\n      </p>\r\n      <Collapse isOpen={isOpen}>\r\n        {props.show ? (\r\n          <div className=\"text-center\">\r\n            <StarRating\r\n              direction=\"rtl\"\r\n              emptySymbol={<MdStarBorder color=\"#73c9ca\" size=\"30\" />}\r\n              fullSymbol={<MdStar color=\"#73c9ca\" size=\"30\" />}\r\n              fractions={1}\r\n              start={0}\r\n              stop={5}\r\n              initialRating={starValue}\r\n              onChange={handleStars}\r\n            />\r\n            <span className=\"pr-2\" onClick={() => handleStars(0)}>\r\n              <MdClose size=\"15\" />\r\n            </span>\r\n          </div>\r\n        ) : (\r\n          <Fragment>\r\n            <BarLoading />\r\n          </Fragment>\r\n        )}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AirlinesFilter = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const filteredResults= useSelector(state=> state.searchTourReducer.tourResult);\r\n  const dispatch = useDispatch();\r\n  // console.log(\"myallllllPackges\",filteredResults); \r\n  // const airlineValues= useSelector(state=>state.tourFilterReducer.airlines);\r\n  let airlineValues= [];\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  for (var i=0;i<filteredResults.length;i++) {\r\n    for (var j=0;j<filteredResults[i].Flight.length;j++) {\r\n      airlineValues.push(filteredResults[i].Flight[j].AirLineTitle_Going);\r\n      airlineValues.push(filteredResults[i].Flight[j].AirLineTitle_Coming);\r\n    }\r\n  }\r\n  const airlinesName = airlineValues.filter((val,id,array) => array.indexOf(val) == id);\r\n  console.log(\"airlinesName\" , airlinesName)\r\n\r\n  function airlineHandle(value) {\r\n    console.log(\"airline value in search Filter :\", value);\r\n     dispatch(setAirlines(value));\r\n  }\r\n\r\n  // const reduxAirline = useSelector(state => state.tourFilterReducer.airlines);\r\n  // console.log(\"reduxAirline\", reduxAirline);\r\n\r\n  return (\r\n    <div className=\"filter-collapse border-bottom\">\r\n      <p onClick={toggle}>\r\n        شرکت هواپیمایی\r\n        <MdKeyboardArrowDown />\r\n      </p>\r\n      <Collapse isOpen={isOpen}>\r\n        {props.show ? (\r\n          <div>\r\n            {/* <CheckboxesGroup1 /> */}\r\n           \r\n            {\r\n              airlinesName.map((item,index)=> {\r\n                return(\r\n                  <div onClick={()=> airlineHandle(item)}>\r\n                    {item}\r\n                  </div>\r\n                )\r\n               \r\n              })\r\n            }\r\n          </div>\r\n        ) : (\r\n          <Fragment>\r\n            <BarLoading />\r\n          </Fragment>\r\n        )}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst FilterCollapse3 = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div className=\"filter-collapse border-bottom\">\r\n      <p onClick={toggle}>\r\n        امتیاز ها\r\n        <MdKeyboardArrowDown />\r\n      </p>\r\n      <Collapse isOpen={isOpen}>\r\n        <div>{/* <Score/> */}</div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PreisFilter = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div className=\"filter-collapse border-bottom\">\r\n      <p onClick={toggle}>\r\n        قیمت\r\n        <MdKeyboardArrowDown />\r\n      </p>\r\n      <Collapse isOpen={isOpen}>\r\n        {props.show ? (\r\n          <div>\r\n            <RangeSlider {...props} />\r\n          </div>\r\n        ) : (\r\n          <Fragment>\r\n            <BarLoading />\r\n          </Fragment>\r\n        )}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst FilterCollapse6 = props => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div className=\"filter-collapse\">\r\n      <p onClick={toggle}>\r\n        سایر\r\n        <MdKeyboardArrowDown />\r\n      </p>\r\n      <Collapse isOpen={isOpen}>\r\n        {props.show ? (\r\n          <div>\r\n            <CheckboxesGroup2 />\r\n          </div>\r\n        ) : (\r\n          <Fragment>\r\n            <BarLoading />\r\n          </Fragment>\r\n        )}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction CheckboxesGroup1() {\r\n  const classes = useStylesCheckbox();\r\n  const [state, setState] = React.useState({\r\n    gilad: true,\r\n    jason: false\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  const { gilad, jason } = state;\r\n  const error = [gilad, jason].filter(v => v).length !== 2;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={gilad}\r\n                onChange={handleChange(\"gilad\")}\r\n                value=\"gilad\"\r\n              />\r\n            }\r\n            label=\"ماهان ایر\"\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={jason}\r\n                onChange={handleChange(\"jason\")}\r\n                value=\"jason\"\r\n              />\r\n            }\r\n            label=\"تابان ایر\"\r\n          />\r\n        </FormGroup>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CheckboxesGroup2() {\r\n  const classes = useStylesCheckbox();\r\n  const [state, setState] = React.useState({\r\n    gilad: true\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  const { gilad } = state;\r\n  const error = [gilad].filter(v => v).length !== 2;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={gilad}\r\n                onChange={handleChange(\"gilad\")}\r\n                value=\"gilad\"\r\n              />\r\n            }\r\n            label=\"نمایش هتل ها بدون قیمت\"\r\n          />\r\n        </FormGroup>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Filter = props => {\r\n  const [showChild, setShowChild] = useState(false);\r\n  const {allPackages} = props;\r\n\r\n  useEffect(() => {\r\n    function showCm() {\r\n      setShowChild(true);\r\n     \r\n    }\r\n   \r\n\r\n    showCm();\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"filter-box\">\r\n        <Card>\r\n          <CardBody>\r\n            {/* <FilterCollapse1 show={showChild} /> */}\r\n            <StarFilter show={showChild} />\r\n            {/* <FilterCollapse3 show={showChild} /> */}\r\n            <PreisFilter {...props} show={showChild} />\r\n            <AirlinesFilter show={showChild} />\r\n            {/* <FilterCollapse6 show={showChild} /> */}\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const basicDatas = state.basicDatasReducer.basicDatas;\r\n  const preis = state.tourFilterReducer.preis;\r\n  const rates = state.tourFilterReducer.rates;\r\n  const airLines = state.tourFilterReducer.airLines;\r\n  const filteredResults = state.searchTourReducer.filteredResults;\r\n  return { rates, preis, airLines, basicDatas ,filteredResults};\r\n};\r\n\r\nexport default connect(mapStateToProps)(Filter);\r\n//export default Filter;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AALA;AAUA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAOA;AACA;AAAA;AAKA;AAWA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAaA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AAWA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AAcA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AAcA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}