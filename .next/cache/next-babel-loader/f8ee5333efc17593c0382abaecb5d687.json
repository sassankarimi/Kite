{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, useState } from \"react\"; //redux\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setAdultArray, setChild1, setChild2, setChildArray, setInfant, setRooms, setSelValues, setTotal } from \"../redux/rooms/action\"; //UI Libraries\n\nimport { MdKeyboardArrowDown } from \"react-icons/md\";\nimport { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem } from \"mdbreact\";\nimport { Label, Input, Button, FormGroup } from \"reactstrap\"; //used for room menu\n\nclass Counter extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"increamentClicks\", () => {\n      let id = this.props.id;\n      this.props.increament(id);\n    });\n\n    _defineProperty(this, \"decreamentClicks\", () => {\n      let id = this.props.id;\n      this.props.decreament(id);\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"counter\"\n    }, __jsx(\"button\", {\n      className: \"btn counter-btn\",\n      onClick: this.increamentClicks\n    }, \"+\"), __jsx(\"span\", null, this.props.count), __jsx(\"button\", {\n      className: \"btn counter-btn\",\n      onClick: this.decreamentClicks\n    }, \"-\"));\n  }\n\n} //used for room menu\n\n\nclass ChildCounter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"increamentClicks\", () => {\n      let id = this.props.id;\n      this.props.increament(id);\n    });\n\n    _defineProperty(this, \"decreamentClicks\", () => {\n      let id = this.props.id;\n      this.props.decreament(id);\n    });\n\n    this.state = {\n      selValues: []\n    };\n    this.createUI = this.createUI.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.selValues !== prevProps.selValues) {\n      this.setState({\n        selValues: this.props.selValues.filter(value => value.id === this.props.id)\n      });\n    }\n  }\n\n  handleChangeSelectValues(i, e) {\n    let roomId = this.props.id; //room index\n\n    let ageValue = e.target.value; //age index\n\n    this.props.changeSelValue(roomId, i, ageValue);\n  }\n\n  createUI() {\n    return this.props.selValues[this.props.id].age.map((el, index) => __jsx(\"div\", {\n      key: index\n    }, __jsx(FormGroup, {\n      className: \"add-age\"\n    }, __jsx(Label, {\n      for: \"exampleSelect\"\n    }, \"\\u0633\\u0646 \\u06A9\\u0648\\u062F\\u06A9 \", index + 1), __jsx(Input, {\n      type: \"select\",\n      value: el,\n      name: \"select\",\n      onChange: this.handleChangeSelectValues.bind(this, index),\n      id: \"exampleSelect\"\n    }, __jsx(\"option\", {\n      value: \"0\"\n    }, \"\\u062A\\u0627 1 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"1\"\n    }, \"1 \\u062A\\u0627 2 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"2\"\n    }, \"2 \\u062A\\u0627 3 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"3\"\n    }, \"3 \\u062A\\u0627 4 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"4\"\n    }, \"4 \\u062A\\u0627 5 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"5\"\n    }, \"5 \\u062A\\u0627 6 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"6\"\n    }, \"6 \\u062A\\u0627 7 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"7\"\n    }, \"7 \\u062A\\u0627 8 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"8\"\n    }, \"8 \\u062A\\u0627 9 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"9\"\n    }, \"9 \\u062A\\u0627 10 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"10\"\n    }, \"10 \\u062A\\u0627 11 \\u0633\\u0627\\u0644\"), __jsx(\"option\", {\n      value: \"11\"\n    }, \"11 \\u062A\\u0627 12 \\u0633\\u0627\\u0644\")))));\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"counter\"\n    }, __jsx(\"button\", {\n      className: \"btn counter-btn\",\n      onClick: this.increamentClicks\n    }, \"+\"), __jsx(\"span\", null, this.props.count), __jsx(\"button\", {\n      className: \"btn counter-btn\",\n      onClick: this.decreamentClicks\n    }, \"-\"), this.createUI());\n  }\n\n}\n\nconst Rooms = props => {\n  const dispatch = useDispatch();\n  const rooms = useSelector(state => state.roomsReducer.rooms);\n  const inc1 = useSelector(state => state.roomsReducer.adultArray);\n  const inc2 = useSelector(state => state.roomsReducer.childArray);\n  const selValues = useSelector(state => state.roomsReducer.selValues);\n  const total = useSelector(state => state.roomsReducer.total);\n  const infantCount = useSelector(state => state.roomsReducer.infantCount);\n  const child1Count = useSelector(state => state.roomsReducer.child1Count);\n  const child2Count = useSelector(state => state.roomsReducer.child2Count);\n  var roomArr = [];\n\n  function removeRooms() {\n    //adult person\n    let tempInc1 = inc1;\n    let tempAdult;\n    tempAdult = tempInc1.pop();\n    dispatch(setAdultArray(tempInc1)); //child person\n\n    let tempInc2 = inc2;\n    let tempChild;\n    tempChild = tempInc2.pop();\n    dispatch(setChildArray(tempInc2)); //rooms\n\n    dispatch(setRooms(rooms - 1));\n    dispatch(setTotal(total - tempChild - tempAdult));\n    let tempSelValues = selValues;\n    tempSelValues = selValues.filter(value => value.id !== rooms - 1);\n    dispatch(setSelValues(tempSelValues));\n    let removeRoomArray = selValues.filter(value => value.id == rooms - 1);\n    let removeRoomArrayAge = removeRoomArray[0].age;\n    let numOfInfant = 0;\n    let numOfChild1 = 0;\n    let numOfChild2 = 0;\n\n    for (var j = 0; j < removeRoomArrayAge.length; j++) {\n      if (removeRoomArrayAge[j] === 0 || removeRoomArrayAge[j] === 1) {\n        numOfInfant++;\n      } else if (removeRoomArrayAge[j] === 2 || removeRoomArrayAge[j] === 3 || removeRoomArrayAge[j] === 4 || removeRoomArrayAge[j] === 5) {\n        numOfChild1++;\n      } else if (removeRoomArrayAge[j] === 6 || removeRoomArrayAge[j] === 7 || removeRoomArrayAge[j] === 8 || removeRoomArrayAge[j] === 9 || removeRoomArrayAge[j] === 10 || removeRoomArrayAge[j] === 11) {\n        numOfChild2++;\n      }\n    }\n\n    dispatch(setInfant(parseInt(infantCount) - numOfInfant));\n    dispatch(setChild1(parseInt(child1Count) - numOfChild1));\n    dispatch(setChild2(parseInt(child2Count) - numOfChild2));\n  }\n\n  function addRooms() {\n    //adult person\n    let tempInc1 = [...inc1, 1];\n    dispatch(setAdultArray(tempInc1)); //child person\n\n    let tempInc2 = [...inc2, 0];\n    dispatch(setChildArray(tempInc2)); //rooms\n\n    dispatch(setRooms(rooms + 1));\n    dispatch(setTotal(1 + total));\n    let tempSelValues = selValues;\n    tempSelValues.push({\n      id: rooms,\n      adult: 1,\n      age: []\n    });\n    dispatch(setSelValues(tempSelValues));\n  }\n\n  function handleIncreamentA(i) {\n    let valueInc1 = inc1;\n    valueInc1[i] = inc1[i] + 1;\n    dispatch(setAdultArray(valueInc1));\n    dispatch(setTotal(total + 1));\n    let arrSel = selValues;\n    let arrAge = selValues.filter(value => value.id === i);\n\n    if (arrAge.length > 0) {\n      let newObj = {\n        id: i,\n        adult: valueInc1[i],\n        age: arrAge[0].age\n      };\n      arrSel.splice(i, 1, newObj);\n    }\n\n    dispatch(setSelValues(arrSel));\n  }\n\n  function handleIncreamentB(i) {\n    let valueInc2 = inc2;\n    valueInc2[i] = inc2[i] + 1;\n    dispatch(setChildArray(valueInc2));\n    dispatch(setTotal(total + 1));\n    let arrSel = selValues;\n    let arrAge = selValues.filter(value => value.id === i);\n    let newObj = {};\n\n    if (arrAge.length > 0) {\n      arrAge[0].age.push(0);\n      newObj = {\n        id: i,\n        adult: inc1[i],\n        age: arrAge[0].age\n      }; //infant first value option\n    } else {\n      newObj = {\n        id: i,\n        adult: inc1[i],\n        age: [0]\n      }; //infant first value option\n    }\n\n    dispatch(setInfant(infantCount + 1));\n    arrSel.splice(i, 1, newObj);\n    dispatch(setSelValues(arrSel));\n  }\n\n  function handleDecreamentA(i) {\n    if (inc1[i] > 1) {\n      let valueInc1 = inc1;\n      valueInc1[i] = inc1[i] - 1;\n      dispatch(setAdultArray(valueInc1));\n      dispatch(setTotal(total - 1));\n      let arrSel = selValues;\n      let arrAge = selValues.filter(value => value.id === i);\n\n      if (arrAge.length > 0) {\n        let newObj = {\n          id: i,\n          adult: valueInc1[i],\n          age: arrAge[0].age\n        };\n        arrSel.splice(i, 1, newObj);\n      }\n\n      dispatch(setSelValues(arrSel));\n    }\n  }\n\n  function handleDecreamentB(i) {\n    if (inc2[i] > 0) {\n      let valueInc2 = inc2;\n      valueInc2[i] = inc2[i] - 1;\n      dispatch(setChildArray(valueInc2));\n      dispatch(setTotal(total - 1));\n      let arrSel = selValues;\n      let arrAge = selValues.filter(value => value.id === i);\n\n      if (arrAge.length > 0) {\n        let childAge = arrAge[0].age.pop();\n\n        if (childAge === 0 || childAge === 1) {\n          dispatch(setInfant(parseInt(infantCount) - 1));\n        } else if (childAge === 2 || childAge === 3 || childAge === 4 || childAge === 5) {\n          dispatch(setChild1(parseInt(child1Count) - 1));\n        } else if (childAge === 6 || childAge === 7 || childAge === 8 || childAge === 9 || childAge === 10 || childAge === 11) {\n          dispatch(setChild2(parseInt(child2Count) - 1));\n        }\n\n        let newObj = {\n          id: i,\n          adult: inc1[i],\n          age: arrAge[0].age\n        };\n        arrSel.splice(i, 1, newObj);\n        dispatch(setSelValues(arrSel));\n      }\n    }\n  }\n\n  function changeSelValue(roomId, ageId, ageValue) {\n    let rooms = selValues;\n    let room = selValues.filter(arr => arr.id === roomId); //set Count of childs\n\n    if (parseInt(room[0].age[ageId]) === 0) dispatch(setInfant(infantCount - 1));\n    if (parseInt(room[0].age[ageId]) === 1) dispatch(setChild1(child1Count - 1));\n    if (parseInt(room[0].age[ageId]) === 2) dispatch(setChild2(child2Count - 1));\n\n    if (parseInt(ageValue) === 0 || parseInt(ageValue) === 1) {\n      dispatch(setInfant(infantCount + 1));\n    }\n\n    if (parseInt(ageValue) === 2 || parseInt(ageValue) === 3 || parseInt(ageValue) === 4 || parseInt(ageValue) === 5) {\n      dispatch(setChild1(child1Count + 1));\n    }\n\n    if (parseInt(ageValue) === 6 || parseInt(ageValue) === 7 || parseInt(ageValue) === 8 || parseInt(ageValue) === 9 || parseInt(ageValue) === 10 || parseInt(ageValue) === 11) {\n      dispatch(setChild2(child2Count + 1));\n    }\n\n    room[0].age[ageId] = parseInt(ageValue);\n    rooms.splice(roomId, 1, room[0]);\n    dispatch(setSelValues(rooms));\n  } //room menu structure\n\n\n  for (var i = 0; i < rooms; i++) {\n    let inc1Count = inc1[i];\n    let inc2Count = inc2[i];\n    roomArr.push(__jsx(\"div\", {\n      className: \"push-room\"\n    }, __jsx(\"hr\", null), __jsx(\"p\", {\n      className: \"room-label\"\n    }, \"\\u0627\\u062A\\u0627\\u0642 \", i + 1), __jsx(\"div\", {\n      className: \"line-counter\"\n    }, __jsx(\"span\", {\n      className: \"label\"\n    }, \"\\u0628\\u0632\\u0631\\u06AF\\u0633\\u0627\\u0644\"), __jsx(Counter, {\n      count: inc1Count,\n      id: i,\n      increament: handleIncreamentA,\n      decreament: handleDecreamentA\n    })), __jsx(\"div\", {\n      className: \"line-counter\"\n    }, __jsx(\"span\", {\n      className: \"label\"\n    }, \"\\u06A9\\u0648\\u062F\\u06A9\"), __jsx(\"div\", {\n      className: \"child-age\"\n    }, __jsx(ChildCounter, {\n      changeSelValue: (roomId, ageId, ageValue) => changeSelValue(roomId, ageId, ageValue),\n      count: inc2Count,\n      id: i,\n      selValues: selValues,\n      increament: handleIncreamentB,\n      decreament: handleDecreamentB\n    })))));\n  }\n\n  return __jsx(Fragment, null, __jsx(MDBDropdown, {\n    size: \"sm\",\n    className: \"passenger-number\"\n  }, __jsx(MDBDropdownToggle, {\n    caret: true\n  }, \"\\u0645\\u0633\\u0627\\u0641\\u0631\\u0627\\u0646 + \\u0627\\u062A\\u0627\\u0642\", __jsx(\"span\", {\n    className: \"total-num\"\n  }, total, \" \\u0645\\u0633\\u0627\\u0641\\u0631\"), __jsx(\"span\", {\n    className: \"total-num\"\n  }, rooms, \" \\u0627\\u062A\\u0627\\u0642\"), __jsx(MdKeyboardArrowDown, null)), __jsx(MDBDropdownMenu, {\n    className: \"dropdown-counter\",\n    color: \"danger\",\n    basic: true\n  }, __jsx(\"div\", {\n    className: \"add-room\"\n  }, __jsx(Button, {\n    color: \"secondary\",\n    size: \"sm\",\n    onClick: addRooms,\n    className: \"add-btn\"\n  }, \"\\u0627\\u0641\\u0632\\u0648\\u062F\\u0646 \\u0627\\u062A\\u0627\\u0642\"), roomArr.map((value, k) => {\n    return __jsx(\"div\", {\n      key: k\n    }, value);\n  }), rooms > 1 ? __jsx(\"div\", null, __jsx(\"hr\", null), __jsx(Button, {\n    color: \"secondary\",\n    size: \"sm\",\n    onClick: removeRooms,\n    className: \"add-btn\"\n  }, \"\\u062D\\u0630\\u0641 \\u0627\\u062A\\u0627\\u0642\")) : __jsx(\"span\", null), __jsx(MDBDropdownItem, {\n    className: \"done-btn\",\n    type: \"button\"\n  }, \"\\u062A\\u0627\\u06CC\\u06CC\\u062F\")))));\n};\n\nexport default Rooms;","map":null,"metadata":{},"sourceType":"module"}