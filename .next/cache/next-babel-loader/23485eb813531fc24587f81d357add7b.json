{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin: 0 auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { BounceLoader, BeatLoader, BarLoader, DotLoader } from \"react-spinners\";\nimport { MagicSpinner } from \"react-spinners-kit\";\nimport { css } from \"@emotion/core\";\nvar override = css(_templateObject());\nexport function isNumber(data) {\n  if (isNaN(data)) {\n    return false;\n  } else {\n    return true;\n  }\n}\nexport function isRealValue(obj) {\n  return obj && obj !== \"null\" && obj !== \"undefined\" && obj !== \"\" && obj !== \" \" && obj !== \"  \";\n}\nexport function BounceLoading() {\n  return __jsx(\"div\", {\n    className: \"vertical-center\"\n  }, __jsx(BounceLoader, {\n    css: override,\n    size: 150,\n    color: \"#50E3C2\",\n    loading: true\n  }));\n}\nexport function BeatLoading() {\n  return __jsx(\"div\", {\n    className: \"vertical-center\"\n  }, __jsx(BeatLoader, {\n    css: override,\n    size: 12,\n    margin: 2,\n    color: \"#50E3C2\",\n    loading: true\n  }));\n}\nexport function DotLoading() {\n  return __jsx(DotLoader, {\n    css: override,\n    size: 45,\n    color: \"#50E3C2\",\n    loading: true\n  });\n}\nexport function BarLoading() {\n  return __jsx(\"div\", {\n    className: \"m-auto\"\n  }, __jsx(BarLoader, {\n    css: override,\n    height: 3,\n    width: 130,\n    color: \"#73c9ca\"\n  }));\n}\nexport function MagicSpinnerLoading(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 30 : _ref$size,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"#009688\" : _ref$color,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? true : _ref$loading;\n  return __jsx(\"div\", null, __jsx(MagicSpinner, {\n    size: size,\n    color: color,\n    loading: loading\n  }));\n}\nexport function sumDigits(number) {\n  var str = number.toString();\n  var sum = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    sum += _parseInt(str.charAt(i), 10);\n  }\n\n  return sum;\n}\nexport function requiredInput(passengers, errorFlagArray, itemName) {\n  var submitFlag = true;\n  var inputValidate = passengers.reduce(function (arr, item, index) {\n    if (!isRealValue(item[itemName])) {\n      //nameValidate.push(index);\n      arr[index] = true;\n      submitFlag = false;\n    } else {\n      arr[index] = false;\n    }\n\n    return arr;\n  }, errorFlagArray);\n  return [inputValidate, submitFlag];\n}\nexport function checkMelliCode(passengers, errorFlagArray, itemName) {\n  var submitFlag = true;\n  var inputValidate = passengers.reduce(function (arr, item, index) {\n    if (!isNumber(item[itemName]) || !mellicode_format(item[itemName])) {\n      arr[index] = true;\n      submitFlag = false;\n    } else {\n      arr[index] = false;\n    }\n\n    return arr;\n  }, errorFlagArray);\n  return [inputValidate, submitFlag];\n}\nexport function latinOrPersianValidate(passengers, errorFlagArray, itemName, persianFlag) {\n  var submitFlag = true;\n  var inputValidate = passengers.reduce(function (arr, item, index) {\n    if (persianFlag) {\n      //error when has latin character\n      if (!just_persian(item[itemName]) && isRealValue(item[itemName])) {\n        //nameValidate.push(index);\n        arr[index] = true;\n        submitFlag = false;\n      } else {\n        arr[index] = false;\n      }\n    } else {\n      //error when has persian character\n      if (just_persian(item[itemName])) {\n        //nameValidate.push(index);\n        arr[index] = true;\n        submitFlag = false;\n      } else {\n        arr[index] = false;\n      }\n    }\n\n    return arr;\n  }, errorFlagArray);\n  return [inputValidate, submitFlag];\n}\nexport function checkLimits(passengers, errorFlagArray, itemName, type) {\n  var submitFlag = true;\n  var inputValidate = passengers.reduce(function (arr, item, index) {\n    if (type === \"DAY\") {\n      if (item[itemName] > 31 || item[itemName] < 1) {\n        arr[index] = true;\n        submitFlag = false;\n      } else {\n        arr[index] = false;\n      }\n    } else {\n      if (item[itemName] > 12 || item[itemName] < 1) {\n        arr[index] = true;\n        submitFlag = false;\n      } else {\n        arr[index] = false;\n      }\n    }\n\n    return arr;\n  }, errorFlagArray);\n  return [inputValidate, submitFlag];\n}\nexport function mobileFormatInputValidate(passengers, errorFlagArray, itemName) {\n  var submitFlag = true;\n  var inputValidate = passengers.reduce(function (arr, item, index) {\n    if (!mobile_format(item[itemName]) && isRealValue(item[itemName])) {\n      //nameValidate.push(index);\n      arr[index] = true;\n      submitFlag = false;\n    } else {\n      arr[index] = false;\n    }\n\n    return arr;\n  }, errorFlagArray);\n  return [inputValidate, submitFlag];\n}\nexport function just_persian(str) {\n  var p = /^[\\u0600-\\u06FF\\s]+$/;\n  return p.test(str);\n}\nexport function mellicode_format(input) {\n  if (input.length === 10) return true;else {\n    return false;\n  }\n}\nexport function mobile_format(str) {\n  var m = /^09(1[0-9]|3[1-9]|2[1-9])-?[0-9]{3}-?[0-9]{4}/;\n  return m.test(str);\n}\nexport function validateEmail(email) {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\nexport function personType(type) {\n  switch (type) {\n    case \"adult\":\n      return \"بزرگسال\";\n\n    case \"child\":\n      return \"کودک\";\n\n    case \"child1\":\n      return \"کودک\";\n\n    case \"child2\":\n      return \"کودک\";\n\n    case \"infant\":\n      return \"نوزاد\";\n\n    default:\n      return \" \";\n  }\n}\nexport function numToWord(num) {\n  switch (num) {\n    case 1:\n      return \"اول\";\n\n    case 2:\n      return \"دوم\";\n\n    case 3:\n      return \"سوم\";\n\n    case 4:\n      return \"چهارم\";\n\n    case 5:\n      return \"پنجم\";\n\n    case 6:\n      return \"ششم\";\n\n    case 7:\n      return \"هفتم\";\n\n    case 8:\n      return \"هشتم\";\n\n    case 9:\n      return \"نهم\";\n\n    case 10:\n      return \"دهم\";\n\n    case 11:\n      return \"یازدهم\";\n\n    case 12:\n      return \"دوازدهم\";\n\n    case 13:\n      return \"سیزدهم\";\n\n    case 14:\n      return \"چهاردهم\";\n\n    case 15:\n      return \"پانزدهم\";\n\n    case 16:\n      return \"شانزدهم\";\n\n    case 17:\n      return \"هفدهم\";\n\n    case 18:\n      return \"هجدهم\";\n\n    case 19:\n      return \"نوزدهم\";\n\n    case 20:\n      return \"بیستمم\";\n\n    default:\n      return num;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}