{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadCitySaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadCityWatcher);\n\nimport { put, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch'; //imports\n\nimport { loadCitySuccess, failure } from './action';\nimport { actionTypes } from './type';\nimport ports from '../../ports';\nes6promise.polyfill(); //CITY worker\n\nfunction loadCitySaga() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function loadCitySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return fetch(\"\".concat(ports.domain).concat(ports.cityList));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return res.json();\n\n        case 6:\n          data = _context.sent;\n          //console.log(\"cities\" , data)\n          data.sort(function (a) {\n            return a.CountryAbbrevation === \"IR\" ? -1 : 1;\n          });\n          _context.next = 10;\n          return put(loadCitySuccess(data));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(failure(_context.t0));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n} //CITY watcher\n\n\nfunction loadCityWatcher() {\n  return _regeneratorRuntime.wrap(function loadCityWatcher$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actionTypes.LOAD_CITY, loadCitySaga);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default loadCityWatcher;","map":{"version":3,"sources":["C:/Users/Hope/Desktop/KiteSearchEngine/redux/cityList/saga.js"],"names":["loadCitySaga","loadCityWatcher","put","takeLatest","es6promise","loadCitySuccess","failure","actionTypes","ports","polyfill","fetch","domain","cityList","res","json","data","sort","a","CountryAbbrevation","LOAD_CITY"],"mappings":";;;;yBAYUA,Y;;;yBAaAC,e;;AAzBV,SAAUC,GAAV,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP,C,CAEA;;AACA,SAAQC,eAAR,EAA0BC,OAA1B,QAAyC,UAAzC;AACA,SAAQC,WAAR,QAA0B,QAA1B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEAJ,UAAU,CAACK,QAAX,G,CAEA;;AACA,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMU,KAAK,WAAIF,KAAK,CAACG,MAAV,SAAmBH,KAAK,CAACI,QAAzB,EAAX;;AAFpB;AAEcC,UAAAA,GAFd;AAAA;AAGqB,iBAAMA,GAAG,CAACC,IAAJ,EAAN;;AAHrB;AAGcC,UAAAA,IAHd;AAIQ;AACAA,UAAAA,IAAI,CAACC,IAAL,CAAU,UAAAC,CAAC;AAAA,mBAAKA,CAAC,CAACC,kBAAF,KAAyB,IAAzB,GAAgC,CAAC,CAAjC,GAAqC,CAA1C;AAAA,WAAX;AALR;AAMQ,iBAAMhB,GAAG,CAACG,eAAe,CAACU,IAAD,CAAhB,CAAT;;AANR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMb,GAAG,CAACI,OAAO,aAAR,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAYA;;;AACA,SAAUL,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAME,UAAU,CAACI,WAAW,CAACY,SAAb,EAAwBnB,YAAxB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeC,eAAf","sourcesContent":["import {  put,takeLatest } from 'redux-saga/effects'\r\nimport es6promise from 'es6-promise'\r\nimport 'isomorphic-unfetch'\r\n\r\n//imports\r\nimport {loadCitySuccess , failure } from './action';\r\nimport {actionTypes} from './type'\r\nimport ports from '../../ports';\r\n\r\nes6promise.polyfill()\r\n\r\n//CITY worker\r\nfunction* loadCitySaga() {\r\n    try {\r\n        const res = yield fetch(`${ports.domain}${ports.cityList}`)\r\n        const data = yield res.json()\r\n        //console.log(\"cities\" , data)\r\n        data.sort(a => (a.CountryAbbrevation === \"IR\" ? -1 : 1));\r\n        yield put(loadCitySuccess(data))\r\n      } catch (err) {\r\n        yield put(failure(err))\r\n      }\r\n}\r\n\r\n//CITY watcher\r\nfunction* loadCityWatcher() {\r\n    yield takeLatest(actionTypes.LOAD_CITY, loadCitySaga)\r\n}\r\n\r\n\r\nexport default loadCityWatcher "]},"metadata":{},"sourceType":"module"}