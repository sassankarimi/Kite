{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport es6promise from \"es6-promise\";\nimport \"isomorphic-unfetch\"; //imports\n\nimport { searchTourSuccess, failure } from \"./action\";\nimport { actionTypes } from \"./type\";\nimport ports from \"../../ports\";\nes6promise.polyfill();\n\nfunction* searchTourSaga(action) {\n  const body = JSON.stringify(action.data);\n  let counter = 0;\n  let CorrectTour = [];\n\n  try {\n    const res = yield fetch(`${ports.domain}${ports.getPackages}?filter=${body}`);\n    const data = yield res.json();\n    console.log(\" search Results\", data);\n\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].hasOwnProperty(\"PackageRow\") && data[i].PackageRow.length > 0 && data[i].hasOwnProperty(\"Flight\") && data[i].Flight.length > 0) {\n        counter++;\n        CorrectTour.push(data[i]);\n      }\n    }\n\n    console.log(\"correct packages\", counter);\n\n    if (counter > 0) {\n      yield put(searchTourSuccess(CorrectTour));\n    } else {\n      yield put(failure(\"No Correct Package Found\"));\n    }\n  } catch (err) {\n    yield put(failure(err));\n  }\n}\n\nfunction* loadCityWatcher() {\n  yield takeLatest(actionTypes.LOAD_SEARCH_TOUR, searchTourSaga);\n}\n\nexport default loadCityWatcher;","map":{"version":3,"sources":["C:/Users/Hope/Desktop/KiteSearchEngine/redux/searchtour/saga.js"],"names":["put","takeLatest","es6promise","searchTourSuccess","failure","actionTypes","ports","polyfill","searchTourSaga","action","body","JSON","stringify","data","counter","CorrectTour","res","fetch","domain","getPackages","json","console","log","i","length","hasOwnProperty","PackageRow","Flight","push","err","loadCityWatcher","LOAD_SEARCH_TOUR"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP,C,CAEA;;AACA,SAASC,iBAAT,EAA4BC,OAA5B,QAA2C,UAA3C;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEAJ,UAAU,CAACK,QAAX;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AAC/B,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,MAAM,CAACI,IAAtB,CAAb;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAEX,KAAK,CAACY,MAAO,GAAEZ,KAAK,CAACa,WAAY,WAAUT,IAAK,EAD9B,CAAvB;AAGA,UAAMG,IAAI,GAAG,MAAMG,GAAG,CAACI,IAAJ,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BT,IAA/B;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACW,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UACEV,IAAI,CAACU,CAAD,CAAJ,CAAQE,cAAR,CAAuB,YAAvB,KACAZ,IAAI,CAACU,CAAD,CAAJ,CAAQG,UAAR,CAAmBF,MAAnB,GAA4B,CAD5B,IAEAX,IAAI,CAACU,CAAD,CAAJ,CAAQE,cAAR,CAAuB,QAAvB,CAFA,IAGAZ,IAAI,CAACU,CAAD,CAAJ,CAAQI,MAAR,CAAeH,MAAf,GAAwB,CAJ1B,EAKE;AACAV,QAAAA,OAAO;AACPC,QAAAA,WAAW,CAACa,IAAZ,CAAiBf,IAAI,CAACU,CAAD,CAArB;AACD;AACF;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCR,OAAhC;;AACA,QAAIA,OAAO,GAAE,CAAb,EAAgB;AACd,YAAMd,GAAG,CAACG,iBAAiB,CAACY,WAAD,CAAlB,CAAT;AACD,KAFD,MAEO;AACL,YAAMf,GAAG,CAACI,OAAO,CAAC,0BAAD,CAAR,CAAT;AACD;AACF,GAvBD,CAuBE,OAAOyB,GAAP,EAAY;AACZ,UAAM7B,GAAG,CAACI,OAAO,CAACyB,GAAD,CAAR,CAAT;AACD;AACF;;AAED,UAAUC,eAAV,GAA4B;AAC1B,QAAM7B,UAAU,CAACI,WAAW,CAAC0B,gBAAb,EAA+BvB,cAA/B,CAAhB;AACD;;AAED,eAAesB,eAAf","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\r\nimport es6promise from \"es6-promise\";\r\nimport \"isomorphic-unfetch\";\r\n\r\n//imports\r\nimport { searchTourSuccess, failure } from \"./action\";\r\nimport { actionTypes } from \"./type\";\r\nimport ports from \"../../ports\";\r\n\r\nes6promise.polyfill();\r\n\r\nfunction* searchTourSaga(action) {\r\n  const body = JSON.stringify(action.data);\r\n  let counter = 0;\r\n  let CorrectTour = [];\r\n  try {\r\n    const res = yield fetch(\r\n      `${ports.domain}${ports.getPackages}?filter=${body}`\r\n    );\r\n    const data = yield res.json();\r\n    console.log(\" search Results\", data);\r\n    for (var i = 0; i < data.length; i++) {\r\n      if (\r\n        data[i].hasOwnProperty(\"PackageRow\") &&\r\n        data[i].PackageRow.length > 0 &&\r\n        data[i].hasOwnProperty(\"Flight\") &&\r\n        data[i].Flight.length > 0\r\n      ) {\r\n        counter++;\r\n        CorrectTour.push(data[i]);\r\n      }\r\n    }\r\n    console.log(\"correct packages\", counter);\r\n    if (counter> 0) {\r\n      yield put(searchTourSuccess(CorrectTour));\r\n    } else {\r\n      yield put(failure(\"No Correct Package Found\"));\r\n    }\r\n  } catch (err) {\r\n    yield put(failure(err));\r\n  }\r\n}\r\n\r\nfunction* loadCityWatcher() {\r\n  yield takeLatest(actionTypes.LOAD_SEARCH_TOUR, searchTourSaga);\r\n}\r\n\r\nexport default loadCityWatcher;\r\n"]},"metadata":{},"sourceType":"module"}