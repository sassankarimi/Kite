{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch'; //imports\n\nimport { loadHeaderSuccess, failure, loadTourSuccess, failureTour, loadTour } from './actions';\nimport { actionTypes } from './types';\nimport ports from '../../ports';\nes6promise.polyfill(); //header worker\n\nfunction* loadHeaderSaga() {\n  try {\n    const res = yield fetch(`${ports.domain}${ports.getPackageGroup}`);\n    const data = yield res.json();\n    yield put(loadHeaderSuccess(data));\n    yield put(loadTour(data[0].Id));\n  } catch (err) {\n    yield put(failure(err));\n  }\n} //header watcher\n\n\nfunction* loadHeaderWatcher() {\n  yield takeLatest(actionTypes.LOAD_HEADER, loadHeaderSaga);\n} //tour worker\n\n\nfunction* loadTourSaga(action) {\n  try {\n    const res = yield fetch(`${ports.domain}${ports.packageList}?PackageGroupId=${action.id}`);\n    const data = yield res.json();\n    yield put(loadTourSuccess(data));\n  } catch (err) {\n    yield put(failureTour(err));\n  }\n} //tour watcher\n\n\nfunction* loadTourWatcher() {\n  yield takeLatest(actionTypes.LOAD_Tour, loadTourSaga);\n}\n\nexport { loadHeaderWatcher, loadTourWatcher };","map":null,"metadata":{},"sourceType":"module"}