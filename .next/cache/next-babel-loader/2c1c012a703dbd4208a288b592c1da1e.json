{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\"; //redux\n\nimport { connect } from \"react-redux\"; //UI Libraries\n\nimport { MDBCard, MDBCardBody } from \"mdbreact\";\nimport { IoIosWarning, IoMdInformationCircle } from \"react-icons/io\";\nimport { TiSortAlphabetically } from \"react-icons/ti\";\nimport { Col, Row, Form, FormGroup, Label, InputGroup, Input } from \"reactstrap\"; //components\n\nimport Countries from \"../../Countries\"; //axios\n\nimport axios from \"axios\";\nimport Ports from \"../../ports\"; //utilities\n\nimport { numToWord, personType, latinOrPersianValidate, requiredInput, validateEmail, just_persian, isRealValue, mobileFormatInputValidate, mobile_format, checkLimits, isNumber, mellicode_format } from \"../../Functions\";\nimport NumberFormat from \"react-number-format\";\nimport moment from \"moment-jalaali\";\nimport { FaRegFlag } from \"react-icons/fa\";\n\nconst InfoForm = props => {\n  const {\n    0: iAm,\n    1: setIAm\n  } = useState(true);\n  const {\n    0: iAmnot,\n    1: setIAmnot\n  } = useState(false);\n  const {\n    0: before,\n    1: setBefore\n  } = useState(false);\n  const {\n    0: condotion,\n    1: setCondotion\n  } = useState(false);\n  const {\n    0: condotionFlag,\n    1: setCondotionFlag\n  } = useState(false);\n  const {\n    0: submitFlag,\n    1: setSubmitFlag\n  } = useState(false);\n  const {\n    0: customerFlag,\n    1: setcustomerFlag\n  } = useState(true);\n  const {\n    paymentObj\n  } = props;\n  const {\n    0: formAdult,\n    1: setFormAdult\n  } = useState(new Array(Math.abs(paymentObj[0].Adult)).fill(0).map((value, i) => value = {\n    personType: \"adult\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"ساسان\",\n    // PersianLastName: \"کریمی\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 0,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Adult,\n    PackageFlightId: paymentObj[0].FlightID,\n    Insurance: paymentObj[0].Insurance,\n    InsuranceId: paymentObj[0].InsuranceId,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId,\n    //i dont know about type and value of Services data.(just for exist for Api)\n    Services: paymentObj[0].Services\n  }));\n  const {\n    0: formChild1,\n    1: setFormChild1\n  } = useState(new Array(Math.abs(paymentObj[0].Child1)).fill(0).map((value, i) => value = {\n    personType: \"child1\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"\",\n    // PersianLastName: \"\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 1,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Child1,\n    PackageFlightId: paymentObj[0].FlightID,\n    Insurance: paymentObj[0].Insurance,\n    InsuranceId: paymentObj[0].InsuranceId,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId,\n    //i dont know about type and value of Services data.(just for exist for Api)\n    Services: paymentObj[0].Services\n  }));\n  const {\n    0: formChild2,\n    1: setFormChild2\n  } = useState(new Array(Math.abs(paymentObj[0].Child2)).fill(0).map((value, i) => value = {\n    personType: \"child2\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"\",\n    // PersianLastName: \"\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 2,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Child2,\n    PackageFlightId: paymentObj[0].FlightID,\n    Insurance: paymentObj[0].Insurance,\n    InsuranceId: paymentObj[0].InsuranceId,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId\n  }));\n  const {\n    0: formInfant,\n    1: setFormInfant\n  } = useState(new Array(Math.abs(paymentObj[0].Infant)).fill(0).map((value, i) => value = {\n    personType: \"infant\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"\",\n    // PersianLastName: \"\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 3,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Infant,\n    PackageFlightId: paymentObj[0].FlightID,\n    InsuranceId: paymentObj[0].InsuranceId,\n    Insurance: paymentObj[0].Insurance,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId\n  }));\n  const errorBorder = {\n    border: \"1px solid red\"\n  };\n  const allPassengers = formAdult.concat(formChild1, formChild2, formInfant);\n  const {\n    0: passengers,\n    1: setPassengers\n  } = useState(allPassengers);\n  const {\n    0: customer,\n    1: setCustomer\n  } = useState({\n    CustomerId: \"\",\n    FirstName: \"\",\n    LastName: \"\",\n    Email: \"\",\n    MobileNumber: \"\",\n    From: \"Site\",\n    Code: \"\"\n  }); //errors of passengers\n\n  const {\n    0: nameError,\n    1: setNameError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: latinNameError,\n    1: setLatinNameError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: familyError,\n    1: setFamilyError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: latinFamilyError,\n    1: setLatinFamilyError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mobileFormatError,\n    1: setMobileFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mobileReqError,\n    1: setMobileReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bDayReqError,\n    1: setBDayReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bDayFormatError,\n    1: setBDayFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bMonReqError,\n    1: setBMonReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bMonFormatError,\n    1: setBMonFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bYearReqError,\n    1: setBYearReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mellicodeReqErroe,\n    1: setMellicodeReqErroe\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mellicodeFormatError,\n    1: setMellicodeFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mellicodeLengthError,\n    1: setMellicodeLengthError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: passportReqErroe,\n    1: setPassportReqErroe\n  } = useState(new Array(allPassengers.length).fill(false)); //erros of customer\n\n  const {\n    0: submiterEmailError,\n    1: setSubmiterEmailError\n  } = useState(false);\n  const {\n    0: submiterEmailFormatError,\n    1: setSubmiterEmailFormatError\n  } = useState(false);\n  const {\n    0: submiterNameError,\n    1: setSubmiterNameError\n  } = useState(false);\n  const {\n    0: submiterFamilyError,\n    1: setSubmiterFamilyError\n  } = useState(false);\n  const {\n    0: submiterMobileError,\n    1: setSubmiterMobileError\n  } = useState(false);\n  const {\n    0: submiterMobileFormatError,\n    1: setSubmiterMobileFormatError\n  } = useState(false);\n  const {\n    0: contractError,\n    1: setContractError\n  } = useState(false);\n  const {\n    0: customerType,\n    1: setCustomerType\n  } = useState(0);\n  const roomCount = props.searchParams.roomRules.split(\",\"); //one of passengers\n\n  function onSetIamChanged() {\n    setIAmnot(false);\n    setBefore(false);\n    setIAm(true);\n    setCustomerType(0);\n  } //not one of passengers\n\n\n  function onSetIamNotChanged() {\n    setIAm(false);\n    setBefore(false);\n    setIAmnot(true);\n    setCustomerType(1);\n  } //old customer\n\n\n  function onSetBeforeChanged() {\n    setIAm(false);\n    setIAmnot(false);\n    setBefore(true);\n    setCustomerType(2);\n  } //Utility\n\n\n  function HotelPriceFormat(num) {\n    return __jsx(NumberFormat, {\n      value: num,\n      displayType: \"text\",\n      thousandSeparator: true,\n      renderText: num => __jsx(\"div\", null, num)\n    });\n  } //handel customer and passenger forms\n\n\n  async function handleForm(e) {\n    e.preventDefault(); //submitter (customer) Validation\n    //email validatiom\n\n    let emailFlag = isRealValue(customer.Email) ? false : true;\n    setSubmiterEmailError(emailFlag);\n    let emailFormatFlag = false; //first check required and when email has value then chack email format\n\n    if (!emailFlag) {\n      emailFormatFlag = validateEmail(customer.Email) ? false : true;\n      setSubmiterEmailFormatError(emailFormatFlag);\n    }\n\n    if (emailFormatFlag || emailFlag) setSubmitFlag(false); //name and familyl and mobile\n\n    if (customerType === 1) {\n      let submiterNameFlag = isRealValue(customer.FirstName) ? false : true;\n      setSubmiterNameError(submiterNameFlag);\n      let submiterFamilyFlag = isRealValue(customer.LastName) ? false : true;\n      setSubmiterFamilyError(submiterFamilyFlag);\n      let submiterMobileFlag = isRealValue(customer.MobileNumber) ? false : true;\n      setSubmiterMobileError(submiterMobileFlag);\n      let mobileFormatFlag = false;\n\n      if (!submiterMobileFlag) {\n        mobileFormatFlag = mobile_format(customer.MobileNumber) ? false : true;\n        setSubmiterMobileFormatError(mobileFormatFlag);\n      }\n\n      if (submiterNameFlag || submiterFamilyFlag || submiterMobileFlag) setSubmitFlag(false);\n    } //mobile or contract\n\n\n    if (customerType === 2) {\n      if (isRealValue(customer.MobileNumber) || isRealValue(customer.Code)) {\n        if (isRealValue(customer.MobileNumber)) {\n          if (!mobile_format(customer.MobileNumber)) {\n            setContractError(true);\n            setSubmitFlag(false);\n          }\n\n          setContractError(false);\n        } else setContractError(false);\n      } else {\n        setContractError(true);\n        setSubmitFlag(false);\n      }\n    }\n    /* passengers Validations  */\n    //name required validate\n\n\n    let nameErrorTemp = nameError;\n    var nameValidate = requiredInput(passengers, nameErrorTemp, \"FirstName\");\n    setNameError(nameValidate[0].slice());\n    if (!nameValidate[1]) setSubmitFlag(false); //name latin validate\n\n    let latinNameErrorTemp = latinNameError;\n    var nameLatinValidate = latinOrPersianValidate(passengers, latinNameErrorTemp, \"FirstName\", 0);\n    setLatinNameError(nameLatinValidate[0].slice());\n    if (!nameLatinValidate[1]) setSubmitFlag(false); //family required validate\n\n    let familyErrorTemp = familyError;\n    var familyValidate = requiredInput(passengers, familyErrorTemp, \"LastName\");\n    setFamilyError(familyValidate[0].slice());\n    if (!familyValidate[1]) setSubmitFlag(false); //family latin validate\n\n    let latinFamilyErrorTemp = latinFamilyError;\n    var familyLatinValidate = latinOrPersianValidate(passengers, latinFamilyErrorTemp, \"LastName\", 0);\n    setLatinFamilyError(familyLatinValidate[0].slice());\n    if (!familyLatinValidate[1]) setSubmitFlag(false); //room choose validation\n\n    var roomFlag = true;\n\n    for (var i = 0; i < roomCount.length; i++) {\n      let eachRoom = [];\n      eachRoom = passengers.filter(item => item.Room === i + 1);\n      let sumAdult = 0;\n      let sumChild1 = 0;\n      let sumChild2 = 0;\n      let sumInfant = 0;\n\n      for (var j = 0; j < eachRoom.length; j++) {\n        if (eachRoom[j].personType === \"adult\") sumAdult++;\n        if (eachRoom[j].personType === \"child1\") sumChild1++;\n        if (eachRoom[j].personType === \"child2\") sumChild2++;\n        if (eachRoom[j].personType === \"infant\") sumInfant++;\n      }\n\n      if (parseInt(sumAdult) > parseInt(roomCount[i].charAt(0))) {\n        alert(`تعداد بزرگسال اتاق  ${numToWord(i + 1)} بیشتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumAdult) < parseInt(roomCount[i].charAt(0))) {\n        alert(` تعداد بزرگسال اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumChild1) + parseInt(sumChild2) < parseInt(roomCount[i].charAt(1)) + parseInt(roomCount[i].charAt(2))) {\n        alert(`تعداد کودک اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumChild1) + parseInt(sumChild2) > parseInt(roomCount[i].charAt(1)) + parseInt(roomCount[i].charAt(2))) {\n        alert(`تعداد کودک اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumInfant) < parseInt(roomCount[i].charAt(3))) {\n        alert(`تعداد نوزاد اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumInfant) > parseInt(roomCount[i].charAt(3))) {\n        alert(`تعداد نوزاد اتاق  ${numToWord(i + 1)} بیشتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      }\n\n      if (!roomFlag) {\n        setSubmitFlag(false);\n        break;\n      }\n    } //end of room validation\n    //mobile required validate\n\n\n    let mobileReqErrorTemp = mobileReqError;\n    var CellPhoneNumberValidate = requiredInput(passengers, mobileReqErrorTemp, \"CellPhoneNumber\");\n    setMobileReqError(CellPhoneNumberValidate[0].slice());\n    if (!CellPhoneNumberValidate[1]) setSubmitFlag(false); //mobile format validate\n\n    let mobileFormatErrorTemp = mobileFormatError;\n    var mobileFormatValidate = mobileFormatInputValidate(passengers, mobileFormatErrorTemp, \"CellPhoneNumber\", 1);\n    setMobileFormatError(mobileFormatValidate[0].slice());\n    if (!mobileFormatValidate[1]) setSubmitFlag(false); //birthday required validate (Day)\n\n    let bDayReqErrorTemp = bDayReqError;\n    var bDayValidate = requiredInput(passengers, bDayReqErrorTemp, \"bDay\");\n    setBDayReqError(bDayValidate[0].slice());\n    if (!bDayValidate[1]) setSubmitFlag(false); //birthday format validate (Day)\n\n    let bDayFormatErrorTemp = bDayFormatError;\n    var bDayFormatValidate = checkLimits(passengers, bDayFormatErrorTemp, \"bDay\", \"DAY\");\n    setBDayFormatError(bDayFormatValidate[0].slice());\n    if (!bDayFormatValidate[1]) setSubmitFlag(false); //birthday required validate (Month)\n\n    let bMonReqErrorTemp = bMonReqError;\n    var bMonValidate = requiredInput(passengers, bMonReqErrorTemp, \"bMonth\");\n    setBMonReqError(bMonValidate[0].slice());\n    if (!bMonValidate[1]) setSubmitFlag(false); //birthday format validate (Month)\n\n    let bMonFormatErrorTemp = bMonFormatError;\n    var bMonFormatValidate = checkLimits(passengers, bMonFormatErrorTemp, \"bMonth\", \"Month\");\n    setBMonFormatError(bMonFormatValidate[0].slice());\n    if (!bMonFormatValidate[1]) setSubmitFlag(false); //birthday required validate (Year)\n\n    let bYearReqErrorTemp = bYearReqError;\n    var bYearValidate = requiredInput(passengers, bYearReqErrorTemp, \"bYear\");\n    setBYearReqError(bYearValidate[0].slice());\n    if (!bYearValidate[1]) setSubmitFlag(false); //birthday age validate\n\n    passengers.map((people, index) => {\n      let birthday = \"\";\n      let ageFlag = true;\n\n      if (people.birthType === 0) {\n        birthday = moment(people.BirthDate, \"jYYYY/jMM/jDD\").format(\"YYYY/MM/DD\");\n      } else {\n        birthday = people.BirthDate;\n      }\n\n      let age = moment().diff(birthday, \"years\");\n\n      if (people.personType === \"adult\") {\n        if (age < 12) {\n          ageFlag = false;\n          alert(`تاریخ تولد بزگسال ${numToWord(index + 1)} صحیح وارد نشده است! `);\n        } else {\n          if (age > 65) {\n            people.InsurancePrice = paymentObj[0].InsuranceOldPrice;\n          }\n        }\n      } else if (people.personType === \"child1\" || people.personType === \"child2\") {\n        if (age > 12 || age < 2) {\n          ageFlag = false;\n          alert(`تاریخ تولد کودک ${numToWord(index + 1)} صحیح وارد نشده است! `);\n        }\n      } else {\n        if (age > 2) {\n          ageFlag = false;\n          alert(`تاریخ تولد نوزاد ${numToWord(index + 1)} صحیح وارد نشده است! `);\n        }\n      }\n\n      if (!ageFlag) {\n        setSubmitFlag(false);\n      }\n    }); //mellicode and passport Require validate\n\n    passengers.map((people, i) => {\n      if (people.cardType === 0) {\n        //length validation\n        let mellicodeReqErroeTemp = mellicodeLengthError;\n        let mellicodeValidate = mellicode_format(people.melliCode) ? false : true;\n        if (mellicodeValidate) setSubmitFlag(false);\n        mellicodeReqErroeTemp[i] = mellicodeValidate;\n        setMellicodeLengthError(mellicodeReqErroeTemp.slice()); //required validate\n\n        let req = mellicodeReqErroe;\n        let reqFlag = isRealValue(people.melliCode) ? false : true;\n        if (reqFlag) setSubmitFlag(false);\n        req[i] = reqFlag;\n        setMellicodeReqErroe(req.slice());\n      } else {\n        //required validate\n        let req = passportReqErroe;\n        let reqFlag = isRealValue(people.PassportNo) ? false : true;\n        if (reqFlag) setSubmitFlag(false);\n        req[i] = reqFlag;\n        setPassportReqErroe(req.slice());\n      }\n    }); //     //before any request check submitFlag until here\n\n    if (!submitFlag) {\n      return false;\n    } //     //get customer data\n    //     let customerTemp = customer;\n    //     //flag check for submit again by user and prevent for double insert\n    //     if (customerFlag) {\n    //       if (customerType === 0 || customerType === 1) {\n    //         let title = \"\";\n    //         let password = \"\";\n    //         if (customerType === 0) {\n    //           title = passengers[0].FirstName + \" \" + passengers[0].LastName;\n    //           password = passengers[0].CellPhoneNumber;\n    //         }\n    //         if (customerType === 1) {\n    //           title = customer.FirstName + \" \" + customer.LastName;\n    //           password = customer.MobileNumber;\n    //         }\n    //         if (isRealValue(title) && isRealValue(password)) {\n    //           await axios\n    //             .get(`${Ports.domain}${Ports.userRegister}`, {\n    //               params: {\n    //                 title: title,\n    //                 username: customer.Email,\n    //                 password: password\n    //               }\n    //             })\n    //             .then(function(response) {\n    //               console.log(response);\n    //               switch (response.status) {\n    //                 case 200:\n    //                   return response.data;\n    //                 default:\n    //                   return false;\n    //               }\n    //             })\n    //             .catch(function(error) {\n    //               console.log(\"error \", error);\n    //               alert(\"ایمیل کاربر ثبت کننده تکراری است\");\n    //               setSubmitFlag(false);\n    //             })\n    //             .then(data => {\n    //               if (data === \"\") {\n    //                 alert(\"ok\");\n    //                 if (customerType === 0) {\n    //                   customerTemp.FirstName = passengers[0].FirstName;\n    //                   customerTemp.LastName = passengers[0].LastName;\n    //                   customerTemp.MobileNumber = passengers[0].CellPhoneNumber;\n    //                 }\n    //                 setCustomer(customerTemp);\n    //                 setcustomerFlag(false);\n    //                 console.log(\"custumer\", customerTemp);\n    //               }\n    //             });\n    //         }\n    //       }\n    //       if (customerType === 2) {\n    //         if (\n    //           isRealValue(customer.Email) &&\n    //           (isRealValue(customer.Code) || isRealValue(customer.MobileNumber))\n    //         ) {\n    //           let loginType =\n    //             isRealValue(customer.MobileNumber) &&\n    //             mobile_format(customer.MobileNumber)\n    //               ? \"Account\"\n    //               : \"Contract\";\n    //           let password =\n    //             isRealValue(customer.MobileNumber) &&\n    //             mobile_format(customer.MobileNumber)\n    //               ? customer.MobileNumber\n    //               : customer.Code;\n    //           let username = customer.Email;\n    //           let formBody = new FormData();\n    //           formBody.append(\"username\", username);\n    //           formBody.append(\"password\", password);\n    //           formBody.append(\"logintype\", loginType);\n    //           await axios\n    //             .post(`${Ports.domain}${Ports.userLogin}`, formBody)\n    //             .then(function(response) {\n    //               console.log(response);\n    //               switch (response.status) {\n    //                 case 200:\n    //                   return response.data;\n    //                 default:\n    //                   return false;\n    //               }\n    //             })\n    //             .catch(function(error) {\n    //               console.log(\"error \", error);\n    //               alert(\"مشخصات کاربر ثبت کننده یافت نشد\");\n    //               setSubmitFlag(false);\n    //             })\n    //             .then(data => {\n    //               if (data === \"ERROR\") {\n    //                 alert(\"مشخصات کاربر ثبت کننده یافت نشد\");\n    //                 setSubmitFlag(false);\n    //               } else {\n    //                 let fullName = data.Title.split(\" \");\n    //                 let name = \"\";\n    //                 let family = \"\";\n    //                 if (fullName.length > 1) {\n    //                   name = fullName[0];\n    //                   family = fullName[1];\n    //                 } else {\n    //                   name = fullName[0];\n    //                   family = fullName[0];\n    //                 }\n    //                 customerTemp = {\n    //                   CustomerId: data.CustomersId,\n    //                   FirstName: name,\n    //                   LastName: family,\n    //                   Email: data.Email,\n    //                   MobileNumber: data.MobileNumber,\n    //                   From: \"Site\",\n    //                   Code: customer.Code\n    //                 };\n    //                 console.log(\"data from user login \", data);\n    //               }\n    //             });\n    //         }\n    //         console.log(\"custumer type 2\", customerTemp);\n    //       }\n    //     } //customerFlag\n    //     let paymentObj = paymentObj[0];\n    //     let info = [\n    //       {\n    //         Flight: [],\n    //         Package: [\n    //           {\n    //             Flight: [],\n    //             Row: [\n    //               {\n    //                 Flight: [\n    //                   {\n    //                     Going: [\n    //                       {\n    //                         ItemType: paymentObj.Flight.ItemType,\n    //                         AirLineAbbrevation: paymentObj.AirLineAbbrevation_Going,\n    //                         AirLineId: paymentObj.Flight.AirLineId_Going,\n    //                         FileName: paymentObj.Flight.FileName_Going,\n    //                         AirLineTitle: paymentObj.Flight.AirLineTitle_Going,\n    //                         DestAirportAbbrevation:\n    //                           paymentObj.Flight.AirLineAbbrevation_Going,\n    //                         DestAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Going,\n    //                         DestCityAbbrevation:\n    //                           paymentObj.Flight.DestCityAbbrevation_Going,\n    //                         DestCityTitle: paymentObj.Flight.DestCityTitle_Going,\n    //                         DestCountryAbbrevation:\n    //                           paymentObj.Flight.DestCountryAbbrevation_Going,\n    //                         DestCountryTitle:\n    //                           paymentObj.Flight.DestCountryTitle_Going,\n    //                         FlightDuration: paymentObj.Flight.FlightDuration_Going,\n    //                         FlightNo: paymentObj.Flight.FlightNo_Going,\n    //                         Id: paymentObj.Flight.Id_Going,\n    //                         LocalARRDate: paymentObj.Flight.LocalARRDate_Going,\n    //                         LocalARRTime: paymentObj.Flight.LocalARRTime_Going,\n    //                         LocalDEPDate: paymentObj.Flight.LocalDEPDate_Going,\n    //                         LocalDEPTime: paymentObj.Flight.LocalDEPTime_Going,\n    //                         SourceAirportAbbrevation:\n    //                           paymentObj.Flight.SourceAirportAbbrevation_Going,\n    //                         SourceAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Going,\n    //                         SourceCityAbbrevation:\n    //                           paymentObj.Flight.SourceCityAbbrevation_Going,\n    //                         SourceCityTitle:\n    //                           paymentObj.Flight.SourceCityTitle_Going,\n    //                         SourceCountryAbbrevation:\n    //                           paymentObj.Flight.SourceCountryAbbrevation_Going,\n    //                         SourceCountryTitle:\n    //                           paymentObj.Flight.SourceCountryTitle_Going,\n    //                         FlightClass: paymentObj.Flight.FlightClassTitle_Going,\n    //                         CityId: paymentObj.Flight.DestCityId_Going,\n    //                         Load: paymentObj.Flight.Load,\n    //                         IsWebService: paymentObj.Flight.IsWebService,\n    //                         WebServiceName: paymentObj.Flight.WebServiceName,\n    //                         B2BID: paymentObj.Flight.B2BID,\n    //                         UserLoginId: paymentObj.Flight.UserLoginId,\n    //                         OnRequest: paymentObj.Flight.OnRequest_Going,\n    //                         DeparturePrice: paymentObj.Flight.DeparturePrice,\n    //                         ReturnPrice: paymentObj.Flight.ReturnPrice,\n    //                         PackageFlightId: paymentObj.Flight.PackageFlightId\n    //                       }\n    //                     ],\n    //                     Coming: [\n    //                       {\n    //                         ItemType: paymentObj.Flight.ItemType,\n    //                         AirLineAbbrevation:\n    //                           paymentObj.AirLineAbbrevation_Coming,\n    //                         AirLineId: paymentObj.Flight.AirLineId_Coming,\n    //                         FileName: paymentObj.Flight.FileName_Coming,\n    //                         AirLineTitle: paymentObj.Flight.AirLineTitle_Coming,\n    //                         DestAirportAbbrevation:\n    //                           paymentObj.Flight.AirLineAbbrevation_Coming,\n    //                         DestAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Coming,\n    //                         DestCityAbbrevation:\n    //                           paymentObj.Flight.DestCityAbbrevation_Coming,\n    //                         DestCityTitle: paymentObj.Flight.DestCityTitle_Coming,\n    //                         DestCountryAbbrevation:\n    //                           paymentObj.Flight.DestCountryAbbrevation_Coming,\n    //                         DestCountryTitle:\n    //                           paymentObj.Flight.DestCountryTitle_Coming,\n    //                         FlightDuration: paymentObj.Flight.FlightDuration_Coming,\n    //                         FlightNo: paymentObj.Flight.FlightNo_Coming,\n    //                         Id: paymentObj.Flight.Id_Coming,\n    //                         LocalARRDate: paymentObj.Flight.LocalARRDate_Coming,\n    //                         LocalARRTime: paymentObj.Flight.LocalARRTime_Coming,\n    //                         LocalDEPDate: paymentObj.Flight.LocalDEPDate_Coming,\n    //                         LocalDEPTime: paymentObj.Flight.LocalDEPTime_Coming,\n    //                         SourceAirportAbbrevation:\n    //                           paymentObj.Flight.SourceAirportAbbrevation_Coming,\n    //                         SourceAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Coming,\n    //                         SourceCityAbbrevation:\n    //                           paymentObj.Flight.SourceCityAbbrevation_Coming,\n    //                         SourceCityTitle:\n    //                           paymentObj.Flight.SourceCityTitle_Coming,\n    //                         SourceCountryAbbrevation:\n    //                           paymentObj.Flight.SourceCountryAbbrevation_Coming,\n    //                         SourceCountryTitle:\n    //                           paymentObj.Flight.SourceCountryTitle_Coming,\n    //                         FlightClass: paymentObj.Flight.FlightClassTitle_Coming,\n    //                         CityId: paymentObj.Flight.DestCityId_Coming,\n    //                         Load: paymentObj.Flight.Load,\n    //                         IsWebService: paymentObj.Flight.IsWebService,\n    //                         WebServiceName: paymentObj.Flight.WebServiceName,\n    //                         B2BID: paymentObj.Flight.B2BID,\n    //                         UserLoginId: paymentObj.Flight.UserLoginId,\n    //                         OnRequest: paymentObj.Flight.OnRequest_Coming,\n    //                         DeparturePrice: paymentObj.Flight.DeparturePrice,\n    //                         ReturnPrice: paymentObj.Flight.ReturnPrice,\n    //                         PackageFlightId: paymentObj.Flight.PackageFlightId\n    //                       }\n    //                     ]\n    //                   }\n    //                 ],\n    //                 HotelList: paymentObj.Hotel,\n    //                 HotelPrice: paymentObj.RoomInfo,\n    //                 hotelprice_index: 0,\n    //                 Id: paymentObj.PackageHotelRowId\n    //               }\n    //             ],\n    //             Insurance_AdultPrice: paymentObj.InsuranceAdultPrice,\n    //             Insurance_OldPrice: paymentObj.InsuranceOldPrice,\n    //             PackageLength: paymentObj.PackageLength,\n    //             Id: paymentObj.packageId,\n    //             AdultCount: paymentObj.Adult,\n    //             Child1Count: paymentObj.Child1,\n    //             Child2Count: paymentObj.Child2,\n    //             InfantCount: paymentObj.Infant,\n    //             InfantPrice: paymentObj.InfantPrice,\n    //             RoomRule: paymentObj.RoomRules,\n    //             RoomRules: paymentObj.RoomRules\n    //           }\n    //         ],\n    //         Passengers: passengers,\n    //         Customer: [customerTemp],\n    //         Registration: [],\n    //         ReserveType: \"Package\",\n    //         CounterId: \"\",\n    //         Price: paymentObj.TotalPrice,\n    //         PrePayment: 0,\n    //         PriceType: \"All\",\n    //         Discount: 0,\n    //         DiscountWithCode: 0,\n    //         Description: \"\",\n    //         PromoCode: \"\",\n    //         From: \"Site\",\n    //         CommissionInReserveType: \"\",\n    //         CommissionValue: -1,\n    //         CurrencyValue: 1,\n    //         CurrencyTitle: \"ریال\",\n    //         CurrencyTypeId: \"\"\n    //       }\n    //     ];\n    //     //console.log(\"insertOBJ\",info)\n    //     console.log(\"passengers\", JSON.stringify(passengers));\n    //     console.log(\"info\", JSON.stringify(info));\n    //     if (!setSubmitFlag) {\n    //       return false;\n    //     }\n    //     await axios\n    //       .get(`${Ports.domain}${Ports.book}`, {\n    //         params: {\n    //           info: JSON.stringify(info),\n    //           getway_type: \"MELLAT\",\n    //           force_payment: true,\n    //           is_webservice: false,\n    //           webservice_name: \"\",\n    //           IsOnRequest: false,\n    //           passengers: JSON.stringify(passengers),\n    //           TrackerUniqueId: \"\"\n    //         }\n    //       })\n    //       .then(function(response) {\n    //         console.log(response);\n    //         switch (response.status) {\n    //           case 200:\n    //             return response.data;\n    //           default:\n    //             return false;\n    //         }\n    //       })\n    //       .catch(function(error) {\n    //         console.log(\"error \", error);\n    //         alert(\"Error\" + error);\n    //       })\n    //       .then(data => {\n    //         console.log(\"reserv data after form submit\", data);\n    //       });\n\n  } //handle customer Fields\n\n\n  function handleUser(e, type) {\n    let value = e.target.value;\n\n    if (type === \"Email\") {\n      let emailFlag = isRealValue(value) ? false : true;\n      setSubmiterEmailError(emailFlag);\n      setCustomer(_objectSpread({}, customer, {\n        Email: value\n      }));\n    }\n\n    if (type === \"FirstName\") {\n      let submiterNameFlag = isRealValue(value) ? false : true;\n      setSubmiterNameError(submiterNameFlag);\n      setCustomer(_objectSpread({}, customer, {\n        FirstName: value\n      }));\n    }\n\n    if (type === \"LastName\") {\n      let submiterFamilyFlag = isRealValue(value) ? false : true;\n      setSubmiterFamilyError(submiterFamilyFlag);\n      setCustomer(_objectSpread({}, customer, {\n        LastName: value\n      }));\n    }\n\n    if (type === \"MobileNumber\") {\n      if (customerType === 1) {\n        let submiterMobileFlag = isRealValue(value) ? false : true;\n        setSubmiterMobileError(submiterMobileFlag);\n      }\n\n      if (customerType === 2) {\n        let submiterMobileFlag = isRealValue(value) ? false : true;\n        setContractError(submiterMobileFlag);\n      }\n\n      setCustomer(_objectSpread({}, customer, {\n        MobileNumber: value\n      }));\n    }\n\n    if (type === \"Code\") {\n      if (customerType === 2) {\n        let submiterCodeFlag = isRealValue(value) ? false : true;\n        setContractError(submiterCodeFlag);\n      }\n\n      setCustomer(_objectSpread({}, customer, {\n        Code: value\n      }));\n    }\n  } //handle passengers validation\n\n\n  function handleInputChange(e, idx, type) {\n    let nextPassenger = passengers.slice();\n    nextPassenger[idx].id = idx;\n    let value = e.target.value;\n\n    if (type === \"FirstName\") {\n      nextPassenger[idx].FirstName = value; //check latin\n\n      let latin = latinNameError;\n      let latinFlag = just_persian(value) ? true : false;\n      latin[idx] = latinFlag;\n      setLatinNameError(latin.slice()); //check required\n\n      let req = nameError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setNameError(req.slice());\n    }\n\n    if (type === \"LastName\") {\n      nextPassenger[idx].LastName = value; //check latin\n\n      let latin = latinFamilyError;\n      let latinFlag = just_persian(value) ? true : false;\n      latin[idx] = latinFlag;\n      setLatinFamilyError(latin.slice()); //check required\n\n      let req = familyError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setFamilyError(req.slice());\n    }\n\n    if (type === \"CellPhoneNumber\") {\n      nextPassenger[idx].CellPhoneNumber = value; //check required\n\n      let req = mobileReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setMobileReqError(req.slice()); //check format\n\n      let format = mobileFormatError;\n      let formatFlag = mobile_format(value) ? false : true;\n      if (!isRealValue(value)) formatFlag = false;\n      format[idx] = formatFlag;\n      setMobileFormatError(format.slice());\n    }\n\n    if (type === \"Gender\") nextPassenger[idx].Gender = value;\n    if (type === \"birthType\") nextPassenger[idx].birthType = value;\n\n    if (type === \"Nationality\") {\n      var option_user_selection = e.target.options[e.target.selectedIndex].text;\n      nextPassenger[idx].Nationality = option_user_selection;\n      nextPassenger[idx].NationalityCode = value;\n    }\n\n    if (type === \"bDay\") {\n      nextPassenger[idx].bDay = value; //check required\n\n      let req = bDayReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setBDayReqError(req.slice());\n    }\n\n    if (type === \"bMonth\") {\n      nextPassenger[idx].bMonth = value; //check required\n\n      let req = bMonReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setBMonReqError(req.slice());\n    }\n\n    if (type === \"bYear\") {\n      nextPassenger[idx].bYear = value; //check required\n\n      let req = bYearReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setBYearReqError(req.slice());\n    }\n\n    if (type === \"bDay\" || type === \"bMonth\" || type === \"bYear\") {\n      nextPassenger[idx].BirthDate = nextPassenger[idx].bYear + \"/\" + nextPassenger[idx].bMonth + \"/\" + nextPassenger[idx].bDay;\n    }\n\n    if (type === \"pDay\" || type === \"pMonth\" || type === \"pYear\") {\n      if (type === \"pDay\") nextPassenger[idx].pDay = value;\n      if (type === \"pMonth\") nextPassenger[idx].pMonth = value;\n      if (type === \"pYear\") nextPassenger[idx].pYear = value;\n      nextPassenger[idx].PassportExpirationDate = nextPassenger[idx].pYear + \"/\" + nextPassenger[idx].pMonth + \"/\" + nextPassenger[idx].pDay;\n    }\n\n    if (type === \"cardType\") nextPassenger[idx].cardType = parseInt(value);\n\n    if (type === \"PassportNo\") {\n      nextPassenger[idx].PassportNo = value; //check required\n\n      let req = passportReqErroe;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setPassportReqErroe(req.slice());\n    }\n\n    if (type === \"PassportExpirationDate\") nextPassenger[idx].PassportExpirationDate = value;\n\n    if (type === \"melliCode\") {\n      nextPassenger[idx].melliCode = value; //check numbare\n\n      let numbare = mellicodeFormatError;\n      console.log(\"is number output\", isNumber(value));\n      let numbareFlag = isNumber(value) ? false : true;\n      numbare[idx] = numbareFlag;\n      setMellicodeFormatError(numbare.slice()); //check required\n\n      let req = mellicodeReqErroe;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setMellicodeReqErroe(req.slice());\n    }\n\n    if (type === \"Room\") {\n      nextPassenger[idx].Room = parseInt(value);\n      if (nextPassenger[idx].personType === \"adult\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Adult;\n      if (nextPassenger[idx].personType === \"child1\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Child1;\n      if (nextPassenger[idx].personType === \"child2\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Child2;\n      if (nextPassenger[idx].personType === \"infant\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Infant;\n    }\n\n    setPassengers(nextPassenger);\n  } //handle contions and rules\n\n\n  function handleConditionChange(e) {\n    setCondotion(e.target.checked);\n    setCondotionFlag(e.target.checked);\n  }\n\n  console.log(\"customer\", customer);\n  console.log(\"passengers\", passengers);\n  console.log(\"submitFkag\", submitFlag);\n  return __jsx(\"div\", {\n    className: \"info-form\"\n  }, __jsx(\"p\", {\n    className: \"desc-tag\"\n  }, __jsx(IoMdInformationCircle, null), \"\\u0644\\u0637\\u0641\\u0627 \\u0627\\u0637\\u0644\\u0627\\u0639\\u0627\\u062A \\u0632\\u06CC\\u0631 \\u0631\\u0627 \\u06A9\\u0627\\u0645\\u0644 \\u06A9\\u0646\\u06CC\\u062F :\"), __jsx(MDBCard, null, __jsx(MDBCardBody, null, __jsx(\"div\", {\n    className: \"travelers-info\"\n  }, __jsx(\"span\", null, \"\\u06CC\\u06A9\\u06CC \\u0627\\u0632 \\u0645\\u0633\\u0627\\u0641\\u0631\\u0627\\u0646 :\"), __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"a\",\n    name: \"travelers\",\n    checked: iAm,\n    onChange: onSetIamChanged\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }), __jsx(\"span\", null, \"\\u0647\\u0633\\u062A\\u0645\")), __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"travelers\",\n    value: \"b\",\n    checked: iAmnot,\n    onChange: onSetIamNotChanged\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }), __jsx(\"span\", null, \"\\u0646\\u06CC\\u0633\\u062A\\u0645\")), __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"travelers\",\n    value: \"c\",\n    checked: before,\n    onChange: onSetBeforeChanged\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }), __jsx(\"span\", null, \"\\u0642\\u0628\\u0644\\u0627 \\u062E\\u0631\\u06CC\\u062F \\u0627\\u0646\\u062C\\u0627\\u0645 \\u062F\\u0627\\u062F\\u0647 \\u0627\\u0645\"))), __jsx(Form, null, iAm ? __jsx(Row, {\n    form: true\n  }, __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_email\"\n  }, \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterEmailError || submiterEmailFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Email\"),\n    value: customer.Email,\n    type: \"email\",\n    name: \"user_email\",\n    id: \"user_email\"\n  }), submiterEmailError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterEmailFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\"))) : __jsx(React.Fragment, null, iAmnot ? __jsx(Row, {\n    form: true\n  }, __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_name\"\n  }, \"\\u0646\\u0627\\u0645 :\"), __jsx(Input, {\n    style: submiterNameError ? errorBorder : {},\n    onChange: e => handleUser(e, \"FirstName\"),\n    value: customer.FirstName,\n    type: \"text\",\n    name: \"user_name\",\n    id: \"user_name\"\n  }), submiterNameError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0646\\u0627\\u0645 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\")), __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_family\"\n  }, \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC :\"), __jsx(Input, {\n    style: submiterFamilyError ? errorBorder : {},\n    onChange: e => handleUser(e, \"LastName\"),\n    value: customer.LastName,\n    type: \"text\",\n    name: \"user_family\",\n    id: \"user_family\"\n  }), submiterFamilyError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\")), __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_mobile\"\n  }, \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterMobileError || submiterMobileFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"MobileNumber\"),\n    value: customer.MobileNumber,\n    type: \"email\",\n    name: \"user_mobile\",\n    id: \"user_mobile\"\n  }), submiterMobileError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterMobileFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\")), __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_email1\"\n  }, \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterEmailError || submiterEmailFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Email\"),\n    value: customer.Email,\n    type: \"email\",\n    name: \"user_email1\",\n    id: \"user_email1\"\n  }), submiterEmailError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterEmailFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\"))) : __jsx(Row, {\n    form: true\n  }, __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_email2\"\n  }, \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterEmailError || submiterEmailFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Email\"),\n    value: customer.Email,\n    type: \"email\",\n    name: \"user_email2\",\n    id: \"user_email2\"\n  }), submiterEmailError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterEmailFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\")), __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"MobileNumber\"\n  }, \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 :\"), __jsx(Input, {\n    className: \"mobileContract\",\n    style: contractError && mobileReqError ? errorBorder : {},\n    onChange: e => handleUser(e, \"MobileNumber\"),\n    value: customer.MobileNumber,\n    type: \"text\",\n    name: \"MobileNumber\",\n    id: \"MobileNumber\"\n  }), contractError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u06CC\\u0627 \\u0634\\u0645\\u0627\\u0631\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062F\\u0627\\u062F \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\"), __jsx(\"span\", {\n    className: \"or\"\n  }, \"\\u06CC\\u0627\")), __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"code\"\n  }, \"\\u0634\\u0645\\u0627\\u0631\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062F\\u0627\\u062F :\"), __jsx(Input, {\n    style: contractError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Code\"),\n    value: customer.Code,\n    type: \"text\",\n    name: \"code\",\n    id: \"code\"\n  }), contractError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u06CC\\u0627 \\u0634\\u0645\\u0627\\u0631\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062F\\u0627\\u062F \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\"))))), __jsx(Form, {\n    id: \"form1\"\n  }, passengers.map((person, idx) => {\n    return __jsx(\"div\", {\n      key: IDBIndex.toString()\n    }, __jsx(\"hr\", null), __jsx(\"div\", {\n      className: \"passenger-tag\"\n    }, __jsx(\"span\", null, \"\\u0645\\u0633\\u0627\\u0641\\u0631 \", numToWord(idx + 1), \" -\", \" \", personType(person.personType))), __jsx(Row, {\n      form: true\n    }, __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"FirstName\"\n    }, \"\\u0646\\u0627\\u0645 :\"), __jsx(Input, {\n      style: nameError[idx] || latinNameError[idx] ? errorBorder : {},\n      type: \"text\",\n      value: person.FirstName,\n      onChange: e => handleInputChange(e, idx, \"FirstName\"),\n      name: \"FirstName\",\n      id: \"FirstName\",\n      placeholder: \"\\u0646\\u0627\\u0645 \\u0628\\u0647 \\u0644\\u0627\\u062A\\u06CC\\u0646\"\n    }), nameError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u0646\\u0627\\u0645 \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : \"\", latinNameError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(TiSortAlphabetically, {\n      size: \"15\"\n    }), \" \\u0646\\u0627\\u0645 \\u0644\\u0627\\u062A\\u06CC\\u0646 \\u0648\\u0627\\u0631\\u062F \\u0634\\u0648\\u062F\", \" \") : \"\")), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"LastName\"\n    }, \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC :\"), __jsx(Input, {\n      style: familyError[idx] || latinFamilyError[idx] ? errorBorder : {},\n      type: \"text\",\n      value: person.LastName,\n      onChange: e => handleInputChange(e, idx, \"LastName\"),\n      name: \"LastName\",\n      id: \"LastName\",\n      placeholder: \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0628\\u0647 \\u0644\\u0627\\u062A\\u06CC\\u0646\"\n    }), familyError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : \"\", latinFamilyError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(TiSortAlphabetically, {\n      size: \"15\"\n    }), \" \\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0644\\u0627\\u062A\\u06CC\\u0646 \\u0648\\u0627\\u0631\\u062F \\u0634\\u0648\\u062F\", \" \") : \"\")), __jsx(Col, {\n      md: 2\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"Gender\"\n    }, \"\\u062C\\u0646\\u0633\\u06CC\\u062A :\"), __jsx(Input, {\n      value: person.Gender,\n      onChange: e => handleInputChange(e, idx, \"Gender\"),\n      type: \"select\",\n      name: \"Gender\",\n      id: \"Gender\",\n      placeholder: \"\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u0632\\u0646\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0645\\u0631\\u062F\")))), __jsx(Col, {\n      md: 2\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"melliCode\"\n    }, \"\\u0627\\u062A\\u0627\\u0642 :\"), __jsx(Input, {\n      value: person.Room,\n      onChange: e => handleInputChange(e, idx, \"Room\"),\n      type: \"select\",\n      name: \"Room\",\n      id: \"Room\"\n    }, roomCount.map((_, index) => {\n      return __jsx(\"option\", {\n        value: index + 1\n      }, index + 1);\n    })))), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"Nationality\"\n    }, \"\\u062A\\u0627\\u0628\\u0639\\u06CC\\u062A :\"), __jsx(Input, {\n      value: person.NationalityCode,\n      onChange: e => handleInputChange(e, idx, \"Nationality\"),\n      type: \"select\",\n      name: \"Nationality\",\n      id: \"Nationality\",\n      placeholder: \"\"\n    }, Countries.map(cnt => {\n      return __jsx(\"option\", {\n        key: cnt.code.toString(),\n        value: cnt.code\n      }, cnt.name);\n    })))), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"CellPhoneNumber\"\n    }, \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 :\"), __jsx(Input, {\n      style: mobileReqError[idx] || mobileFormatError[idx] ? errorBorder : {},\n      value: person.CellPhoneNumber,\n      onChange: e => handleInputChange(e, idx, \"CellPhoneNumber\"),\n      type: \"text\",\n      name: \"CellPhoneNumber\",\n      id: \"CellPhoneNumber\",\n      placeholder: \"\"\n    }), mobileReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", mobileFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u0641\\u0631\\u0645\\u062A \\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\")), __jsx(Col, {\n      md: 4\n    }, __jsx(Label, {\n      for: \"BirthDate\"\n    }, \"\\u062A\\u0627\\u0631\\u06CC\\u062E \\u062A\\u0648\\u0644\\u062F :\"), __jsx(Row, {\n      className: \"px-3 BirthDate\"\n    }, __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      style: bDayReqError[idx] || bDayFormatError[idx] ? errorBorder : {},\n      value: person.bDay,\n      onChange: e => handleInputChange(e, idx, \"bDay\"),\n      type: \"text\",\n      name: \"bDay\",\n      id: \"bDay\",\n      placeholder: \"\\u0631\\u0648\\u0632\"\n    }), bDayReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u0631\\u0648\\u0632 \\u062A\\u0648\\u0644\\u062F \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC \\u0627\\u0633\\u062A\") : bDayFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u062E\\u0627\\u0631\\u062C \\u0627\\u0632 \\u0645\\u062D\\u062F\\u0648\\u062F\\u0647 31 \\u0631\\u0648\\u0632\") : \"\"), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      style: bMonReqError[idx] || bMonFormatError[idx] ? errorBorder : {},\n      value: person.bMonth,\n      onChange: e => handleInputChange(e, idx, \"bMonth\"),\n      type: \"text\",\n      name: \"bMonth\",\n      id: \"bMonth\",\n      placeholder: \"\\u0645\\u0627\\u0647\"\n    }), bMonReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u0645\\u0627\\u0647 \\u062A\\u0648\\u0644\\u062F \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC \\u0627\\u0633\\u062A\") : bMonFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u062E\\u0627\\u0631\\u062C \\u0627\\u0632 \\u0645\\u062D\\u062F\\u0648\\u062F\\u0647 12 \\u0645\\u0627\\u0647\") : \"\"), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      style: bYearReqError[idx] ? errorBorder : {},\n      value: person.bYear,\n      onChange: e => handleInputChange(e, idx, \"bYear\"),\n      type: \"text\",\n      name: \"bYear\",\n      id: \"bYear\",\n      placeholder: \"\\u0633\\u0627\\u0644\"\n    }), bYearReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u0633\\u0627\\u0644 \\u062A\\u0648\\u0644\\u062F \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC \\u0627\\u0633\\u062A\") : \"\"), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.birthType,\n      onChange: e => handleInputChange(e, idx, \"birthType\"),\n      type: \"select\",\n      name: \"birthType\",\n      id: \"birthType\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u0634\\u0645\\u0633\\u06CC\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0645\\u06CC\\u0644\\u0627\\u062F\\u06CC\"))))), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"CardType\"\n    }, \"\\u062B\\u0628\\u062A \\u0628\\u0627 :\"), __jsx(Input, {\n      value: person.cardType,\n      onChange: e => handleInputChange(e, idx, \"cardType\"),\n      type: \"select\",\n      name: \"cardType\",\n      id: \"submit_with\",\n      placeholder: \"\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u06A9\\u062F \\u0645\\u0644\\u06CC\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0634\\u0645\\u0627\\u0631\\u0647 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A\")))), person.cardType ? __jsx(React.Fragment, null, __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"PassportNo\"\n    }, \"\\u0634\\u0645\\u0627\\u0631\\u0647 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A :\"), __jsx(Input, {\n      style: passportReqErroe[idx] ? errorBorder : {},\n      value: person.PassportNo,\n      onChange: e => handleInputChange(e, idx, \"PassportNo\"),\n      type: \"text\",\n      name: \"PassportNo\",\n      id: \"PassportNo\",\n      placeholder: \"\"\n    }), passportReqErroe[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u0634\\u0645\\u0627\\u0631\\u0647 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : \"\")), __jsx(Col, {\n      md: 4\n    }, __jsx(Label, {\n      for: \"PassportExpirationDate\"\n    }, \"\\u0627\\u0646\\u0642\\u0636\\u0627\\u0621 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A :\"), __jsx(Row, {\n      className: \"px-3 PassportExpirationDate\"\n    }, __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.pDay,\n      onChange: e => handleInputChange(e, idx, \"pDay\"),\n      type: \"text\",\n      name: \"pDay\",\n      id: \"pDay\",\n      placeholder: \"\\u0631\\u0648\\u0632\"\n    })), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.pMonth,\n      onChange: e => handleInputChange(e, idx, \"pMonth\"),\n      type: \"text\",\n      name: \"pMonth\",\n      id: \"pMonth\",\n      placeholder: \"\\u0645\\u0627\\u0647\"\n    })), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.pYear,\n      onChange: e => handleInputChange(e, idx, \"pYear\"),\n      type: \"text\",\n      name: \"pYear\",\n      id: \"pYear\",\n      placeholder: \"\\u0633\\u0627\\u0644\"\n    })), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.passExType,\n      onChange: e => handleInputChange(e, idx, \"passExType\"),\n      type: \"select\",\n      name: \"passExType\",\n      id: \"passExType\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u0645\\u06CC\\u0644\\u0627\\u062F\\u06CC\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0634\\u0645\\u0633\\u06CC\")))))) : __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"melliCode\"\n    }, \"\\u06A9\\u062F \\u0645\\u0644\\u06CC :\"), __jsx(Input, {\n      style: mellicodeReqErroe[idx] || mellicodeFormatError[idx] || mellicodeLengthError[idx] ? errorBorder : {},\n      value: person.melliCode,\n      onChange: e => handleInputChange(e, idx, \"melliCode\"),\n      type: \"text\",\n      name: \"melliCode\",\n      id: \"melliCode\",\n      placeholder: \"\"\n    }), mellicodeReqErroe[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u06A9\\u062F \\u0645\\u0644\\u06CC \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : mellicodeFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u0641\\u0642\\u0637 \\u0648\\u0631\\u0648\\u062F \\u0639\\u062F\\u062F \\u0645\\u062C\\u0627\\u0632 \\u0627\\u0633\\u062A \\u0634\\u0648\\u062F\", \" \") : mellicodeLengthError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u062A\\u0639\\u062F\\u0627\\u062F \\u0627\\u0631\\u0642\\u0627\\u0645 \\u06A9\\u0645\\u062A\\u0631 \\u0627\\u0632 10 \\u0645\\u06CC \\u0628\\u0627\\u0634\\u062F\", \" \") : \"\"))), __jsx(Row, null));\n  })), __jsx(\"hr\", null), __jsx(\"div\", {\n    className: \"rule-accept\"\n  }, __jsx(\"p\", null, __jsx(IoMdInformationCircle, null), __jsx(\"span\", {\n    className: \"title\"\n  }, \"\\u0642\\u0648\\u0627\\u0646\\u06CC\\u0646 \\u0648 \\u0645\\u0642\\u0631\\u0631\\u0627\\u062A :\")), __jsx(\"label\", {\n    className: \"container\"\n  }, __jsx(\"span\", null, \"\\u0634\\u0631\\u0627\\u06CC\\u0637 \\u0648 \\u0642\\u0648\\u0627\\u0646\\u06CC\\u0646\"), \"\\u0631\\u0627 \\u0645\\u0637\\u0627\\u0644\\u0639\\u0647 \\u06A9\\u0631\\u062F\\u0647 \\u0648 \\u0628\\u0627 \\u06A9\\u0644\\u06CC\\u0647 \\u0645\\u0648\\u0627\\u0631\\u062F \\u0645\\u0648\\u0627\\u0641\\u0642\\u0645.\", __jsx(\"input\", {\n    type: \"checkbox\",\n    checked: condotion,\n    onChange: handleConditionChange\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }))), __jsx(\"hr\", null), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"passenger-tag\"\n  }, __jsx(\"span\", null, \"\\u0627\\u0646\\u062A\\u062E\\u0627\\u0628 \\u062F\\u0631\\u06AF\\u0627\\u0647 \\u067E\\u0631\\u062F\\u0627\\u062E\\u062A\")), __jsx(\"div\", {\n    className: \"bank-pose\"\n  }, __jsx(\"label\", {\n    className: \"container\"\n  }, __jsx(\"img\", {\n    src: require(\"../../img/mellat.png\")\n  }), __jsx(\"input\", {\n    type: \"radio\",\n    checked: \"checked\",\n    name: \"radio\"\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  })))), __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"passenger-tag\"\n  }, __jsx(\"span\", null, \"\\u0642\\u06CC\\u0645\\u062A \\u0646\\u0647\\u0627\\u06CC\\u06CC\")), __jsx(\"div\", {\n    className: \"last-price\"\n  }, __jsx(\"div\", null, __jsx(\"span\", {\n    className: \"label\"\n  }, \"\\u062C\\u0645\\u0639 \\u06A9\\u0644 \\u0642\\u06CC\\u0645\\u062A :\"), __jsx(\"span\", null, HotelPriceFormat(paymentObj[0].TotalPrice), \"\\u0631\\u06CC\\u0627\\u0644\")), __jsx(\"div\", null, __jsx(\"span\", {\n    className: \"label\"\n  }, \"\\u0645\\u0628\\u0644\\u063A \\u0642\\u0627\\u0628\\u0644 \\u067E\\u0631\\u062F\\u0627\\u062E\\u062A :\"), __jsx(\"span\", null, HotelPriceFormat(paymentObj[0].TotalPrice), \"\\u0631\\u06CC\\u0627\\u0644\")), __jsx(\"hr\", null)), __jsx(\"div\", {\n    className: \"off-code\"\n  }, __jsx(\"span\", null, \"\\u06A9\\u062F \\u062A\\u062E\\u0641\\u06CC\\u0641 :\"), __jsx(InputGroup, {\n    size: \"sm\"\n  }, __jsx(Input, null)), __jsx(\"button\", {\n    className: \"btn\"\n  }, \"\\u0627\\u0639\\u0645\\u0627\\u0644\"))), __jsx(\"div\", {\n    className: \"col-md-12\"\n  }, __jsx(\"div\", {\n    className: \"pay-btns\"\n  }, __jsx(\"button\", {\n    form: \"form1\",\n    onClick: handleForm,\n    className: \"btn green-btn\",\n    disabled: !submitFlag && !condotionFlag\n  }, \"\\u067E\\u0631\\u062F\\u0627\\u062E\\u062A\"), __jsx(\"button\", {\n    className: \"btn\"\n  }, \"\\u0627\\u0646\\u0635\\u0631\\u0627\\u0641\")))))));\n};\n\nconst mapStateToProps = state => {\n  const paymentObj = state.paymenObject.paymentObj;\n  return {\n    paymentObj\n  };\n};\n\nexport default connect(mapStateToProps)(InfoForm);","map":null,"metadata":{},"sourceType":"module"}