{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { STARS, RATES, PRICE, CO } from './type';\nconst initialstate = {\n  stars: 0,\n  rates: [],\n  preis: [],\n  airlines: []\n};\n\nconst reducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case STARS:\n      return _objectSpread({}, state, {\n        stars: action.payload\n      });\n\n    case RATES:\n      return _objectSpread({}, state, {\n        rates: action.value\n      });\n\n    case PRICE:\n      return _objectSpread({}, state, {\n        preis: action.value\n      });\n\n    case CO:\n      return _objectSpread({}, state, {\n        airlines: action.value\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Hope/Desktop/KiteSearchEngine/redux/tourFilters/reducer.js"],"names":["STARS","RATES","PRICE","CO","initialstate","stars","rates","preis","airlines","reducer","state","action","type","payload","value"],"mappings":";;;;;;AAAA,SAAQA,KAAR,EAAgBC,KAAhB,EAAwBC,KAAxB,EAAgCC,EAAhC,QAAyC,QAAzC;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,KAAL;AACE,+BAAYU,KAAZ;AAAmBL,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAAjC;;AACF,SAAKZ,KAAL;AACE,+BAAYS,KAAZ;AAAmBJ,QAAAA,KAAK,EAAEK,MAAM,CAACG;AAAjC;;AACF,SAAKZ,KAAL;AACE,+BAAYQ,KAAZ;AAAmBH,QAAAA,KAAK,EAAEI,MAAM,CAACG;AAAjC;;AACF,SAAKX,EAAL;AACE,+BAAYO,KAAZ;AAAmBF,QAAAA,QAAQ,EAAEG,MAAM,CAACG;AAApC;;AAEF;AACE,aAAOJ,KAAP;AAXJ;AAaD,CAdD;;AAeA,eAAeD,OAAf","sourcesContent":["import {STARS , RATES , PRICE , CO} from './type'\r\n\r\n\r\nconst initialstate = {\r\n  stars: 0,\r\n  rates: [],\r\n  preis: [],\r\n  airlines: []\r\n};\r\n\r\nconst reducer = (state = initialstate, action) => {\r\n  switch (action.type) {\r\n    case STARS:\r\n      return { ...state, stars: action.payload };\r\n    case RATES:\r\n      return { ...state, rates: action.value };\r\n    case PRICE:\r\n      return { ...state, preis: action.value };\r\n    case CO:\r\n      return { ...state, airlines: action.value };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}