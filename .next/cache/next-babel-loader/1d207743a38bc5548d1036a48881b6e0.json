{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch'; //imports\n\nimport { loadCitySuccess, failure } from './action';\nimport { actionTypes } from './type';\nimport ports from '../../ports';\nes6promise.polyfill(); //CITY worker\n\nfunction* loadCitySaga() {\n  try {\n    const res = yield fetch(`${ports.domain}${ports.cityList}`);\n    const data = yield res.json(); //console.log(\"cities\" , data)\n\n    data.sort(a => a.CountryAbbrevation === \"IR\" ? -1 : 1);\n    yield put(loadCitySuccess(data));\n  } catch (err) {\n    yield put(failure(err));\n  }\n} //CITY watcher\n\n\nfunction* loadCityWatcher() {\n  yield takeLatest(actionTypes.LOAD_CITY, loadCitySaga);\n}\n\nexport default loadCityWatcher;","map":null,"metadata":{},"sourceType":"module"}