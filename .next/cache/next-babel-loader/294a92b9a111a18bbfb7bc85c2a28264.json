{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { actionTypes } from './type';\nexport const exampleInitialState = {\n  rooms: 1,\n  adultArray: [2],\n  childArray: [0],\n  total: 2,\n  child1Count: 0,\n  child2Count: 0,\n  infantCount: 0,\n  selValues: [{\n    id: 0,\n    adult: 2,\n    age: []\n  }],\n  roomRules: \"\"\n};\n\nfunction reducer(state = exampleInitialState, action) {\n  switch (action.type) {\n    case actionTypes.SET_ROOMS:\n      return _objectSpread({}, state, {\n        rooms: action.payload\n      });\n\n    case actionTypes.SET_TOTAL:\n      return _objectSpread({}, state, {\n        total: action.payload\n      });\n\n    case actionTypes.SET_SELVALUES:\n      return _objectSpread({}, state, {\n        selValues: action.payload\n      });\n\n    case actionTypes.SET_ADULT_ARRAY:\n      return _objectSpread({}, state, {\n        adultArray: action.payload\n      });\n\n    case actionTypes.SET_CHILD_ARRAY:\n      return _objectSpread({}, state, {\n        childArray: action.payload\n      });\n\n    case actionTypes.SET_INFANTCOUNT:\n      return _objectSpread({}, state, {\n        infantCount: action.payload\n      });\n\n    case actionTypes.SET_CHILD1COUNT:\n      return _objectSpread({}, state, {\n        child1Count: action.payload\n      });\n\n    case actionTypes.SET_CHILD2COUNT:\n      return _objectSpread({}, state, {\n        child2Count: action.payload\n      });\n\n    case actionTypes.SET_ROOMRULES:\n      return _objectSpread({}, state, {\n        roomRules: action.payload\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}