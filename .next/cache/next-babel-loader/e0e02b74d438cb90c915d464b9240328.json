{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport es6promise from \"es6-promise\";\nimport \"isomorphic-unfetch\"; //imports\n\nimport { searchTourSuccess, failure } from \"./action\";\nimport { actionTypes } from \"./type\";\nimport ports from \"../../ports\";\nes6promise.polyfill();\n\nfunction* searchTourSaga(action) {\n  const body = JSON.stringify(action.data);\n  let counter = 0;\n  let CorrectTour = [];\n\n  try {\n    const res = yield fetch(`${ports.domain}${ports.getPackages}?filter=${body}`);\n    const data = yield res.json();\n    console.log(\" search Results\", data);\n\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].hasOwnProperty(\"PackageRow\") && data[i].PackageRow.length > 0 && data[i].hasOwnProperty(\"Flight\") && data[i].Flight.length > 0) {\n        counter++;\n        CorrectTour.push(data[i]);\n      }\n    }\n\n    console.log(\"correct packages\", counter);\n\n    if (counter > 0) {\n      yield put(searchTourSuccess(CorrectTour));\n    } else {\n      yield put(failure(\"No Correct Package Found\"));\n    }\n  } catch (err) {\n    yield put(failure(err));\n  }\n}\n\nfunction* loadCityWatcher() {\n  yield takeLatest(actionTypes.LOAD_SEARCH_TOUR, searchTourSaga);\n}\n\nexport default loadCityWatcher;","map":null,"metadata":{},"sourceType":"module"}