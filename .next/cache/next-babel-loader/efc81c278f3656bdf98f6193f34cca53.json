{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\"; //redux\n\nimport { connect } from \"react-redux\"; //UI Libraries\n\nimport { MDBCard, MDBCardBody } from \"mdbreact\";\nimport { IoIosWarning, IoMdInformationCircle } from \"react-icons/io\";\nimport { TiSortAlphabetically } from \"react-icons/ti\";\nimport { Col, Row, Form, FormGroup, Label, InputGroup, Input } from \"reactstrap\"; //components\n\nimport Countries from \"../../Countries\"; //axios\n\nimport axios from \"axios\";\nimport Ports from \"../../ports\"; //utilities\n\nimport { numToWord, personType, latinOrPersianValidate, requiredInput, validateEmail, just_persian, isRealValue, mobileFormatInputValidate, mobile_format, checkLimits, isNumber, mellicode_format } from \"../../Functions\";\nimport NumberFormat from \"react-number-format\";\nimport moment from \"moment-jalaali\";\nimport { FaRegFlag } from \"react-icons/fa\";\n\nconst InfoForm = props => {\n  const {\n    0: iAm,\n    1: setIAm\n  } = useState(true);\n  const {\n    0: iAmnot,\n    1: setIAmnot\n  } = useState(false);\n  const {\n    0: before,\n    1: setBefore\n  } = useState(false);\n  const {\n    0: condotion,\n    1: setCondotion\n  } = useState(false);\n  const {\n    0: condotionFlag,\n    1: setCondotionFlag\n  } = useState(false);\n  const {\n    0: submitFlag,\n    1: setSubmitFlag\n  } = useState(false);\n  const {\n    0: customerFlag,\n    1: setcustomerFlag\n  } = useState(true);\n  const {\n    paymentObj\n  } = props;\n  const {\n    0: formAdult,\n    1: setFormAdult\n  } = useState(new Array(Math.abs(paymentObj[0].Adult)).fill(0).map((value, i) => value = {\n    personType: \"adult\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"ساسان\",\n    // PersianLastName: \"کریمی\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 0,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Adult,\n    PackageFlightId: paymentObj[0].FlightID,\n    Insurance: paymentObj[0].Insurance,\n    InsuranceId: paymentObj[0].InsuranceId,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId,\n    //i dont know about type and value of Services data.(just for exist for Api)\n    Services: paymentObj[0].Services\n  }));\n  const {\n    0: formChild1,\n    1: setFormChild1\n  } = useState(new Array(Math.abs(paymentObj[0].Child1)).fill(0).map((value, i) => value = {\n    personType: \"child1\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"\",\n    // PersianLastName: \"\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 1,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Child1,\n    PackageFlightId: paymentObj[0].FlightID,\n    Insurance: paymentObj[0].Insurance,\n    InsuranceId: paymentObj[0].InsuranceId,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId,\n    //i dont know about type and value of Services data.(just for exist for Api)\n    Services: paymentObj[0].Services\n  }));\n  const {\n    0: formChild2,\n    1: setFormChild2\n  } = useState(new Array(Math.abs(paymentObj[0].Child2)).fill(0).map((value, i) => value = {\n    personType: \"child2\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"\",\n    // PersianLastName: \"\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 2,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Child2,\n    PackageFlightId: paymentObj[0].FlightID,\n    Insurance: paymentObj[0].Insurance,\n    InsuranceId: paymentObj[0].InsuranceId,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId\n  }));\n  const {\n    0: formInfant,\n    1: setFormInfant\n  } = useState(new Array(Math.abs(paymentObj[0].Infant)).fill(0).map((value, i) => value = {\n    personType: \"infant\",\n    FirstName: \"\",\n    LastName: \"\",\n    // PersianFirstName: \"\",\n    // PersianLastName: \"\",\n    CellPhoneNumber: \"\",\n    Gender: 1,\n    AgeRange: 3,\n    Nationality: \"IRAN\",\n    NationalityCode: \"IR\",\n    BirthDate: \"\",\n    birthType: 0,\n    bDay: \"\",\n    bMonth: \"\",\n    bYear: \"\",\n    cardType: 0,\n    PassportNo: \"\",\n    PassportExpirationDate: \"\",\n    passExType: 1,\n    pDay: \"\",\n    pMonth: \"\",\n    pYear: \"\",\n    melliCode: \"\",\n    Type: \"Package\",\n    Room: 1,\n    Price: paymentObj[0].RoomPrices[0].Infant,\n    PackageFlightId: paymentObj[0].FlightID,\n    InsuranceId: paymentObj[0].InsuranceId,\n    Insurance: paymentObj[0].Insurance,\n    //default insurance price is adult\n    InsurancePrice: paymentObj[0].InsuranceAdultPrice,\n    Visa: paymentObj[0].Visa,\n    VisaPrice: paymentObj[0].VisaPrice,\n    VisaID: paymentObj[0].VisaId\n  }));\n  const errorBorder = {\n    border: \"1px solid red\"\n  };\n  const allPassengers = formAdult.concat(formChild1, formChild2, formInfant);\n  const {\n    0: passengers,\n    1: setPassengers\n  } = useState(allPassengers);\n  const {\n    0: customer,\n    1: setCustomer\n  } = useState({\n    CustomerId: \"\",\n    FirstName: \"\",\n    LastName: \"\",\n    Email: \"\",\n    MobileNumber: \"\",\n    From: \"Site\",\n    Code: \"\"\n  }); //errors of passengers\n\n  const {\n    0: nameError,\n    1: setNameError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: latinNameError,\n    1: setLatinNameError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: familyError,\n    1: setFamilyError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: latinFamilyError,\n    1: setLatinFamilyError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mobileFormatError,\n    1: setMobileFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mobileReqError,\n    1: setMobileReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bDayReqError,\n    1: setBDayReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bDayFormatError,\n    1: setBDayFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bMonReqError,\n    1: setBMonReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bMonFormatError,\n    1: setBMonFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: bYearReqError,\n    1: setBYearReqError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mellicodeReqErroe,\n    1: setMellicodeReqErroe\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mellicodeFormatError,\n    1: setMellicodeFormatError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: mellicodeLengthError,\n    1: setMellicodeLengthError\n  } = useState(new Array(allPassengers.length).fill(false));\n  const {\n    0: passportReqErroe,\n    1: setPassportReqErroe\n  } = useState(new Array(allPassengers.length).fill(false)); //erros of customer\n\n  const {\n    0: submiterEmailError,\n    1: setSubmiterEmailError\n  } = useState(false);\n  const {\n    0: submiterEmailFormatError,\n    1: setSubmiterEmailFormatError\n  } = useState(false);\n  const {\n    0: submiterNameError,\n    1: setSubmiterNameError\n  } = useState(false);\n  const {\n    0: submiterFamilyError,\n    1: setSubmiterFamilyError\n  } = useState(false);\n  const {\n    0: submiterMobileError,\n    1: setSubmiterMobileError\n  } = useState(false);\n  const {\n    0: submiterMobileFormatError,\n    1: setSubmiterMobileFormatError\n  } = useState(false);\n  const {\n    0: contractError,\n    1: setContractError\n  } = useState(false);\n  const {\n    0: customerType,\n    1: setCustomerType\n  } = useState(0);\n  const roomCount = props.searchParams.roomRules.split(\",\"); //one of passengers\n\n  function onSetIamChanged() {\n    setIAmnot(false);\n    setBefore(false);\n    setIAm(true);\n    setCustomerType(0);\n  } //not one of passengers\n\n\n  function onSetIamNotChanged() {\n    setIAm(false);\n    setBefore(false);\n    setIAmnot(true);\n    setCustomerType(1);\n  } //old customer\n\n\n  function onSetBeforeChanged() {\n    setIAm(false);\n    setIAmnot(false);\n    setBefore(true);\n    setCustomerType(2);\n  } //Utility\n\n\n  function HotelPriceFormat(num) {\n    return __jsx(NumberFormat, {\n      value: num,\n      displayType: \"text\",\n      thousandSeparator: true,\n      renderText: num => __jsx(\"div\", null, num)\n    });\n  } //handel customer and passenger forms\n\n\n  async function handleForm(e) {\n    e.preventDefault(); //submitter (customer) Validation\n    //email validatiom\n\n    let emailFlag = isRealValue(customer.Email) ? false : true;\n    setSubmiterEmailError(emailFlag);\n    let emailFormatFlag = false; //first check required and when email has value then chack email format\n\n    if (!emailFlag) {\n      emailFormatFlag = validateEmail(customer.Email) ? false : true;\n      setSubmiterEmailFormatError(emailFormatFlag);\n    }\n\n    if (emailFormatFlag || emailFlag) setSubmitFlag(false); //name and familyl and mobile\n\n    if (customerType === 1) {\n      let submiterNameFlag = isRealValue(customer.FirstName) ? false : true;\n      setSubmiterNameError(submiterNameFlag);\n      let submiterFamilyFlag = isRealValue(customer.LastName) ? false : true;\n      setSubmiterFamilyError(submiterFamilyFlag);\n      let submiterMobileFlag = isRealValue(customer.MobileNumber) ? false : true;\n      setSubmiterMobileError(submiterMobileFlag);\n      let mobileFormatFlag = false;\n\n      if (!submiterMobileFlag) {\n        mobileFormatFlag = mobile_format(customer.MobileNumber) ? false : true;\n        setSubmiterMobileFormatError(mobileFormatFlag);\n      }\n\n      if (submiterNameFlag || submiterFamilyFlag || submiterMobileFlag) setSubmitFlag(false);\n    } //mobile or contract\n\n\n    if (customerType === 2) {\n      if (isRealValue(customer.MobileNumber) || isRealValue(customer.Code)) {\n        if (isRealValue(customer.MobileNumber)) {\n          if (!mobile_format(customer.MobileNumber)) {\n            setContractError(true);\n            setSubmitFlag(false);\n          }\n\n          setContractError(false);\n        } else setContractError(false);\n      } else {\n        setContractError(true);\n        setSubmitFlag(false);\n      }\n    }\n    /* passengers Validations  */\n    //name required validate\n\n\n    let nameErrorTemp = nameError;\n    var nameValidate = requiredInput(passengers, nameErrorTemp, \"FirstName\");\n    setNameError(nameValidate[0].slice());\n    if (!nameValidate[1]) setSubmitFlag(false); //name latin validate\n\n    let latinNameErrorTemp = latinNameError;\n    var nameLatinValidate = latinOrPersianValidate(passengers, latinNameErrorTemp, \"FirstName\", 0);\n    setLatinNameError(nameLatinValidate[0].slice());\n    if (!nameLatinValidate[1]) setSubmitFlag(false); //family required validate\n\n    let familyErrorTemp = familyError;\n    var familyValidate = requiredInput(passengers, familyErrorTemp, \"LastName\");\n    setFamilyError(familyValidate[0].slice());\n    if (!familyValidate[1]) setSubmitFlag(false); //family latin validate\n\n    let latinFamilyErrorTemp = latinFamilyError;\n    var familyLatinValidate = latinOrPersianValidate(passengers, latinFamilyErrorTemp, \"LastName\", 0);\n    setLatinFamilyError(familyLatinValidate[0].slice());\n    if (!familyLatinValidate[1]) setSubmitFlag(false); //room choose validation\n\n    var roomFlag = true;\n\n    for (var i = 0; i < roomCount.length; i++) {\n      let eachRoom = [];\n      eachRoom = passengers.filter(item => item.Room === i + 1);\n      let sumAdult = 0;\n      let sumChild1 = 0;\n      let sumChild2 = 0;\n      let sumInfant = 0;\n\n      for (var j = 0; j < eachRoom.length; j++) {\n        if (eachRoom[j].personType === \"adult\") sumAdult++;\n        if (eachRoom[j].personType === \"child1\") sumChild1++;\n        if (eachRoom[j].personType === \"child2\") sumChild2++;\n        if (eachRoom[j].personType === \"infant\") sumInfant++;\n      }\n\n      if (parseInt(sumAdult) > parseInt(roomCount[i].charAt(0))) {\n        alert(`تعداد بزرگسال اتاق  ${numToWord(i + 1)} بیشتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumAdult) < parseInt(roomCount[i].charAt(0))) {\n        alert(` تعداد بزرگسال اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumChild1) + parseInt(sumChild2) < parseInt(roomCount[i].charAt(1)) + parseInt(roomCount[i].charAt(2))) {\n        alert(`تعداد کودک اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumChild1) + parseInt(sumChild2) > parseInt(roomCount[i].charAt(1)) + parseInt(roomCount[i].charAt(2))) {\n        alert(`تعداد کودک اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumInfant) < parseInt(roomCount[i].charAt(3))) {\n        alert(`تعداد نوزاد اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      } else if (parseInt(sumInfant) > parseInt(roomCount[i].charAt(3))) {\n        alert(`تعداد نوزاد اتاق  ${numToWord(i + 1)} بیشتر از مقدار تعیین شده است `);\n        roomFlag = false;\n      }\n\n      if (!roomFlag) {\n        setSubmitFlag(false);\n        break;\n      }\n    } //end of room validation\n    //mobile required validate\n\n\n    let mobileReqErrorTemp = mobileReqError;\n    var CellPhoneNumberValidate = requiredInput(passengers, mobileReqErrorTemp, \"CellPhoneNumber\");\n    setMobileReqError(CellPhoneNumberValidate[0].slice());\n    if (!CellPhoneNumberValidate[1]) setSubmitFlag(false); //mobile format validate\n\n    let mobileFormatErrorTemp = mobileFormatError;\n    var mobileFormatValidate = mobileFormatInputValidate(passengers, mobileFormatErrorTemp, \"CellPhoneNumber\", 1);\n    setMobileFormatError(mobileFormatValidate[0].slice());\n    if (!mobileFormatValidate[1]) setSubmitFlag(false); //birthday required validate (Day)\n\n    let bDayReqErrorTemp = bDayReqError;\n    var bDayValidate = requiredInput(passengers, bDayReqErrorTemp, \"bDay\");\n    setBDayReqError(bDayValidate[0].slice());\n    if (!bDayValidate[1]) setSubmitFlag(false); //birthday format validate (Day)\n\n    let bDayFormatErrorTemp = bDayFormatError;\n    var bDayFormatValidate = checkLimits(passengers, bDayFormatErrorTemp, \"bDay\", \"DAY\");\n    setBDayFormatError(bDayFormatValidate[0].slice());\n    if (!bDayFormatValidate[1]) setSubmitFlag(false); //birthday required validate (Month)\n\n    let bMonReqErrorTemp = bMonReqError;\n    var bMonValidate = requiredInput(passengers, bMonReqErrorTemp, \"bMonth\");\n    setBMonReqError(bMonValidate[0].slice());\n    if (!bMonValidate[1]) setSubmitFlag(false); //birthday format validate (Month)\n\n    let bMonFormatErrorTemp = bMonFormatError;\n    var bMonFormatValidate = checkLimits(passengers, bMonFormatErrorTemp, \"bMonth\", \"Month\");\n    setBMonFormatError(bMonFormatValidate[0].slice());\n    if (!bMonFormatValidate[1]) setSubmitFlag(false); //birthday required validate (Year)\n\n    let bYearReqErrorTemp = bYearReqError;\n    var bYearValidate = requiredInput(passengers, bYearReqErrorTemp, \"bYear\");\n    setBYearReqError(bYearValidate[0].slice());\n    if (!bYearValidate[1]) setSubmitFlag(false); //birthday age validate\n\n    passengers.map((people, index) => {\n      let birthday = \"\";\n      let ageFlag = true;\n\n      if (people.birthType === 0) {\n        birthday = moment(people.BirthDate, \"jYYYY/jMM/jDD\").format(\"YYYY/MM/DD\");\n      } else {\n        birthday = people.BirthDate;\n      }\n\n      let age = moment().diff(birthday, \"years\");\n\n      if (people.personType === \"adult\") {\n        if (age < 12) {\n          ageFlag = false;\n          alert(`تاریخ تولد بزگسال ${numToWord(index + 1)} صحیح وارد نشده است! `);\n        } else {\n          if (age > 65) {\n            people.InsurancePrice = paymentObj[0].InsuranceOldPrice;\n          }\n        }\n      } else if (people.personType === \"child1\" || people.personType === \"child2\") {\n        if (age > 12 || age < 2) {\n          ageFlag = false;\n          alert(`تاریخ تولد کودک ${numToWord(index + 1)} صحیح وارد نشده است! `);\n        }\n      } else {\n        if (age > 2) {\n          ageFlag = false;\n          alert(`تاریخ تولد نوزاد ${numToWord(index + 1)} صحیح وارد نشده است! `);\n        }\n      }\n\n      if (!ageFlag) {\n        setSubmitFlag(false);\n      }\n    }); //mellicode and passport Require validate\n\n    passengers.map((people, i) => {\n      if (people.cardType === 0) {\n        //length validation\n        let mellicodeReqErroeTemp = mellicodeLengthError;\n        let mellicodeValidate = mellicode_format(people.melliCode) ? false : true;\n        if (mellicodeValidate) setSubmitFlag(false);\n        mellicodeReqErroeTemp[i] = mellicodeValidate;\n        setMellicodeLengthError(mellicodeReqErroeTemp.slice()); //required validate\n\n        let req = mellicodeReqErroe;\n        let reqFlag = isRealValue(people.melliCode) ? false : true;\n        if (reqFlag) setSubmitFlag(false);\n        req[i] = reqFlag;\n        setMellicodeReqErroe(req.slice());\n      } else {\n        //required validate\n        let req = passportReqErroe;\n        let reqFlag = isRealValue(people.PassportNo) ? false : true;\n        if (reqFlag) setSubmitFlag(false);\n        req[i] = reqFlag;\n        setPassportReqErroe(req.slice());\n      }\n    }); //     //before any request check submitFlag until here\n\n    if (!submitFlag) {\n      return false;\n    } //     //get customer data\n    //     let customerTemp = customer;\n    //     //flag check for submit again by user and prevent for double insert\n    //     if (customerFlag) {\n    //       if (customerType === 0 || customerType === 1) {\n    //         let title = \"\";\n    //         let password = \"\";\n    //         if (customerType === 0) {\n    //           title = passengers[0].FirstName + \" \" + passengers[0].LastName;\n    //           password = passengers[0].CellPhoneNumber;\n    //         }\n    //         if (customerType === 1) {\n    //           title = customer.FirstName + \" \" + customer.LastName;\n    //           password = customer.MobileNumber;\n    //         }\n    //         if (isRealValue(title) && isRealValue(password)) {\n    //           await axios\n    //             .get(`${Ports.domain}${Ports.userRegister}`, {\n    //               params: {\n    //                 title: title,\n    //                 username: customer.Email,\n    //                 password: password\n    //               }\n    //             })\n    //             .then(function(response) {\n    //               console.log(response);\n    //               switch (response.status) {\n    //                 case 200:\n    //                   return response.data;\n    //                 default:\n    //                   return false;\n    //               }\n    //             })\n    //             .catch(function(error) {\n    //               console.log(\"error \", error);\n    //               alert(\"ایمیل کاربر ثبت کننده تکراری است\");\n    //               setSubmitFlag(false);\n    //             })\n    //             .then(data => {\n    //               if (data === \"\") {\n    //                 alert(\"ok\");\n    //                 if (customerType === 0) {\n    //                   customerTemp.FirstName = passengers[0].FirstName;\n    //                   customerTemp.LastName = passengers[0].LastName;\n    //                   customerTemp.MobileNumber = passengers[0].CellPhoneNumber;\n    //                 }\n    //                 setCustomer(customerTemp);\n    //                 setcustomerFlag(false);\n    //                 console.log(\"custumer\", customerTemp);\n    //               }\n    //             });\n    //         }\n    //       }\n    //       if (customerType === 2) {\n    //         if (\n    //           isRealValue(customer.Email) &&\n    //           (isRealValue(customer.Code) || isRealValue(customer.MobileNumber))\n    //         ) {\n    //           let loginType =\n    //             isRealValue(customer.MobileNumber) &&\n    //             mobile_format(customer.MobileNumber)\n    //               ? \"Account\"\n    //               : \"Contract\";\n    //           let password =\n    //             isRealValue(customer.MobileNumber) &&\n    //             mobile_format(customer.MobileNumber)\n    //               ? customer.MobileNumber\n    //               : customer.Code;\n    //           let username = customer.Email;\n    //           let formBody = new FormData();\n    //           formBody.append(\"username\", username);\n    //           formBody.append(\"password\", password);\n    //           formBody.append(\"logintype\", loginType);\n    //           await axios\n    //             .post(`${Ports.domain}${Ports.userLogin}`, formBody)\n    //             .then(function(response) {\n    //               console.log(response);\n    //               switch (response.status) {\n    //                 case 200:\n    //                   return response.data;\n    //                 default:\n    //                   return false;\n    //               }\n    //             })\n    //             .catch(function(error) {\n    //               console.log(\"error \", error);\n    //               alert(\"مشخصات کاربر ثبت کننده یافت نشد\");\n    //               setSubmitFlag(false);\n    //             })\n    //             .then(data => {\n    //               if (data === \"ERROR\") {\n    //                 alert(\"مشخصات کاربر ثبت کننده یافت نشد\");\n    //                 setSubmitFlag(false);\n    //               } else {\n    //                 let fullName = data.Title.split(\" \");\n    //                 let name = \"\";\n    //                 let family = \"\";\n    //                 if (fullName.length > 1) {\n    //                   name = fullName[0];\n    //                   family = fullName[1];\n    //                 } else {\n    //                   name = fullName[0];\n    //                   family = fullName[0];\n    //                 }\n    //                 customerTemp = {\n    //                   CustomerId: data.CustomersId,\n    //                   FirstName: name,\n    //                   LastName: family,\n    //                   Email: data.Email,\n    //                   MobileNumber: data.MobileNumber,\n    //                   From: \"Site\",\n    //                   Code: customer.Code\n    //                 };\n    //                 console.log(\"data from user login \", data);\n    //               }\n    //             });\n    //         }\n    //         console.log(\"custumer type 2\", customerTemp);\n    //       }\n    //     } //customerFlag\n    //     let paymentObj = paymentObj[0];\n    //     let info = [\n    //       {\n    //         Flight: [],\n    //         Package: [\n    //           {\n    //             Flight: [],\n    //             Row: [\n    //               {\n    //                 Flight: [\n    //                   {\n    //                     Going: [\n    //                       {\n    //                         ItemType: paymentObj.Flight.ItemType,\n    //                         AirLineAbbrevation: paymentObj.AirLineAbbrevation_Going,\n    //                         AirLineId: paymentObj.Flight.AirLineId_Going,\n    //                         FileName: paymentObj.Flight.FileName_Going,\n    //                         AirLineTitle: paymentObj.Flight.AirLineTitle_Going,\n    //                         DestAirportAbbrevation:\n    //                           paymentObj.Flight.AirLineAbbrevation_Going,\n    //                         DestAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Going,\n    //                         DestCityAbbrevation:\n    //                           paymentObj.Flight.DestCityAbbrevation_Going,\n    //                         DestCityTitle: paymentObj.Flight.DestCityTitle_Going,\n    //                         DestCountryAbbrevation:\n    //                           paymentObj.Flight.DestCountryAbbrevation_Going,\n    //                         DestCountryTitle:\n    //                           paymentObj.Flight.DestCountryTitle_Going,\n    //                         FlightDuration: paymentObj.Flight.FlightDuration_Going,\n    //                         FlightNo: paymentObj.Flight.FlightNo_Going,\n    //                         Id: paymentObj.Flight.Id_Going,\n    //                         LocalARRDate: paymentObj.Flight.LocalARRDate_Going,\n    //                         LocalARRTime: paymentObj.Flight.LocalARRTime_Going,\n    //                         LocalDEPDate: paymentObj.Flight.LocalDEPDate_Going,\n    //                         LocalDEPTime: paymentObj.Flight.LocalDEPTime_Going,\n    //                         SourceAirportAbbrevation:\n    //                           paymentObj.Flight.SourceAirportAbbrevation_Going,\n    //                         SourceAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Going,\n    //                         SourceCityAbbrevation:\n    //                           paymentObj.Flight.SourceCityAbbrevation_Going,\n    //                         SourceCityTitle:\n    //                           paymentObj.Flight.SourceCityTitle_Going,\n    //                         SourceCountryAbbrevation:\n    //                           paymentObj.Flight.SourceCountryAbbrevation_Going,\n    //                         SourceCountryTitle:\n    //                           paymentObj.Flight.SourceCountryTitle_Going,\n    //                         FlightClass: paymentObj.Flight.FlightClassTitle_Going,\n    //                         CityId: paymentObj.Flight.DestCityId_Going,\n    //                         Load: paymentObj.Flight.Load,\n    //                         IsWebService: paymentObj.Flight.IsWebService,\n    //                         WebServiceName: paymentObj.Flight.WebServiceName,\n    //                         B2BID: paymentObj.Flight.B2BID,\n    //                         UserLoginId: paymentObj.Flight.UserLoginId,\n    //                         OnRequest: paymentObj.Flight.OnRequest_Going,\n    //                         DeparturePrice: paymentObj.Flight.DeparturePrice,\n    //                         ReturnPrice: paymentObj.Flight.ReturnPrice,\n    //                         PackageFlightId: paymentObj.Flight.PackageFlightId\n    //                       }\n    //                     ],\n    //                     Coming: [\n    //                       {\n    //                         ItemType: paymentObj.Flight.ItemType,\n    //                         AirLineAbbrevation:\n    //                           paymentObj.AirLineAbbrevation_Coming,\n    //                         AirLineId: paymentObj.Flight.AirLineId_Coming,\n    //                         FileName: paymentObj.Flight.FileName_Coming,\n    //                         AirLineTitle: paymentObj.Flight.AirLineTitle_Coming,\n    //                         DestAirportAbbrevation:\n    //                           paymentObj.Flight.AirLineAbbrevation_Coming,\n    //                         DestAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Coming,\n    //                         DestCityAbbrevation:\n    //                           paymentObj.Flight.DestCityAbbrevation_Coming,\n    //                         DestCityTitle: paymentObj.Flight.DestCityTitle_Coming,\n    //                         DestCountryAbbrevation:\n    //                           paymentObj.Flight.DestCountryAbbrevation_Coming,\n    //                         DestCountryTitle:\n    //                           paymentObj.Flight.DestCountryTitle_Coming,\n    //                         FlightDuration: paymentObj.Flight.FlightDuration_Coming,\n    //                         FlightNo: paymentObj.Flight.FlightNo_Coming,\n    //                         Id: paymentObj.Flight.Id_Coming,\n    //                         LocalARRDate: paymentObj.Flight.LocalARRDate_Coming,\n    //                         LocalARRTime: paymentObj.Flight.LocalARRTime_Coming,\n    //                         LocalDEPDate: paymentObj.Flight.LocalDEPDate_Coming,\n    //                         LocalDEPTime: paymentObj.Flight.LocalDEPTime_Coming,\n    //                         SourceAirportAbbrevation:\n    //                           paymentObj.Flight.SourceAirportAbbrevation_Coming,\n    //                         SourceAirportTitle:\n    //                           paymentObj.Flight.SourceAirportTitle_Coming,\n    //                         SourceCityAbbrevation:\n    //                           paymentObj.Flight.SourceCityAbbrevation_Coming,\n    //                         SourceCityTitle:\n    //                           paymentObj.Flight.SourceCityTitle_Coming,\n    //                         SourceCountryAbbrevation:\n    //                           paymentObj.Flight.SourceCountryAbbrevation_Coming,\n    //                         SourceCountryTitle:\n    //                           paymentObj.Flight.SourceCountryTitle_Coming,\n    //                         FlightClass: paymentObj.Flight.FlightClassTitle_Coming,\n    //                         CityId: paymentObj.Flight.DestCityId_Coming,\n    //                         Load: paymentObj.Flight.Load,\n    //                         IsWebService: paymentObj.Flight.IsWebService,\n    //                         WebServiceName: paymentObj.Flight.WebServiceName,\n    //                         B2BID: paymentObj.Flight.B2BID,\n    //                         UserLoginId: paymentObj.Flight.UserLoginId,\n    //                         OnRequest: paymentObj.Flight.OnRequest_Coming,\n    //                         DeparturePrice: paymentObj.Flight.DeparturePrice,\n    //                         ReturnPrice: paymentObj.Flight.ReturnPrice,\n    //                         PackageFlightId: paymentObj.Flight.PackageFlightId\n    //                       }\n    //                     ]\n    //                   }\n    //                 ],\n    //                 HotelList: paymentObj.Hotel,\n    //                 HotelPrice: paymentObj.RoomInfo,\n    //                 hotelprice_index: 0,\n    //                 Id: paymentObj.PackageHotelRowId\n    //               }\n    //             ],\n    //             Insurance_AdultPrice: paymentObj.InsuranceAdultPrice,\n    //             Insurance_OldPrice: paymentObj.InsuranceOldPrice,\n    //             PackageLength: paymentObj.PackageLength,\n    //             Id: paymentObj.packageId,\n    //             AdultCount: paymentObj.Adult,\n    //             Child1Count: paymentObj.Child1,\n    //             Child2Count: paymentObj.Child2,\n    //             InfantCount: paymentObj.Infant,\n    //             InfantPrice: paymentObj.InfantPrice,\n    //             RoomRule: paymentObj.RoomRules,\n    //             RoomRules: paymentObj.RoomRules\n    //           }\n    //         ],\n    //         Passengers: passengers,\n    //         Customer: [customerTemp],\n    //         Registration: [],\n    //         ReserveType: \"Package\",\n    //         CounterId: \"\",\n    //         Price: paymentObj.TotalPrice,\n    //         PrePayment: 0,\n    //         PriceType: \"All\",\n    //         Discount: 0,\n    //         DiscountWithCode: 0,\n    //         Description: \"\",\n    //         PromoCode: \"\",\n    //         From: \"Site\",\n    //         CommissionInReserveType: \"\",\n    //         CommissionValue: -1,\n    //         CurrencyValue: 1,\n    //         CurrencyTitle: \"ریال\",\n    //         CurrencyTypeId: \"\"\n    //       }\n    //     ];\n    //     //console.log(\"insertOBJ\",info)\n    //     console.log(\"passengers\", JSON.stringify(passengers));\n    //     console.log(\"info\", JSON.stringify(info));\n    //     if (!setSubmitFlag) {\n    //       return false;\n    //     }\n    //     await axios\n    //       .get(`${Ports.domain}${Ports.book}`, {\n    //         params: {\n    //           info: JSON.stringify(info),\n    //           getway_type: \"MELLAT\",\n    //           force_payment: true,\n    //           is_webservice: false,\n    //           webservice_name: \"\",\n    //           IsOnRequest: false,\n    //           passengers: JSON.stringify(passengers),\n    //           TrackerUniqueId: \"\"\n    //         }\n    //       })\n    //       .then(function(response) {\n    //         console.log(response);\n    //         switch (response.status) {\n    //           case 200:\n    //             return response.data;\n    //           default:\n    //             return false;\n    //         }\n    //       })\n    //       .catch(function(error) {\n    //         console.log(\"error \", error);\n    //         alert(\"Error\" + error);\n    //       })\n    //       .then(data => {\n    //         console.log(\"reserv data after form submit\", data);\n    //       });\n\n  } //handle customer Fields\n\n\n  function handleUser(e, type) {\n    let value = e.target.value;\n\n    if (type === \"Email\") {\n      let emailFlag = isRealValue(value) ? false : true;\n      setSubmiterEmailError(emailFlag);\n      setCustomer(_objectSpread({}, customer, {\n        Email: value\n      }));\n    }\n\n    if (type === \"FirstName\") {\n      let submiterNameFlag = isRealValue(value) ? false : true;\n      setSubmiterNameError(submiterNameFlag);\n      setCustomer(_objectSpread({}, customer, {\n        FirstName: value\n      }));\n    }\n\n    if (type === \"LastName\") {\n      let submiterFamilyFlag = isRealValue(value) ? false : true;\n      setSubmiterFamilyError(submiterFamilyFlag);\n      setCustomer(_objectSpread({}, customer, {\n        LastName: value\n      }));\n    }\n\n    if (type === \"MobileNumber\") {\n      if (customerType === 1) {\n        let submiterMobileFlag = isRealValue(value) ? false : true;\n        setSubmiterMobileError(submiterMobileFlag);\n      }\n\n      if (customerType === 2) {\n        let submiterMobileFlag = isRealValue(value) ? false : true;\n        setContractError(submiterMobileFlag);\n      }\n\n      setCustomer(_objectSpread({}, customer, {\n        MobileNumber: value\n      }));\n    }\n\n    if (type === \"Code\") {\n      if (customerType === 2) {\n        let submiterCodeFlag = isRealValue(value) ? false : true;\n        setContractError(submiterCodeFlag);\n      }\n\n      setCustomer(_objectSpread({}, customer, {\n        Code: value\n      }));\n    }\n  } //handle passengers validation\n\n\n  function handleInputChange(e, idx, type) {\n    let nextPassenger = passengers.slice();\n    nextPassenger[idx].id = idx;\n    let value = e.target.value;\n\n    if (type === \"FirstName\") {\n      nextPassenger[idx].FirstName = value; //check latin\n\n      let latin = latinNameError;\n      let latinFlag = just_persian(value) ? true : false;\n      latin[idx] = latinFlag;\n      setLatinNameError(latin.slice()); //check required\n\n      let req = nameError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setNameError(req.slice());\n    }\n\n    if (type === \"LastName\") {\n      nextPassenger[idx].LastName = value; //check latin\n\n      let latin = latinFamilyError;\n      let latinFlag = just_persian(value) ? true : false;\n      latin[idx] = latinFlag;\n      setLatinFamilyError(latin.slice()); //check required\n\n      let req = familyError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setFamilyError(req.slice());\n    }\n\n    if (type === \"CellPhoneNumber\") {\n      nextPassenger[idx].CellPhoneNumber = value; //check required\n\n      let req = mobileReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setMobileReqError(req.slice()); //check format\n\n      let format = mobileFormatError;\n      let formatFlag = mobile_format(value) ? false : true;\n      if (!isRealValue(value)) formatFlag = false;\n      format[idx] = formatFlag;\n      setMobileFormatError(format.slice());\n    }\n\n    if (type === \"Gender\") nextPassenger[idx].Gender = value;\n    if (type === \"birthType\") nextPassenger[idx].birthType = value;\n\n    if (type === \"Nationality\") {\n      var option_user_selection = e.target.options[e.target.selectedIndex].text;\n      nextPassenger[idx].Nationality = option_user_selection;\n      nextPassenger[idx].NationalityCode = value;\n    }\n\n    if (type === \"bDay\") {\n      nextPassenger[idx].bDay = value; //check required\n\n      let req = bDayReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setBDayReqError(req.slice());\n    }\n\n    if (type === \"bMonth\") {\n      nextPassenger[idx].bMonth = value; //check required\n\n      let req = bMonReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setBMonReqError(req.slice());\n    }\n\n    if (type === \"bYear\") {\n      nextPassenger[idx].bYear = value; //check required\n\n      let req = bYearReqError;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setBYearReqError(req.slice());\n    }\n\n    if (type === \"bDay\" || type === \"bMonth\" || type === \"bYear\") {\n      nextPassenger[idx].BirthDate = nextPassenger[idx].bYear + \"/\" + nextPassenger[idx].bMonth + \"/\" + nextPassenger[idx].bDay;\n    }\n\n    if (type === \"pDay\" || type === \"pMonth\" || type === \"pYear\") {\n      if (type === \"pDay\") nextPassenger[idx].pDay = value;\n      if (type === \"pMonth\") nextPassenger[idx].pMonth = value;\n      if (type === \"pYear\") nextPassenger[idx].pYear = value;\n      nextPassenger[idx].PassportExpirationDate = nextPassenger[idx].pYear + \"/\" + nextPassenger[idx].pMonth + \"/\" + nextPassenger[idx].pDay;\n    }\n\n    if (type === \"cardType\") nextPassenger[idx].cardType = parseInt(value);\n\n    if (type === \"PassportNo\") {\n      nextPassenger[idx].PassportNo = value; //check required\n\n      let req = passportReqErroe;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setPassportReqErroe(req.slice());\n    }\n\n    if (type === \"PassportExpirationDate\") nextPassenger[idx].PassportExpirationDate = value;\n\n    if (type === \"melliCode\") {\n      nextPassenger[idx].melliCode = value; //check numbare\n\n      let numbare = mellicodeFormatError;\n      console.log(\"is number output\", isNumber(value));\n      let numbareFlag = isNumber(value) ? false : true;\n      numbare[idx] = numbareFlag;\n      setMellicodeFormatError(numbare.slice()); //check required\n\n      let req = mellicodeReqErroe;\n      let reqFlag = isRealValue(value) ? false : true;\n      req[idx] = reqFlag;\n      setMellicodeReqErroe(req.slice());\n    }\n\n    if (type === \"Room\") {\n      nextPassenger[idx].Room = parseInt(value);\n      if (nextPassenger[idx].personType === \"adult\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Adult;\n      if (nextPassenger[idx].personType === \"child1\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Child1;\n      if (nextPassenger[idx].personType === \"child2\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Child2;\n      if (nextPassenger[idx].personType === \"infant\") nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Infant;\n    }\n\n    setPassengers(nextPassenger);\n  } //handle contions and rules\n\n\n  function handleConditionChange(e) {\n    setCondotion(e.target.checked);\n    setCondotionFlag(e.target.checked);\n  }\n\n  console.log(\"customer\", customer);\n  console.log(\"passengers\", passengers);\n  console.log(\"submitFkag\", submitFlag);\n  return __jsx(\"div\", {\n    className: \"info-form\"\n  }, __jsx(\"p\", {\n    className: \"desc-tag\"\n  }, __jsx(IoMdInformationCircle, null), \"\\u0644\\u0637\\u0641\\u0627 \\u0627\\u0637\\u0644\\u0627\\u0639\\u0627\\u062A \\u0632\\u06CC\\u0631 \\u0631\\u0627 \\u06A9\\u0627\\u0645\\u0644 \\u06A9\\u0646\\u06CC\\u062F :\"), __jsx(MDBCard, null, __jsx(MDBCardBody, null, __jsx(\"div\", {\n    className: \"travelers-info\"\n  }, __jsx(\"span\", null, \"\\u06CC\\u06A9\\u06CC \\u0627\\u0632 \\u0645\\u0633\\u0627\\u0641\\u0631\\u0627\\u0646 :\"), __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"radio\",\n    value: \"a\",\n    name: \"travelers\",\n    checked: iAm,\n    onChange: onSetIamChanged\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }), __jsx(\"span\", null, \"\\u0647\\u0633\\u062A\\u0645\")), __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"travelers\",\n    value: \"b\",\n    checked: iAmnot,\n    onChange: onSetIamNotChanged\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }), __jsx(\"span\", null, \"\\u0646\\u06CC\\u0633\\u062A\\u0645\")), __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"travelers\",\n    value: \"c\",\n    checked: before,\n    onChange: onSetBeforeChanged\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }), __jsx(\"span\", null, \"\\u0642\\u0628\\u0644\\u0627 \\u062E\\u0631\\u06CC\\u062F \\u0627\\u0646\\u062C\\u0627\\u0645 \\u062F\\u0627\\u062F\\u0647 \\u0627\\u0645\"))), __jsx(Form, null, iAm ? __jsx(Row, {\n    form: true\n  }, __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_email\"\n  }, \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterEmailError || submiterEmailFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Email\"),\n    value: customer.Email,\n    type: \"email\",\n    name: \"user_email\",\n    id: \"user_email\"\n  }), submiterEmailError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterEmailFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\"))) : __jsx(React.Fragment, null, iAmnot ? __jsx(Row, {\n    form: true\n  }, __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_name\"\n  }, \"\\u0646\\u0627\\u0645 :\"), __jsx(Input, {\n    style: submiterNameError ? errorBorder : {},\n    onChange: e => handleUser(e, \"FirstName\"),\n    value: customer.FirstName,\n    type: \"text\",\n    name: \"user_name\",\n    id: \"user_name\"\n  }), submiterNameError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0646\\u0627\\u0645 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\")), __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_family\"\n  }, \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC :\"), __jsx(Input, {\n    style: submiterFamilyError ? errorBorder : {},\n    onChange: e => handleUser(e, \"LastName\"),\n    value: customer.LastName,\n    type: \"text\",\n    name: \"user_family\",\n    id: \"user_family\"\n  }), submiterFamilyError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\")), __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_mobile\"\n  }, \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterMobileError || submiterMobileFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"MobileNumber\"),\n    value: customer.MobileNumber,\n    type: \"email\",\n    name: \"user_mobile\",\n    id: \"user_mobile\"\n  }), submiterMobileError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterMobileFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\")), __jsx(Col, {\n    md: 3\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_email1\"\n  }, \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterEmailError || submiterEmailFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Email\"),\n    value: customer.Email,\n    type: \"email\",\n    name: \"user_email1\",\n    id: \"user_email1\"\n  }), submiterEmailError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterEmailFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\"))) : __jsx(Row, {\n    form: true\n  }, __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"user_email2\"\n  }, \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 :\"), __jsx(Input, {\n    style: submiterEmailError || submiterEmailFormatError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Email\"),\n    value: customer.Email,\n    type: \"email\",\n    name: \"user_email2\",\n    id: \"user_email2\"\n  }), submiterEmailError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", submiterEmailFormatError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0641\\u0631\\u0645\\u062A \\u0627\\u06CC\\u0645\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\")), __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"MobileNumber\"\n  }, \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 :\"), __jsx(Input, {\n    className: \"mobileContract\",\n    style: contractError && mobileReqError ? errorBorder : {},\n    onChange: e => handleUser(e, \"MobileNumber\"),\n    value: customer.MobileNumber,\n    type: \"text\",\n    name: \"MobileNumber\",\n    id: \"MobileNumber\"\n  }), contractError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u06CC\\u0627 \\u0634\\u0645\\u0627\\u0631\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062F\\u0627\\u062F \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\"), __jsx(\"span\", {\n    className: \"or\"\n  }, \"\\u06CC\\u0627\")), __jsx(Col, {\n    md: 4\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"code\"\n  }, \"\\u0634\\u0645\\u0627\\u0631\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062F\\u0627\\u062F :\"), __jsx(Input, {\n    style: contractError ? errorBorder : {},\n    onChange: e => handleUser(e, \"Code\"),\n    value: customer.Code,\n    type: \"text\",\n    name: \"code\",\n    id: \"code\"\n  }), contractError ? __jsx(\"span\", {\n    className: \"pr-1 small text-danger\"\n  }, __jsx(IoIosWarning, {\n    size: \"15\"\n  }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u06CC\\u0627 \\u0634\\u0645\\u0627\\u0631\\u0647 \\u0642\\u0631\\u0627\\u0631\\u062F\\u0627\\u062F \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\"))))), __jsx(Form, {\n    id: \"form1\"\n  }, passengers.map((person, idx) => {\n    return __jsx(\"div\", {\n      key: IDBIndex.toString()\n    }, __jsx(\"hr\", null), __jsx(\"div\", {\n      className: \"passenger-tag\"\n    }, __jsx(\"span\", null, \"\\u0645\\u0633\\u0627\\u0641\\u0631 \", numToWord(idx + 1), \" -\", \" \", personType(person.personType))), __jsx(Row, {\n      form: true\n    }, __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"FirstName\"\n    }, \"\\u0646\\u0627\\u0645 :\"), __jsx(Input, {\n      style: nameError[idx] || latinNameError[idx] ? errorBorder : {},\n      type: \"text\",\n      value: person.FirstName,\n      onChange: e => handleInputChange(e, idx, \"FirstName\"),\n      name: \"FirstName\",\n      id: \"FirstName\",\n      placeholder: \"\\u0646\\u0627\\u0645 \\u0628\\u0647 \\u0644\\u0627\\u062A\\u06CC\\u0646\"\n    }), nameError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u0646\\u0627\\u0645 \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : \"\", latinNameError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(TiSortAlphabetically, {\n      size: \"15\"\n    }), \" \\u0646\\u0627\\u0645 \\u0644\\u0627\\u062A\\u06CC\\u0646 \\u0648\\u0627\\u0631\\u062F \\u0634\\u0648\\u062F\", \" \") : \"\")), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"LastName\"\n    }, \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC :\"), __jsx(Input, {\n      style: familyError[idx] || latinFamilyError[idx] ? errorBorder : {},\n      type: \"text\",\n      value: person.LastName,\n      onChange: e => handleInputChange(e, idx, \"LastName\"),\n      name: \"LastName\",\n      id: \"LastName\",\n      placeholder: \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0628\\u0647 \\u0644\\u0627\\u062A\\u06CC\\u0646\"\n    }), familyError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : \"\", latinFamilyError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(TiSortAlphabetically, {\n      size: \"15\"\n    }), \" \\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC \\u0644\\u0627\\u062A\\u06CC\\u0646 \\u0648\\u0627\\u0631\\u062F \\u0634\\u0648\\u062F\", \" \") : \"\")), __jsx(Col, {\n      md: 2\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"Gender\"\n    }, \"\\u062C\\u0646\\u0633\\u06CC\\u062A :\"), __jsx(Input, {\n      value: person.Gender,\n      onChange: e => handleInputChange(e, idx, \"Gender\"),\n      type: \"select\",\n      name: \"Gender\",\n      id: \"Gender\",\n      placeholder: \"\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u0632\\u0646\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0645\\u0631\\u062F\")))), __jsx(Col, {\n      md: 2\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"melliCode\"\n    }, \"\\u0627\\u062A\\u0627\\u0642 :\"), __jsx(Input, {\n      value: person.Room,\n      onChange: e => handleInputChange(e, idx, \"Room\"),\n      type: \"select\",\n      name: \"Room\",\n      id: \"Room\"\n    }, roomCount.map((_, index) => {\n      return __jsx(\"option\", {\n        value: index + 1\n      }, index + 1);\n    })))), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"Nationality\"\n    }, \"\\u062A\\u0627\\u0628\\u0639\\u06CC\\u062A :\"), __jsx(Input, {\n      value: person.NationalityCode,\n      onChange: e => handleInputChange(e, idx, \"Nationality\"),\n      type: \"select\",\n      name: \"Nationality\",\n      id: \"Nationality\",\n      placeholder: \"\"\n    }, Countries.map(cnt => {\n      return __jsx(\"option\", {\n        key: cnt.code.toString(),\n        value: cnt.code\n      }, cnt.name);\n    })))), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"CellPhoneNumber\"\n    }, \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 :\"), __jsx(Input, {\n      style: mobileReqError[idx] || mobileFormatError[idx] ? errorBorder : {},\n      value: person.CellPhoneNumber,\n      onChange: e => handleInputChange(e, idx, \"CellPhoneNumber\"),\n      type: \"text\",\n      name: \"CellPhoneNumber\",\n      id: \"CellPhoneNumber\",\n      placeholder: \"\"\n    }), mobileReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F\") : \"\", mobileFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u0641\\u0631\\u0645\\u062A \\u0645\\u0648\\u0628\\u0627\\u06CC\\u0644 \\u0646\\u0627\\u062F\\u0631\\u0633\\u062A \\u0627\\u0633\\u062A\") : \"\")), __jsx(Col, {\n      md: 4\n    }, __jsx(Label, {\n      for: \"BirthDate\"\n    }, \"\\u062A\\u0627\\u0631\\u06CC\\u062E \\u062A\\u0648\\u0644\\u062F :\"), __jsx(Row, {\n      className: \"px-3 BirthDate\"\n    }, __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      style: bDayReqError[idx] || bDayFormatError[idx] ? errorBorder : {},\n      value: person.bDay,\n      onChange: e => handleInputChange(e, idx, \"bDay\"),\n      type: \"text\",\n      name: \"bDay\",\n      id: \"bDay\",\n      placeholder: \"\\u0631\\u0648\\u0632\"\n    }), bDayReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u0631\\u0648\\u0632 \\u062A\\u0648\\u0644\\u062F \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC \\u0627\\u0633\\u062A\") : bDayFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u062E\\u0627\\u0631\\u062C \\u0627\\u0632 \\u0645\\u062D\\u062F\\u0648\\u062F\\u0647 31 \\u0631\\u0648\\u0632\") : \"\"), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      style: bMonReqError[idx] || bMonFormatError[idx] ? errorBorder : {},\n      value: person.bMonth,\n      onChange: e => handleInputChange(e, idx, \"bMonth\"),\n      type: \"text\",\n      name: \"bMonth\",\n      id: \"bMonth\",\n      placeholder: \"\\u0645\\u0627\\u0647\"\n    }), bMonReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u0645\\u0627\\u0647 \\u062A\\u0648\\u0644\\u062F \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC \\u0627\\u0633\\u062A\") : bMonFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u062E\\u0627\\u0631\\u062C \\u0627\\u0632 \\u0645\\u062D\\u062F\\u0648\\u062F\\u0647 12 \\u0645\\u0627\\u0647\") : \"\"), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      style: bYearReqError[idx] ? errorBorder : {},\n      value: person.bYear,\n      onChange: e => handleInputChange(e, idx, \"bYear\"),\n      type: \"text\",\n      name: \"bYear\",\n      id: \"bYear\",\n      placeholder: \"\\u0633\\u0627\\u0644\"\n    }), bYearReqError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\",\n      style: {\n        fontSize: \"8px\"\n      }\n    }, \"\\u0633\\u0627\\u0644 \\u062A\\u0648\\u0644\\u062F \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC \\u0627\\u0633\\u062A\") : \"\"), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.birthType,\n      onChange: e => handleInputChange(e, idx, \"birthType\"),\n      type: \"select\",\n      name: \"birthType\",\n      id: \"birthType\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u0634\\u0645\\u0633\\u06CC\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0645\\u06CC\\u0644\\u0627\\u062F\\u06CC\"))))), __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"CardType\"\n    }, \"\\u062B\\u0628\\u062A \\u0628\\u0627 :\"), __jsx(Input, {\n      value: person.cardType,\n      onChange: e => handleInputChange(e, idx, \"cardType\"),\n      type: \"select\",\n      name: \"cardType\",\n      id: \"submit_with\",\n      placeholder: \"\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u06A9\\u062F \\u0645\\u0644\\u06CC\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0634\\u0645\\u0627\\u0631\\u0647 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A\")))), person.cardType ? __jsx(React.Fragment, null, __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"PassportNo\"\n    }, \"\\u0634\\u0645\\u0627\\u0631\\u0647 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A :\"), __jsx(Input, {\n      style: passportReqErroe[idx] ? errorBorder : {},\n      value: person.PassportNo,\n      onChange: e => handleInputChange(e, idx, \"PassportNo\"),\n      type: \"text\",\n      name: \"PassportNo\",\n      id: \"PassportNo\",\n      placeholder: \"\"\n    }), passportReqErroe[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u0634\\u0645\\u0627\\u0631\\u0647 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : \"\")), __jsx(Col, {\n      md: 4\n    }, __jsx(Label, {\n      for: \"PassportExpirationDate\"\n    }, \"\\u0627\\u0646\\u0642\\u0636\\u0627\\u0621 \\u067E\\u0627\\u0633\\u067E\\u0648\\u0631\\u062A :\"), __jsx(Row, {\n      className: \"px-3 PassportExpirationDate\"\n    }, __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.pDay,\n      onChange: e => handleInputChange(e, idx, \"pDay\"),\n      type: \"text\",\n      name: \"pDay\",\n      id: \"pDay\",\n      placeholder: \"\\u0631\\u0648\\u0632\"\n    })), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.pMonth,\n      onChange: e => handleInputChange(e, idx, \"pMonth\"),\n      type: \"text\",\n      name: \"pMonth\",\n      id: \"pMonth\",\n      placeholder: \"\\u0645\\u0627\\u0647\"\n    })), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.pYear,\n      onChange: e => handleInputChange(e, idx, \"pYear\"),\n      type: \"text\",\n      name: \"pYear\",\n      id: \"pYear\",\n      placeholder: \"\\u0633\\u0627\\u0644\"\n    })), __jsx(FormGroup, {\n      className: \"w-24\"\n    }, __jsx(Input, {\n      value: person.passExType,\n      onChange: e => handleInputChange(e, idx, \"passExType\"),\n      type: \"select\",\n      name: \"passExType\",\n      id: \"passExType\"\n    }, __jsx(\"option\", {\n      value: 0\n    }, \"\\u0645\\u06CC\\u0644\\u0627\\u062F\\u06CC\"), __jsx(\"option\", {\n      value: 1\n    }, \"\\u0634\\u0645\\u0633\\u06CC\")))))) : __jsx(Col, {\n      md: 4\n    }, __jsx(FormGroup, null, __jsx(Label, {\n      for: \"melliCode\"\n    }, \"\\u06A9\\u062F \\u0645\\u0644\\u06CC :\"), __jsx(Input, {\n      style: mellicodeReqErroe[idx] || mellicodeFormatError[idx] || mellicodeLengthError[idx] ? errorBorder : {},\n      value: person.melliCode,\n      onChange: e => handleInputChange(e, idx, \"melliCode\"),\n      type: \"text\",\n      name: \"melliCode\",\n      id: \"melliCode\",\n      placeholder: \"\"\n    }), mellicodeReqErroe[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \" \\u0641\\u06CC\\u0644\\u062F \\u06A9\\u062F \\u0645\\u0644\\u06CC \\u0627\\u062C\\u0628\\u0627\\u0631\\u06CC\\u0633\\u062A\", \" \") : mellicodeFormatError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u0641\\u0642\\u0637 \\u0648\\u0631\\u0648\\u062F \\u0639\\u062F\\u062F \\u0645\\u062C\\u0627\\u0632 \\u0627\\u0633\\u062A \\u0634\\u0648\\u062F\", \" \") : mellicodeLengthError[idx] ? __jsx(\"span\", {\n      className: \"pr-1 small text-danger\"\n    }, __jsx(IoIosWarning, {\n      size: \"15\"\n    }), \"\\u062A\\u0639\\u062F\\u0627\\u062F \\u0627\\u0631\\u0642\\u0627\\u0645 \\u06A9\\u0645\\u062A\\u0631 \\u0627\\u0632 10 \\u0645\\u06CC \\u0628\\u0627\\u0634\\u062F\", \" \") : \"\"))), __jsx(Row, null));\n  })), __jsx(\"hr\", null), __jsx(\"div\", {\n    className: \"rule-accept\"\n  }, __jsx(\"p\", null, __jsx(IoMdInformationCircle, null), __jsx(\"span\", {\n    className: \"title\"\n  }, \"\\u0642\\u0648\\u0627\\u0646\\u06CC\\u0646 \\u0648 \\u0645\\u0642\\u0631\\u0631\\u0627\\u062A :\")), __jsx(\"label\", {\n    className: \"container\"\n  }, __jsx(\"span\", null, \"\\u0634\\u0631\\u0627\\u06CC\\u0637 \\u0648 \\u0642\\u0648\\u0627\\u0646\\u06CC\\u0646\"), \"\\u0631\\u0627 \\u0645\\u0637\\u0627\\u0644\\u0639\\u0647 \\u06A9\\u0631\\u062F\\u0647 \\u0648 \\u0628\\u0627 \\u06A9\\u0644\\u06CC\\u0647 \\u0645\\u0648\\u0627\\u0631\\u062F \\u0645\\u0648\\u0627\\u0641\\u0642\\u0645.\", __jsx(\"input\", {\n    type: \"checkbox\",\n    checked: condotion,\n    onChange: handleConditionChange\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  }))), __jsx(\"hr\", null), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"passenger-tag\"\n  }, __jsx(\"span\", null, \"\\u0627\\u0646\\u062A\\u062E\\u0627\\u0628 \\u062F\\u0631\\u06AF\\u0627\\u0647 \\u067E\\u0631\\u062F\\u0627\\u062E\\u062A\")), __jsx(\"div\", {\n    className: \"bank-pose\"\n  }, __jsx(\"label\", {\n    className: \"container\"\n  }, __jsx(\"img\", {\n    src: require(\"../../img/mellat.png\")\n  }), __jsx(\"input\", {\n    type: \"radio\",\n    checked: \"checked\",\n    name: \"radio\"\n  }), __jsx(\"span\", {\n    className: \"checkmark\"\n  })))), __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"passenger-tag\"\n  }, __jsx(\"span\", null, \"\\u0642\\u06CC\\u0645\\u062A \\u0646\\u0647\\u0627\\u06CC\\u06CC\")), __jsx(\"div\", {\n    className: \"last-price\"\n  }, __jsx(\"div\", null, __jsx(\"span\", {\n    className: \"label\"\n  }, \"\\u062C\\u0645\\u0639 \\u06A9\\u0644 \\u0642\\u06CC\\u0645\\u062A :\"), __jsx(\"span\", null, HotelPriceFormat(paymentObj[0].TotalPrice), \"\\u0631\\u06CC\\u0627\\u0644\")), __jsx(\"div\", null, __jsx(\"span\", {\n    className: \"label\"\n  }, \"\\u0645\\u0628\\u0644\\u063A \\u0642\\u0627\\u0628\\u0644 \\u067E\\u0631\\u062F\\u0627\\u062E\\u062A :\"), __jsx(\"span\", null, HotelPriceFormat(paymentObj[0].TotalPrice), \"\\u0631\\u06CC\\u0627\\u0644\")), __jsx(\"hr\", null)), __jsx(\"div\", {\n    className: \"off-code\"\n  }, __jsx(\"span\", null, \"\\u06A9\\u062F \\u062A\\u062E\\u0641\\u06CC\\u0641 :\"), __jsx(InputGroup, {\n    size: \"sm\"\n  }, __jsx(Input, null)), __jsx(\"button\", {\n    className: \"btn\"\n  }, \"\\u0627\\u0639\\u0645\\u0627\\u0644\"))), __jsx(\"div\", {\n    className: \"col-md-12\"\n  }, __jsx(\"div\", {\n    className: \"pay-btns\"\n  }, __jsx(\"button\", {\n    form: \"form1\",\n    onClick: handleForm,\n    className: \"btn green-btn\",\n    disabled: !submitFlag && !condotionFlag\n  }, \"\\u067E\\u0631\\u062F\\u0627\\u062E\\u062A\"), __jsx(\"button\", {\n    className: \"btn\"\n  }, \"\\u0627\\u0646\\u0635\\u0631\\u0627\\u0641\")))))));\n};\n\nconst mapStateToProps = state => {\n  const paymentObj = state.paymenObject.paymentObj;\n  return {\n    paymentObj\n  };\n};\n\nexport default connect(mapStateToProps)(InfoForm);","map":{"version":3,"sources":["C:/Users/Hope/Desktop/KiteSearchEngine/components/tour/infoForm.js"],"names":["React","useState","useEffect","connect","MDBCard","MDBCardBody","IoIosWarning","IoMdInformationCircle","TiSortAlphabetically","Col","Row","Form","FormGroup","Label","InputGroup","Input","Countries","axios","Ports","numToWord","personType","latinOrPersianValidate","requiredInput","validateEmail","just_persian","isRealValue","mobileFormatInputValidate","mobile_format","checkLimits","isNumber","mellicode_format","NumberFormat","moment","FaRegFlag","InfoForm","props","iAm","setIAm","iAmnot","setIAmnot","before","setBefore","condotion","setCondotion","condotionFlag","setCondotionFlag","submitFlag","setSubmitFlag","customerFlag","setcustomerFlag","paymentObj","formAdult","setFormAdult","Array","Math","abs","Adult","fill","map","value","i","FirstName","LastName","CellPhoneNumber","Gender","AgeRange","Nationality","NationalityCode","BirthDate","birthType","bDay","bMonth","bYear","cardType","PassportNo","PassportExpirationDate","passExType","pDay","pMonth","pYear","melliCode","Type","Room","Price","RoomPrices","PackageFlightId","FlightID","Insurance","InsuranceId","InsurancePrice","InsuranceAdultPrice","Visa","VisaPrice","VisaID","VisaId","Services","formChild1","setFormChild1","Child1","formChild2","setFormChild2","Child2","formInfant","setFormInfant","Infant","errorBorder","border","allPassengers","concat","passengers","setPassengers","customer","setCustomer","CustomerId","Email","MobileNumber","From","Code","nameError","setNameError","length","latinNameError","setLatinNameError","familyError","setFamilyError","latinFamilyError","setLatinFamilyError","mobileFormatError","setMobileFormatError","mobileReqError","setMobileReqError","bDayReqError","setBDayReqError","bDayFormatError","setBDayFormatError","bMonReqError","setBMonReqError","bMonFormatError","setBMonFormatError","bYearReqError","setBYearReqError","mellicodeReqErroe","setMellicodeReqErroe","mellicodeFormatError","setMellicodeFormatError","mellicodeLengthError","setMellicodeLengthError","passportReqErroe","setPassportReqErroe","submiterEmailError","setSubmiterEmailError","submiterEmailFormatError","setSubmiterEmailFormatError","submiterNameError","setSubmiterNameError","submiterFamilyError","setSubmiterFamilyError","submiterMobileError","setSubmiterMobileError","submiterMobileFormatError","setSubmiterMobileFormatError","contractError","setContractError","customerType","setCustomerType","roomCount","searchParams","roomRules","split","onSetIamChanged","onSetIamNotChanged","onSetBeforeChanged","HotelPriceFormat","num","handleForm","e","preventDefault","emailFlag","emailFormatFlag","submiterNameFlag","submiterFamilyFlag","submiterMobileFlag","mobileFormatFlag","nameErrorTemp","nameValidate","slice","latinNameErrorTemp","nameLatinValidate","familyErrorTemp","familyValidate","latinFamilyErrorTemp","familyLatinValidate","roomFlag","eachRoom","filter","item","sumAdult","sumChild1","sumChild2","sumInfant","j","parseInt","charAt","alert","mobileReqErrorTemp","CellPhoneNumberValidate","mobileFormatErrorTemp","mobileFormatValidate","bDayReqErrorTemp","bDayValidate","bDayFormatErrorTemp","bDayFormatValidate","bMonReqErrorTemp","bMonValidate","bMonFormatErrorTemp","bMonFormatValidate","bYearReqErrorTemp","bYearValidate","people","index","birthday","ageFlag","format","age","diff","InsuranceOldPrice","mellicodeReqErroeTemp","mellicodeValidate","req","reqFlag","handleUser","type","target","submiterCodeFlag","handleInputChange","idx","nextPassenger","id","latin","latinFlag","formatFlag","option_user_selection","options","selectedIndex","text","numbare","console","log","numbareFlag","handleConditionChange","checked","person","IDBIndex","toString","_","cnt","code","name","fontSize","require","TotalPrice","mapStateToProps","state","paymenObject"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,qBAAvB,QAAoD,gBAApD;AACA,SAASC,oBAAT,QAAqC,gBAArC;AACA,SACEC,GADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,SAJF,EAKEC,KALF,EAMEC,UANF,EAOEC,KAPF,QAQO,YARP,C,CAUA;;AACA,OAAOC,SAAP,MAAsB,iBAAtB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AACA,SACEC,SADF,EAEEC,UAFF,EAGEC,sBAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,YANF,EAOEC,WAPF,EAQEC,yBARF,EASEC,aATF,EAUEC,WAVF,EAWEC,QAXF,EAYEC,gBAZF,QAaO,iBAbP;AAcA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,SAAT,QAA0B,gBAA1B;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBpC,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM;AAAA,OAACqC,MAAD;AAAA,OAASC;AAAT,MAAsBtC,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAAA,OAACuC,MAAD;AAAA,OAASC;AAAT,MAAsBxC,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAAA,OAACyC,SAAD;AAAA,OAAYC;AAAZ,MAA4B1C,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAAC2C,aAAD;AAAA,OAAgBC;AAAhB,MAAoC5C,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAA,OAAC6C,UAAD;AAAA,OAAaC;AAAb,MAA8B9C,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAAC+C,YAAD;AAAA,OAAeC;AAAf,MAAkChD,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM;AAAEiD,IAAAA;AAAF,MAAiBf,KAAvB;AACA,QAAM;AAAA,OAACgB,SAAD;AAAA,OAAYC;AAAZ,MAA4BnD,QAAQ,CACxC,IAAIoD,KAAJ,CAAUC,IAAI,CAACC,GAAL,CAASL,UAAU,CAAC,CAAD,CAAV,CAAcM,KAAvB,CAAV,EAAyCC,IAAzC,CAA8C,CAA9C,EAAiDC,GAAjD,CACE,CAACC,KAAD,EAAQC,CAAR,KACGD,KAAK,GAAG;AACPvC,IAAAA,UAAU,EAAE,OADL;AAEPyC,IAAAA,SAAS,EAAE,EAFJ;AAGPC,IAAAA,QAAQ,EAAE,EAHH;AAIP;AACA;AACAC,IAAAA,eAAe,EAAE,EANV;AAOPC,IAAAA,MAAM,EAAE,CAPD;AAQPC,IAAAA,QAAQ,EAAE,CARH;AASPC,IAAAA,WAAW,EAAE,MATN;AAUPC,IAAAA,eAAe,EAAE,IAVV;AAWPC,IAAAA,SAAS,EAAE,EAXJ;AAYPC,IAAAA,SAAS,EAAE,CAZJ;AAaPC,IAAAA,IAAI,EAAE,EAbC;AAcPC,IAAAA,MAAM,EAAE,EAdD;AAePC,IAAAA,KAAK,EAAE,EAfA;AAgBPC,IAAAA,QAAQ,EAAE,CAhBH;AAiBPC,IAAAA,UAAU,EAAE,EAjBL;AAkBPC,IAAAA,sBAAsB,EAAE,EAlBjB;AAmBPC,IAAAA,UAAU,EAAE,CAnBL;AAoBPC,IAAAA,IAAI,EAAE,EApBC;AAqBPC,IAAAA,MAAM,EAAE,EArBD;AAsBPC,IAAAA,KAAK,EAAE,EAtBA;AAuBPC,IAAAA,SAAS,EAAE,EAvBJ;AAwBPC,IAAAA,IAAI,EAAE,SAxBC;AAyBPC,IAAAA,IAAI,EAAE,CAzBC;AA0BPC,IAAAA,KAAK,EAAEjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyB,CAAzB,EAA4B5B,KA1B5B;AA2BP6B,IAAAA,eAAe,EAAEnC,UAAU,CAAC,CAAD,CAAV,CAAcoC,QA3BxB;AA4BPC,IAAAA,SAAS,EAAErC,UAAU,CAAC,CAAD,CAAV,CAAcqC,SA5BlB;AA6BPC,IAAAA,WAAW,EAAEtC,UAAU,CAAC,CAAD,CAAV,CAAcsC,WA7BpB;AA8BP;AACAC,IAAAA,cAAc,EAAEvC,UAAU,CAAC,CAAD,CAAV,CAAcwC,mBA/BvB;AAgCPC,IAAAA,IAAI,EAAEzC,UAAU,CAAC,CAAD,CAAV,CAAcyC,IAhCb;AAiCPC,IAAAA,SAAS,EAAE1C,UAAU,CAAC,CAAD,CAAV,CAAc0C,SAjClB;AAkCPC,IAAAA,MAAM,EAAE3C,UAAU,CAAC,CAAD,CAAV,CAAc4C,MAlCf;AAmCP;AACAC,IAAAA,QAAQ,EAAE7C,UAAU,CAAC,CAAD,CAAV,CAAc6C;AApCjB,GAFb,CADwC,CAA1C;AA2CA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BhG,QAAQ,CAC1C,IAAIoD,KAAJ,CAAUC,IAAI,CAACC,GAAL,CAASL,UAAU,CAAC,CAAD,CAAV,CAAcgD,MAAvB,CAAV,EAA0CzC,IAA1C,CAA+C,CAA/C,EAAkDC,GAAlD,CACE,CAACC,KAAD,EAAQC,CAAR,KACGD,KAAK,GAAG;AACPvC,IAAAA,UAAU,EAAE,QADL;AAEPyC,IAAAA,SAAS,EAAE,EAFJ;AAGPC,IAAAA,QAAQ,EAAE,EAHH;AAIP;AACA;AACAC,IAAAA,eAAe,EAAE,EANV;AAOPC,IAAAA,MAAM,EAAE,CAPD;AAQPC,IAAAA,QAAQ,EAAE,CARH;AASPC,IAAAA,WAAW,EAAE,MATN;AAUPC,IAAAA,eAAe,EAAE,IAVV;AAWPC,IAAAA,SAAS,EAAE,EAXJ;AAYPC,IAAAA,SAAS,EAAE,CAZJ;AAaPC,IAAAA,IAAI,EAAE,EAbC;AAcPC,IAAAA,MAAM,EAAE,EAdD;AAePC,IAAAA,KAAK,EAAE,EAfA;AAgBPC,IAAAA,QAAQ,EAAE,CAhBH;AAiBPC,IAAAA,UAAU,EAAE,EAjBL;AAkBPC,IAAAA,sBAAsB,EAAE,EAlBjB;AAmBPC,IAAAA,UAAU,EAAE,CAnBL;AAoBPC,IAAAA,IAAI,EAAE,EApBC;AAqBPC,IAAAA,MAAM,EAAE,EArBD;AAsBPC,IAAAA,KAAK,EAAE,EAtBA;AAuBPC,IAAAA,SAAS,EAAE,EAvBJ;AAwBPC,IAAAA,IAAI,EAAE,SAxBC;AAyBPC,IAAAA,IAAI,EAAE,CAzBC;AA0BPC,IAAAA,KAAK,EAAEjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyB,CAAzB,EAA4Bc,MA1B5B;AA2BPb,IAAAA,eAAe,EAAEnC,UAAU,CAAC,CAAD,CAAV,CAAcoC,QA3BxB;AA4BPC,IAAAA,SAAS,EAAErC,UAAU,CAAC,CAAD,CAAV,CAAcqC,SA5BlB;AA6BPC,IAAAA,WAAW,EAAEtC,UAAU,CAAC,CAAD,CAAV,CAAcsC,WA7BpB;AA8BP;AACAC,IAAAA,cAAc,EAAEvC,UAAU,CAAC,CAAD,CAAV,CAAcwC,mBA/BvB;AAgCPC,IAAAA,IAAI,EAAEzC,UAAU,CAAC,CAAD,CAAV,CAAcyC,IAhCb;AAiCPC,IAAAA,SAAS,EAAE1C,UAAU,CAAC,CAAD,CAAV,CAAc0C,SAjClB;AAkCPC,IAAAA,MAAM,EAAE3C,UAAU,CAAC,CAAD,CAAV,CAAc4C,MAlCf;AAmCP;AACAC,IAAAA,QAAQ,EAAE7C,UAAU,CAAC,CAAD,CAAV,CAAc6C;AApCjB,GAFb,CAD0C,CAA5C;AA2CA,QAAM;AAAA,OAACI,UAAD;AAAA,OAAaC;AAAb,MAA8BnG,QAAQ,CAC1C,IAAIoD,KAAJ,CAAUC,IAAI,CAACC,GAAL,CAASL,UAAU,CAAC,CAAD,CAAV,CAAcmD,MAAvB,CAAV,EAA0C5C,IAA1C,CAA+C,CAA/C,EAAkDC,GAAlD,CACE,CAACC,KAAD,EAAQC,CAAR,KACGD,KAAK,GAAG;AACPvC,IAAAA,UAAU,EAAE,QADL;AAEPyC,IAAAA,SAAS,EAAE,EAFJ;AAGPC,IAAAA,QAAQ,EAAE,EAHH;AAIP;AACA;AACAC,IAAAA,eAAe,EAAE,EANV;AAOPC,IAAAA,MAAM,EAAE,CAPD;AAQPC,IAAAA,QAAQ,EAAE,CARH;AASPC,IAAAA,WAAW,EAAE,MATN;AAUPC,IAAAA,eAAe,EAAE,IAVV;AAWPC,IAAAA,SAAS,EAAE,EAXJ;AAYPC,IAAAA,SAAS,EAAE,CAZJ;AAaPC,IAAAA,IAAI,EAAE,EAbC;AAcPC,IAAAA,MAAM,EAAE,EAdD;AAePC,IAAAA,KAAK,EAAE,EAfA;AAgBPC,IAAAA,QAAQ,EAAE,CAhBH;AAiBPC,IAAAA,UAAU,EAAE,EAjBL;AAkBPC,IAAAA,sBAAsB,EAAE,EAlBjB;AAmBPC,IAAAA,UAAU,EAAE,CAnBL;AAoBPC,IAAAA,IAAI,EAAE,EApBC;AAqBPC,IAAAA,MAAM,EAAE,EArBD;AAsBPC,IAAAA,KAAK,EAAE,EAtBA;AAuBPC,IAAAA,SAAS,EAAE,EAvBJ;AAwBPC,IAAAA,IAAI,EAAE,SAxBC;AAyBPC,IAAAA,IAAI,EAAE,CAzBC;AA0BPC,IAAAA,KAAK,EAAEjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyB,CAAzB,EAA4BiB,MA1B5B;AA2BPhB,IAAAA,eAAe,EAAEnC,UAAU,CAAC,CAAD,CAAV,CAAcoC,QA3BxB;AA4BPC,IAAAA,SAAS,EAAErC,UAAU,CAAC,CAAD,CAAV,CAAcqC,SA5BlB;AA6BPC,IAAAA,WAAW,EAAEtC,UAAU,CAAC,CAAD,CAAV,CAAcsC,WA7BpB;AA8BP;AACAC,IAAAA,cAAc,EAAEvC,UAAU,CAAC,CAAD,CAAV,CAAcwC,mBA/BvB;AAgCPC,IAAAA,IAAI,EAAEzC,UAAU,CAAC,CAAD,CAAV,CAAcyC,IAhCb;AAiCPC,IAAAA,SAAS,EAAE1C,UAAU,CAAC,CAAD,CAAV,CAAc0C,SAjClB;AAkCPC,IAAAA,MAAM,EAAE3C,UAAU,CAAC,CAAD,CAAV,CAAc4C;AAlCf,GAFb,CAD0C,CAA5C;AAyCA,QAAM;AAAA,OAACQ,UAAD;AAAA,OAAaC;AAAb,MAA8BtG,QAAQ,CAC1C,IAAIoD,KAAJ,CAAUC,IAAI,CAACC,GAAL,CAASL,UAAU,CAAC,CAAD,CAAV,CAAcsD,MAAvB,CAAV,EAA0C/C,IAA1C,CAA+C,CAA/C,EAAkDC,GAAlD,CACE,CAACC,KAAD,EAAQC,CAAR,KACGD,KAAK,GAAG;AACPvC,IAAAA,UAAU,EAAE,QADL;AAEPyC,IAAAA,SAAS,EAAE,EAFJ;AAGPC,IAAAA,QAAQ,EAAE,EAHH;AAIP;AACA;AACAC,IAAAA,eAAe,EAAE,EANV;AAOPC,IAAAA,MAAM,EAAE,CAPD;AAQPC,IAAAA,QAAQ,EAAE,CARH;AASPC,IAAAA,WAAW,EAAE,MATN;AAUPC,IAAAA,eAAe,EAAE,IAVV;AAWPC,IAAAA,SAAS,EAAE,EAXJ;AAYPC,IAAAA,SAAS,EAAE,CAZJ;AAaPC,IAAAA,IAAI,EAAE,EAbC;AAcPC,IAAAA,MAAM,EAAE,EAdD;AAePC,IAAAA,KAAK,EAAE,EAfA;AAgBPC,IAAAA,QAAQ,EAAE,CAhBH;AAiBPC,IAAAA,UAAU,EAAE,EAjBL;AAkBPC,IAAAA,sBAAsB,EAAE,EAlBjB;AAmBPC,IAAAA,UAAU,EAAE,CAnBL;AAoBPC,IAAAA,IAAI,EAAE,EApBC;AAqBPC,IAAAA,MAAM,EAAE,EArBD;AAsBPC,IAAAA,KAAK,EAAE,EAtBA;AAuBPC,IAAAA,SAAS,EAAE,EAvBJ;AAwBPC,IAAAA,IAAI,EAAE,SAxBC;AAyBPC,IAAAA,IAAI,EAAE,CAzBC;AA0BPC,IAAAA,KAAK,EAAEjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyB,CAAzB,EAA4BoB,MA1B5B;AA2BPnB,IAAAA,eAAe,EAAEnC,UAAU,CAAC,CAAD,CAAV,CAAcoC,QA3BxB;AA4BPE,IAAAA,WAAW,EAAEtC,UAAU,CAAC,CAAD,CAAV,CAAcsC,WA5BpB;AA6BPD,IAAAA,SAAS,EAAErC,UAAU,CAAC,CAAD,CAAV,CAAcqC,SA7BlB;AA8BP;AACAE,IAAAA,cAAc,EAAEvC,UAAU,CAAC,CAAD,CAAV,CAAcwC,mBA/BvB;AAgCPC,IAAAA,IAAI,EAAEzC,UAAU,CAAC,CAAD,CAAV,CAAcyC,IAhCb;AAiCPC,IAAAA,SAAS,EAAE1C,UAAU,CAAC,CAAD,CAAV,CAAc0C,SAjClB;AAkCPC,IAAAA,MAAM,EAAE3C,UAAU,CAAC,CAAD,CAAV,CAAc4C;AAlCf,GAFb,CAD0C,CAA5C;AAyCA,QAAMW,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE;AADU,GAApB;AAGA,QAAMC,aAAa,GAAGxD,SAAS,CAACyD,MAAV,CAAiBZ,UAAjB,EAA6BG,UAA7B,EAAyCG,UAAzC,CAAtB;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8B7G,QAAQ,CAAC0G,aAAD,CAA5C;AACA,QAAM;AAAA,OAACI,QAAD;AAAA,OAAWC;AAAX,MAA0B/G,QAAQ,CAAC;AACvCgH,IAAAA,UAAU,EAAE,EAD2B;AAEvCpD,IAAAA,SAAS,EAAE,EAF4B;AAGvCC,IAAAA,QAAQ,EAAE,EAH6B;AAIvCoD,IAAAA,KAAK,EAAE,EAJgC;AAKvCC,IAAAA,YAAY,EAAE,EALyB;AAMvCC,IAAAA,IAAI,EAAE,MANiC;AAOvCC,IAAAA,IAAI,EAAE;AAPiC,GAAD,CAAxC,CAtLwB,CAgMxB;;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BtH,QAAQ,CACxC,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADwC,CAA1C;AAGA,QAAM;AAAA,OAACgE,cAAD;AAAA,OAAiBC;AAAjB,MAAsCzH,QAAQ,CAClD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADkD,CAApD;AAGA,QAAM;AAAA,OAACkE,WAAD;AAAA,OAAcC;AAAd,MAAgC3H,QAAQ,CAC5C,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CAD4C,CAA9C;AAGA,QAAM;AAAA,OAACoE,gBAAD;AAAA,OAAmBC;AAAnB,MAA0C7H,QAAQ,CACtD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADsD,CAAxD;AAGA,QAAM;AAAA,OAACsE,iBAAD;AAAA,OAAoBC;AAApB,MAA4C/H,QAAQ,CACxD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADwD,CAA1D;AAGA,QAAM;AAAA,OAACwE,cAAD;AAAA,OAAiBC;AAAjB,MAAsCjI,QAAQ,CAClD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADkD,CAApD;AAGA,QAAM;AAAA,OAAC0E,YAAD;AAAA,OAAeC;AAAf,MAAkCnI,QAAQ,CAC9C,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CAD8C,CAAhD;AAGA,QAAM;AAAA,OAAC4E,eAAD;AAAA,OAAkBC;AAAlB,MAAwCrI,QAAQ,CACpD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADoD,CAAtD;AAGA,QAAM;AAAA,OAAC8E,YAAD;AAAA,OAAeC;AAAf,MAAkCvI,QAAQ,CAC9C,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CAD8C,CAAhD;AAGA,QAAM;AAAA,OAACgF,eAAD;AAAA,OAAkBC;AAAlB,MAAwCzI,QAAQ,CACpD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADoD,CAAtD;AAGA,QAAM;AAAA,OAACkF,aAAD;AAAA,OAAgBC;AAAhB,MAAoC3I,QAAQ,CAChD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADgD,CAAlD;AAGA,QAAM;AAAA,OAACoF,iBAAD;AAAA,OAAoBC;AAApB,MAA4C7I,QAAQ,CACxD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADwD,CAA1D;AAGA,QAAM;AAAA,OAACsF,oBAAD;AAAA,OAAuBC;AAAvB,MAAkD/I,QAAQ,CAC9D,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CAD8D,CAAhE;AAGA,QAAM;AAAA,OAACwF,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDjJ,QAAQ,CAC9D,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CAD8D,CAAhE;AAGA,QAAM;AAAA,OAAC0F,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CnJ,QAAQ,CACtD,IAAIoD,KAAJ,CAAUsD,aAAa,CAACa,MAAxB,EAAgC/D,IAAhC,CAAqC,KAArC,CADsD,CAAxD,CA3OwB,CA+OxB;;AACA,QAAM;AAAA,OAAC4F,kBAAD;AAAA,OAAqBC;AAArB,MAA8CrJ,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM;AAAA,OAACsJ,wBAAD;AAAA,OAA2BC;AAA3B,MAA0DvJ,QAAQ,CACtE,KADsE,CAAxE;AAGA,QAAM;AAAA,OAACwJ,iBAAD;AAAA,OAAoBC;AAApB,MAA4CzJ,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM;AAAA,OAAC0J,mBAAD;AAAA,OAAsBC;AAAtB,MAAgD3J,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM;AAAA,OAAC4J,mBAAD;AAAA,OAAsBC;AAAtB,MAAgD7J,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM;AAAA,OAAC8J,yBAAD;AAAA,OAA4BC;AAA5B,MAA4D/J,QAAQ,CACxE,KADwE,CAA1E;AAGA,QAAM;AAAA,OAACgK,aAAD;AAAA,OAAgBC;AAAhB,MAAoCjK,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAA,OAACkK,YAAD;AAAA,OAAeC;AAAf,MAAkCnK,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAMoK,SAAS,GAAGlI,KAAK,CAACmI,YAAN,CAAmBC,SAAnB,CAA6BC,KAA7B,CAAmC,GAAnC,CAAlB,CA5PwB,CA8PxB;;AACA,WAASC,eAAT,GAA2B;AACzBlI,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAJ,IAAAA,MAAM,CAAC,IAAD,CAAN;AACA+H,IAAAA,eAAe,CAAC,CAAD,CAAf;AACD,GApQuB,CAsQxB;;;AACA,WAASM,kBAAT,GAA8B;AAC5BrI,IAAAA,MAAM,CAAC,KAAD,CAAN;AACAI,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAF,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA6H,IAAAA,eAAe,CAAC,CAAD,CAAf;AACD,GA5QuB,CA8QxB;;;AACA,WAASO,kBAAT,GAA8B;AAC5BtI,IAAAA,MAAM,CAAC,KAAD,CAAN;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA2H,IAAAA,eAAe,CAAC,CAAD,CAAf;AACD,GApRuB,CAsRxB;;;AACA,WAASQ,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,WACE,MAAC,YAAD;AACE,MAAA,KAAK,EAAEA,GADT;AAEE,MAAA,WAAW,EAAE,MAFf;AAGE,MAAA,iBAAiB,EAAE,IAHrB;AAIE,MAAA,UAAU,EAAEA,GAAG,IAAI,mBAAMA,GAAN;AAJrB,MADF;AAQD,GAhSuB,CAkSxB;;;AACA,iBAAeC,UAAf,CAA0BC,CAA1B,EAA6B;AAC3BA,IAAAA,CAAC,CAACC,cAAF,GAD2B,CAG3B;AAEA;;AACA,QAAIC,SAAS,GAAGxJ,WAAW,CAACsF,QAAQ,CAACG,KAAV,CAAX,GAA8B,KAA9B,GAAsC,IAAtD;AACAoC,IAAAA,qBAAqB,CAAC2B,SAAD,CAArB;AACA,QAAIC,eAAe,GAAG,KAAtB,CAR2B,CAS3B;;AACA,QAAI,CAACD,SAAL,EAAgB;AACdC,MAAAA,eAAe,GAAG3J,aAAa,CAACwF,QAAQ,CAACG,KAAV,CAAb,GAAgC,KAAhC,GAAwC,IAA1D;AACAsC,MAAAA,2BAA2B,CAAC0B,eAAD,CAA3B;AACD;;AACD,QAAIA,eAAe,IAAID,SAAvB,EAAkClI,aAAa,CAAC,KAAD,CAAb,CAdP,CAgB3B;;AACA,QAAIoH,YAAY,KAAK,CAArB,EAAwB;AACtB,UAAIgB,gBAAgB,GAAG1J,WAAW,CAACsF,QAAQ,CAAClD,SAAV,CAAX,GAAkC,KAAlC,GAA0C,IAAjE;AACA6F,MAAAA,oBAAoB,CAACyB,gBAAD,CAApB;AACA,UAAIC,kBAAkB,GAAG3J,WAAW,CAACsF,QAAQ,CAACjD,QAAV,CAAX,GAAiC,KAAjC,GAAyC,IAAlE;AACA8F,MAAAA,sBAAsB,CAACwB,kBAAD,CAAtB;AACA,UAAIC,kBAAkB,GAAG5J,WAAW,CAACsF,QAAQ,CAACI,YAAV,CAAX,GACrB,KADqB,GAErB,IAFJ;AAGA2C,MAAAA,sBAAsB,CAACuB,kBAAD,CAAtB;AACA,UAAIC,gBAAgB,GAAG,KAAvB;;AACA,UAAI,CAACD,kBAAL,EAAyB;AACvBC,QAAAA,gBAAgB,GAAG3J,aAAa,CAACoF,QAAQ,CAACI,YAAV,CAAb,GAAuC,KAAvC,GAA+C,IAAlE;AACA6C,QAAAA,4BAA4B,CAACsB,gBAAD,CAA5B;AACD;;AACD,UAAIH,gBAAgB,IAAIC,kBAApB,IAA0CC,kBAA9C,EACEtI,aAAa,CAAC,KAAD,CAAb;AACH,KAjC0B,CAmC3B;;;AACA,QAAIoH,YAAY,KAAK,CAArB,EAAwB;AACtB,UAAI1I,WAAW,CAACsF,QAAQ,CAACI,YAAV,CAAX,IAAsC1F,WAAW,CAACsF,QAAQ,CAACM,IAAV,CAArD,EAAsE;AACpE,YAAI5F,WAAW,CAACsF,QAAQ,CAACI,YAAV,CAAf,EAAwC;AACtC,cAAI,CAACxF,aAAa,CAACoF,QAAQ,CAACI,YAAV,CAAlB,EAA2C;AACzC+C,YAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAnH,YAAAA,aAAa,CAAC,KAAD,CAAb;AACD;;AACDmH,UAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,SAND,MAMOA,gBAAgB,CAAC,KAAD,CAAhB;AACR,OARD,MAQO;AACLA,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAnH,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF;AAED;AACA;;;AACA,QAAIwI,aAAa,GAAGjE,SAApB;AACA,QAAIkE,YAAY,GAAGlK,aAAa,CAACuF,UAAD,EAAa0E,aAAb,EAA4B,WAA5B,CAAhC;AACAhE,IAAAA,YAAY,CAACiE,YAAY,CAAC,CAAD,CAAZ,CAAgBC,KAAhB,EAAD,CAAZ;AACA,QAAI,CAACD,YAAY,CAAC,CAAD,CAAjB,EAAsBzI,aAAa,CAAC,KAAD,CAAb,CAxDK,CAyD3B;;AACA,QAAI2I,kBAAkB,GAAGjE,cAAzB;AACA,QAAIkE,iBAAiB,GAAGtK,sBAAsB,CAC5CwF,UAD4C,EAE5C6E,kBAF4C,EAG5C,WAH4C,EAI5C,CAJ4C,CAA9C;AAMAhE,IAAAA,iBAAiB,CAACiE,iBAAiB,CAAC,CAAD,CAAjB,CAAqBF,KAArB,EAAD,CAAjB;AACA,QAAI,CAACE,iBAAiB,CAAC,CAAD,CAAtB,EAA2B5I,aAAa,CAAC,KAAD,CAAb,CAlEA,CAoE3B;;AACA,QAAI6I,eAAe,GAAGjE,WAAtB;AACA,QAAIkE,cAAc,GAAGvK,aAAa,CAACuF,UAAD,EAAa+E,eAAb,EAA8B,UAA9B,CAAlC;AACAhE,IAAAA,cAAc,CAACiE,cAAc,CAAC,CAAD,CAAd,CAAkBJ,KAAlB,EAAD,CAAd;AACA,QAAI,CAACI,cAAc,CAAC,CAAD,CAAnB,EAAwB9I,aAAa,CAAC,KAAD,CAAb,CAxEG,CAyE3B;;AACA,QAAI+I,oBAAoB,GAAGjE,gBAA3B;AACA,QAAIkE,mBAAmB,GAAG1K,sBAAsB,CAC9CwF,UAD8C,EAE9CiF,oBAF8C,EAG9C,UAH8C,EAI9C,CAJ8C,CAAhD;AAMAhE,IAAAA,mBAAmB,CAACiE,mBAAmB,CAAC,CAAD,CAAnB,CAAuBN,KAAvB,EAAD,CAAnB;AACA,QAAI,CAACM,mBAAmB,CAAC,CAAD,CAAxB,EAA6BhJ,aAAa,CAAC,KAAD,CAAb,CAlFF,CAoF3B;;AACA,QAAIiJ,QAAQ,GAAG,IAAf;;AACA,SAAK,IAAIpI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyG,SAAS,CAAC7C,MAA9B,EAAsC5D,CAAC,EAAvC,EAA2C;AACzC,UAAIqI,QAAQ,GAAG,EAAf;AACAA,MAAAA,QAAQ,GAAGpF,UAAU,CAACqF,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACjH,IAAL,KAActB,CAAC,GAAG,CAA5C,CAAX;AACA,UAAIwI,QAAQ,GAAG,CAAf;AACA,UAAIC,SAAS,GAAG,CAAhB;AACA,UAAIC,SAAS,GAAG,CAAhB;AACA,UAAIC,SAAS,GAAG,CAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAACzE,MAA7B,EAAqCgF,CAAC,EAAtC,EAA0C;AACxC,YAAIP,QAAQ,CAACO,CAAD,CAAR,CAAYpL,UAAZ,KAA2B,OAA/B,EAAwCgL,QAAQ;AAChD,YAAIH,QAAQ,CAACO,CAAD,CAAR,CAAYpL,UAAZ,KAA2B,QAA/B,EAAyCiL,SAAS;AAClD,YAAIJ,QAAQ,CAACO,CAAD,CAAR,CAAYpL,UAAZ,KAA2B,QAA/B,EAAyCkL,SAAS;AAClD,YAAIL,QAAQ,CAACO,CAAD,CAAR,CAAYpL,UAAZ,KAA2B,QAA/B,EAAyCmL,SAAS;AACnD;;AAED,UAAIE,QAAQ,CAACL,QAAD,CAAR,GAAqBK,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAAjC,EAA2D;AACzDC,QAAAA,KAAK,CACF,uBAAsBxL,SAAS,CAC9ByC,CAAC,GAAG,CAD0B,CAE9B,gCAHC,CAAL;AAKAoI,QAAAA,QAAQ,GAAG,KAAX;AACD,OAPD,MAOO,IAAIS,QAAQ,CAACL,QAAD,CAAR,GAAqBK,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAAjC,EAA2D;AAChEC,QAAAA,KAAK,CACF,wBAAuBxL,SAAS,CAC/ByC,CAAC,GAAG,CAD2B,CAE/B,+BAHC,CAAL;AAKAoI,QAAAA,QAAQ,GAAG,KAAX;AACD,OAPM,MAOA,IACLS,QAAQ,CAACJ,SAAD,CAAR,GAAsBI,QAAQ,CAACH,SAAD,CAA9B,GACAG,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAAR,GAAmCD,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAFtC,EAGL;AACAC,QAAAA,KAAK,CACF,oBAAmBxL,SAAS,CAACyC,CAAC,GAAG,CAAL,CAAQ,+BADlC,CAAL;AAGAoI,QAAAA,QAAQ,GAAG,KAAX;AACD,OARM,MAQA,IACLS,QAAQ,CAACJ,SAAD,CAAR,GAAsBI,QAAQ,CAACH,SAAD,CAA9B,GACAG,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAAR,GAAmCD,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAFtC,EAGL;AACAC,QAAAA,KAAK,CACF,oBAAmBxL,SAAS,CAACyC,CAAC,GAAG,CAAL,CAAQ,+BADlC,CAAL;AAGAoI,QAAAA,QAAQ,GAAG,KAAX;AACD,OARM,MAQA,IAAIS,QAAQ,CAACF,SAAD,CAAR,GAAsBE,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAAlC,EAA4D;AACjEC,QAAAA,KAAK,CACF,qBAAoBxL,SAAS,CAACyC,CAAC,GAAG,CAAL,CAAQ,+BADnC,CAAL;AAGAoI,QAAAA,QAAQ,GAAG,KAAX;AACD,OALM,MAKA,IAAIS,QAAQ,CAACF,SAAD,CAAR,GAAsBE,QAAQ,CAACpC,SAAS,CAACzG,CAAD,CAAT,CAAa8I,MAAb,CAAoB,CAApB,CAAD,CAAlC,EAA4D;AACjEC,QAAAA,KAAK,CACF,qBAAoBxL,SAAS,CAACyC,CAAC,GAAG,CAAL,CAAQ,gCADnC,CAAL;AAGAoI,QAAAA,QAAQ,GAAG,KAAX;AACD;;AACD,UAAI,CAACA,QAAL,EAAe;AACbjJ,QAAAA,aAAa,CAAC,KAAD,CAAb;AACA;AACD;AACF,KAjJ0B,CAiJzB;AAEF;;;AACA,QAAI6J,kBAAkB,GAAG3E,cAAzB;AACA,QAAI4E,uBAAuB,GAAGvL,aAAa,CACzCuF,UADyC,EAEzC+F,kBAFyC,EAGzC,iBAHyC,CAA3C;AAKA1E,IAAAA,iBAAiB,CAAC2E,uBAAuB,CAAC,CAAD,CAAvB,CAA2BpB,KAA3B,EAAD,CAAjB;AACA,QAAI,CAACoB,uBAAuB,CAAC,CAAD,CAA5B,EAAiC9J,aAAa,CAAC,KAAD,CAAb,CA3JN,CA4J3B;;AACA,QAAI+J,qBAAqB,GAAG/E,iBAA5B;AACA,QAAIgF,oBAAoB,GAAGrL,yBAAyB,CAClDmF,UADkD,EAElDiG,qBAFkD,EAGlD,iBAHkD,EAIlD,CAJkD,CAApD;AAMA9E,IAAAA,oBAAoB,CAAC+E,oBAAoB,CAAC,CAAD,CAApB,CAAwBtB,KAAxB,EAAD,CAApB;AACA,QAAI,CAACsB,oBAAoB,CAAC,CAAD,CAAzB,EAA8BhK,aAAa,CAAC,KAAD,CAAb,CArKH,CAuK3B;;AACA,QAAIiK,gBAAgB,GAAG7E,YAAvB;AACA,QAAI8E,YAAY,GAAG3L,aAAa,CAACuF,UAAD,EAAamG,gBAAb,EAA+B,MAA/B,CAAhC;AACA5E,IAAAA,eAAe,CAAC6E,YAAY,CAAC,CAAD,CAAZ,CAAgBxB,KAAhB,EAAD,CAAf;AACA,QAAI,CAACwB,YAAY,CAAC,CAAD,CAAjB,EAAsBlK,aAAa,CAAC,KAAD,CAAb,CA3KK,CA6K3B;;AACA,QAAImK,mBAAmB,GAAG7E,eAA1B;AACA,QAAI8E,kBAAkB,GAAGvL,WAAW,CAClCiF,UADkC,EAElCqG,mBAFkC,EAGlC,MAHkC,EAIlC,KAJkC,CAApC;AAMA5E,IAAAA,kBAAkB,CAAC6E,kBAAkB,CAAC,CAAD,CAAlB,CAAsB1B,KAAtB,EAAD,CAAlB;AACA,QAAI,CAAC0B,kBAAkB,CAAC,CAAD,CAAvB,EAA4BpK,aAAa,CAAC,KAAD,CAAb,CAtLD,CAwL3B;;AACA,QAAIqK,gBAAgB,GAAG7E,YAAvB;AACA,QAAI8E,YAAY,GAAG/L,aAAa,CAACuF,UAAD,EAAauG,gBAAb,EAA+B,QAA/B,CAAhC;AACA5E,IAAAA,eAAe,CAAC6E,YAAY,CAAC,CAAD,CAAZ,CAAgB5B,KAAhB,EAAD,CAAf;AACA,QAAI,CAAC4B,YAAY,CAAC,CAAD,CAAjB,EAAsBtK,aAAa,CAAC,KAAD,CAAb,CA5LK,CA8L3B;;AACA,QAAIuK,mBAAmB,GAAG7E,eAA1B;AACA,QAAI8E,kBAAkB,GAAG3L,WAAW,CAClCiF,UADkC,EAElCyG,mBAFkC,EAGlC,QAHkC,EAIlC,OAJkC,CAApC;AAMA5E,IAAAA,kBAAkB,CAAC6E,kBAAkB,CAAC,CAAD,CAAlB,CAAsB9B,KAAtB,EAAD,CAAlB;AACA,QAAI,CAAC8B,kBAAkB,CAAC,CAAD,CAAvB,EAA4BxK,aAAa,CAAC,KAAD,CAAb,CAvMD,CAyM3B;;AACA,QAAIyK,iBAAiB,GAAG7E,aAAxB;AACA,QAAI8E,aAAa,GAAGnM,aAAa,CAACuF,UAAD,EAAa2G,iBAAb,EAAgC,OAAhC,CAAjC;AACA5E,IAAAA,gBAAgB,CAAC6E,aAAa,CAAC,CAAD,CAAb,CAAiBhC,KAAjB,EAAD,CAAhB;AACA,QAAI,CAACgC,aAAa,CAAC,CAAD,CAAlB,EAAuB1K,aAAa,CAAC,KAAD,CAAb,CA7MI,CA+M3B;;AACA8D,IAAAA,UAAU,CAACnD,GAAX,CAAe,CAACgK,MAAD,EAASC,KAAT,KAAmB;AAChC,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,OAAO,GAAG,IAAd;;AACA,UAAIH,MAAM,CAACrJ,SAAP,KAAqB,CAAzB,EAA4B;AAC1BuJ,QAAAA,QAAQ,GAAG5L,MAAM,CAAC0L,MAAM,CAACtJ,SAAR,EAAmB,eAAnB,CAAN,CAA0C0J,MAA1C,CACT,YADS,CAAX;AAGD,OAJD,MAIO;AACLF,QAAAA,QAAQ,GAAGF,MAAM,CAACtJ,SAAlB;AACD;;AACD,UAAI2J,GAAG,GAAG/L,MAAM,GAAGgM,IAAT,CAAcJ,QAAd,EAAwB,OAAxB,CAAV;;AACA,UAAIF,MAAM,CAACtM,UAAP,KAAsB,OAA1B,EAAmC;AACjC,YAAI2M,GAAG,GAAG,EAAV,EAAc;AACZF,UAAAA,OAAO,GAAC,KAAR;AACAlB,UAAAA,KAAK,CACF,qBAAoBxL,SAAS,CAACwM,KAAK,GAAG,CAAT,CAAY,uBADvC,CAAL;AAGD,SALD,MAKO;AACL,cAAGI,GAAG,GAAC,EAAP,EAAW;AACTL,YAAAA,MAAM,CAACjI,cAAP,GAAwBvC,UAAU,CAAC,CAAD,CAAV,CAAc+K,iBAAtC;AACD;AACF;AACF,OAXD,MAWO,IACLP,MAAM,CAACtM,UAAP,KAAsB,QAAtB,IACAsM,MAAM,CAACtM,UAAP,KAAsB,QAFjB,EAGL;AACA,YAAI2M,GAAG,GAAG,EAAN,IAAYA,GAAG,GAAG,CAAtB,EAAyB;AACvBF,UAAAA,OAAO,GAAE,KAAT;AACAlB,UAAAA,KAAK,CAAE,mBAAkBxL,SAAS,CAACwM,KAAK,GAAG,CAAT,CAAY,uBAAzC,CAAL;AACD;AACF,OARM,MAQA;AACL,YAAII,GAAG,GAAG,CAAV,EAAa;AACXF,UAAAA,OAAO,GAAE,KAAT;AACAlB,UAAAA,KAAK,CACF,oBAAmBxL,SAAS,CAACwM,KAAK,GAAG,CAAT,CAAY,uBADtC,CAAL;AAGD;AACF;;AACD,UAAG,CAACE,OAAJ,EAAY;AACV9K,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,KAzCD,EAhN2B,CA2P3B;;AACA8D,IAAAA,UAAU,CAACnD,GAAX,CAAe,CAACgK,MAAD,EAAS9J,CAAT,KAAa;AAC1B,UAAI8J,MAAM,CAACjJ,QAAP,KAAkB,CAAtB,EAAwB;AACtB;AACA,YAAIyJ,qBAAqB,GAAGjF,oBAA5B;AACA,YAAIkF,iBAAiB,GAAGrM,gBAAgB,CAAC4L,MAAM,CAAC1I,SAAR,CAAhB,GAAqC,KAArC,GAA6C,IAArE;AACA,YAAImJ,iBAAJ,EAAuBpL,aAAa,CAAC,KAAD,CAAb;AACvBmL,QAAAA,qBAAqB,CAACtK,CAAD,CAArB,GAA2BuK,iBAA3B;AACAjF,QAAAA,uBAAuB,CAACgF,qBAAqB,CAACzC,KAAtB,EAAD,CAAvB,CANsB,CAOtB;;AACA,YAAI2C,GAAG,GAAGvF,iBAAV;AACA,YAAIwF,OAAO,GAAG5M,WAAW,CAACiM,MAAM,CAAC1I,SAAR,CAAX,GAAgC,KAAhC,GAAwC,IAAtD;AACA,YAAGqJ,OAAH,EAAYtL,aAAa,CAAC,KAAD,CAAb;AACZqL,QAAAA,GAAG,CAACxK,CAAD,CAAH,GAASyK,OAAT;AACAvF,QAAAA,oBAAoB,CAACsF,GAAG,CAAC3C,KAAJ,EAAD,CAApB;AACD,OAbD,MAcI;AACF;AACA,YAAI2C,GAAG,GAAGjF,gBAAV;AACA,YAAIkF,OAAO,GAAG5M,WAAW,CAACiM,MAAM,CAAChJ,UAAR,CAAX,GAAiC,KAAjC,GAAyC,IAAvD;AACA,YAAG2J,OAAH,EAAYtL,aAAa,CAAC,KAAD,CAAb;AACZqL,QAAAA,GAAG,CAACxK,CAAD,CAAH,GAASyK,OAAT;AACAjF,QAAAA,mBAAmB,CAACgF,GAAG,CAAC3C,KAAJ,EAAD,CAAnB;AACD;AACF,KAvBD,EA5P2B,CAsR3B;;AACI,QAAG,CAAC3I,UAAJ,EACA;AACI,aAAO,KAAP;AACH,KA1Rsr3BuB,CAu3BxB;;;AACA,WAASwL,UAAT,CAAoBvD,CAApB,EAAuBwD,IAAvB,EAA6B;AAC3B,QAAI5K,KAAK,GAAGoH,CAAC,CAACyD,MAAF,CAAS7K,KAArB;;AACA,QAAI4K,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAItD,SAAS,GAAGxJ,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA7C;AACA2F,MAAAA,qBAAqB,CAAC2B,SAAD,CAArB;AACAjE,MAAAA,WAAW,mBAAMD,QAAN;AAAgBG,QAAAA,KAAK,EAAEvD;AAAvB,SAAX;AACD;;AACD,QAAI4K,IAAI,KAAK,WAAb,EAA0B;AACxB,UAAIpD,gBAAgB,GAAG1J,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAApD;AACA+F,MAAAA,oBAAoB,CAACyB,gBAAD,CAApB;AACAnE,MAAAA,WAAW,mBAAMD,QAAN;AAAgBlD,QAAAA,SAAS,EAAEF;AAA3B,SAAX;AACD;;AACD,QAAI4K,IAAI,KAAK,UAAb,EAAyB;AACvB,UAAInD,kBAAkB,GAAG3J,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAAtD;AACAiG,MAAAA,sBAAsB,CAACwB,kBAAD,CAAtB;AACApE,MAAAA,WAAW,mBAAMD,QAAN;AAAgBjD,QAAAA,QAAQ,EAAEH;AAA1B,SAAX;AACD;;AACD,QAAI4K,IAAI,KAAK,cAAb,EAA6B;AAC3B,UAAIpE,YAAY,KAAK,CAArB,EAAwB;AACtB,YAAIkB,kBAAkB,GAAG5J,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAAtD;AACAmG,QAAAA,sBAAsB,CAACuB,kBAAD,CAAtB;AACD;;AACD,UAAIlB,YAAY,KAAK,CAArB,EAAwB;AACtB,YAAIkB,kBAAkB,GAAG5J,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAAtD;AACAuG,QAAAA,gBAAgB,CAACmB,kBAAD,CAAhB;AACD;;AACDrE,MAAAA,WAAW,mBAAMD,QAAN;AAAgBI,QAAAA,YAAY,EAAExD;AAA9B,SAAX;AACD;;AACD,QAAI4K,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAIpE,YAAY,KAAK,CAArB,EAAwB;AACtB,YAAIsE,gBAAgB,GAAGhN,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAApD;AACAuG,QAAAA,gBAAgB,CAACuE,gBAAD,CAAhB;AACD;;AACDzH,MAAAA,WAAW,mBAAMD,QAAN;AAAgBM,QAAAA,IAAI,EAAE1D;AAAtB,SAAX;AACD;AACF,GA35BuB,CA45BxB;;;AACA,WAAS+K,iBAAT,CAA2B3D,CAA3B,EAA8B4D,GAA9B,EAAmCJ,IAAnC,EAAyC;AACvC,QAAIK,aAAa,GAAG/H,UAAU,CAAC4E,KAAX,EAApB;AACAmD,IAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBE,EAAnB,GAAwBF,GAAxB;AACA,QAAIhL,KAAK,GAAGoH,CAAC,CAACyD,MAAF,CAAS7K,KAArB;;AAEA,QAAI4K,IAAI,KAAK,WAAb,EAA0B;AACxBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmB9K,SAAnB,GAA+BF,KAA/B,CADwB,CAExB;;AACA,UAAImL,KAAK,GAAGrH,cAAZ;AACA,UAAIsH,SAAS,GAAGvN,YAAY,CAACmC,KAAD,CAAZ,GAAsB,IAAtB,GAA6B,KAA7C;AACAmL,MAAAA,KAAK,CAACH,GAAD,CAAL,GAAaI,SAAb;AACArH,MAAAA,iBAAiB,CAACoH,KAAK,CAACrD,KAAN,EAAD,CAAjB,CANwB,CAOxB;;AACA,UAAI2C,GAAG,GAAG9G,SAAV;AACA,UAAI+G,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACA9G,MAAAA,YAAY,CAAC6G,GAAG,CAAC3C,KAAJ,EAAD,CAAZ;AACD;;AAED,QAAI8C,IAAI,KAAK,UAAb,EAAyB;AACvBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmB7K,QAAnB,GAA8BH,KAA9B,CADuB,CAEvB;;AACA,UAAImL,KAAK,GAAGjH,gBAAZ;AACA,UAAIkH,SAAS,GAAGvN,YAAY,CAACmC,KAAD,CAAZ,GAAsB,IAAtB,GAA6B,KAA7C;AACAmL,MAAAA,KAAK,CAACH,GAAD,CAAL,GAAaI,SAAb;AACAjH,MAAAA,mBAAmB,CAACgH,KAAK,CAACrD,KAAN,EAAD,CAAnB,CANuB,CAOvB;;AACA,UAAI2C,GAAG,GAAGzG,WAAV;AACA,UAAI0G,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACAzG,MAAAA,cAAc,CAACwG,GAAG,CAAC3C,KAAJ,EAAD,CAAd;AACD;;AAED,QAAI8C,IAAI,KAAK,iBAAb,EAAgC;AAC9BK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmB5K,eAAnB,GAAqCJ,KAArC,CAD8B,CAE9B;;AACA,UAAIyK,GAAG,GAAGnG,cAAV;AACA,UAAIoG,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACAnG,MAAAA,iBAAiB,CAACkG,GAAG,CAAC3C,KAAJ,EAAD,CAAjB,CAN8B,CAO9B;;AACA,UAAIqC,MAAM,GAAG/F,iBAAb;AACA,UAAIiH,UAAU,GAAGrN,aAAa,CAACgC,KAAD,CAAb,GAAuB,KAAvB,GAA+B,IAAhD;AACA,UAAI,CAAClC,WAAW,CAACkC,KAAD,CAAhB,EAAyBqL,UAAU,GAAG,KAAb;AACzBlB,MAAAA,MAAM,CAACa,GAAD,CAAN,GAAcK,UAAd;AACAhH,MAAAA,oBAAoB,CAAC8F,MAAM,CAACrC,KAAP,EAAD,CAApB;AACD;;AAED,QAAI8C,IAAI,KAAK,QAAb,EAAuBK,aAAa,CAACD,GAAD,CAAb,CAAmB3K,MAAnB,GAA4BL,KAA5B;AACvB,QAAI4K,IAAI,KAAK,WAAb,EAA0BK,aAAa,CAACD,GAAD,CAAb,CAAmBtK,SAAnB,GAA+BV,KAA/B;;AAE1B,QAAI4K,IAAI,KAAK,aAAb,EAA4B;AAC1B,UAAIU,qBAAqB,GAAGlE,CAAC,CAACyD,MAAF,CAASU,OAAT,CAAiBnE,CAAC,CAACyD,MAAF,CAASW,aAA1B,EAAyCC,IAArE;AACAR,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBzK,WAAnB,GAAiC+K,qBAAjC;AACAL,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBxK,eAAnB,GAAqCR,KAArC;AACD;;AAED,QAAI4K,IAAI,KAAK,MAAb,EAAqB;AACnBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBrK,IAAnB,GAA0BX,KAA1B,CADmB,CAEnB;;AACA,UAAIyK,GAAG,GAAGjG,YAAV;AACA,UAAIkG,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACAjG,MAAAA,eAAe,CAACgG,GAAG,CAAC3C,KAAJ,EAAD,CAAf;AACD;;AAED,QAAI8C,IAAI,KAAK,QAAb,EAAuB;AACrBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBpK,MAAnB,GAA4BZ,KAA5B,CADqB,CAErB;;AACA,UAAIyK,GAAG,GAAG7F,YAAV;AACA,UAAI8F,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACA7F,MAAAA,eAAe,CAAC4F,GAAG,CAAC3C,KAAJ,EAAD,CAAf;AACD;;AAED,QAAI8C,IAAI,KAAK,OAAb,EAAsB;AACpBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBnK,KAAnB,GAA2Bb,KAA3B,CADoB,CAEpB;;AACA,UAAIyK,GAAG,GAAGzF,aAAV;AACA,UAAI0F,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACAzF,MAAAA,gBAAgB,CAACwF,GAAG,CAAC3C,KAAJ,EAAD,CAAhB;AACD;;AAED,QAAI8C,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,QAA5B,IAAwCA,IAAI,KAAK,OAArD,EAA8D;AAC5DK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBvK,SAAnB,GACEwK,aAAa,CAACD,GAAD,CAAb,CAAmBnK,KAAnB,GACA,GADA,GAEAoK,aAAa,CAACD,GAAD,CAAb,CAAmBpK,MAFnB,GAGA,GAHA,GAIAqK,aAAa,CAACD,GAAD,CAAb,CAAmBrK,IALrB;AAMD;;AAED,QAAIiK,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,QAA5B,IAAwCA,IAAI,KAAK,OAArD,EAA8D;AAC5D,UAAIA,IAAI,KAAK,MAAb,EAAqBK,aAAa,CAACD,GAAD,CAAb,CAAmB9J,IAAnB,GAA0BlB,KAA1B;AACrB,UAAI4K,IAAI,KAAK,QAAb,EAAuBK,aAAa,CAACD,GAAD,CAAb,CAAmB7J,MAAnB,GAA4BnB,KAA5B;AACvB,UAAI4K,IAAI,KAAK,OAAb,EAAsBK,aAAa,CAACD,GAAD,CAAb,CAAmB5J,KAAnB,GAA2BpB,KAA3B;AACtBiL,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBhK,sBAAnB,GACEiK,aAAa,CAACD,GAAD,CAAb,CAAmB5J,KAAnB,GACA,GADA,GAEA6J,aAAa,CAACD,GAAD,CAAb,CAAmB7J,MAFnB,GAGA,GAHA,GAIA8J,aAAa,CAACD,GAAD,CAAb,CAAmB9J,IALrB;AAMD;;AAED,QAAI0J,IAAI,KAAK,UAAb,EAAyBK,aAAa,CAACD,GAAD,CAAb,CAAmBlK,QAAnB,GAA8BgI,QAAQ,CAAC9I,KAAD,CAAtC;;AAEzB,QAAI4K,IAAI,KAAK,YAAb,EAA2B;AACzBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBjK,UAAnB,GAAgCf,KAAhC,CADyB,CAExB;;AACA,UAAIyK,GAAG,GAAGjF,gBAAV;AACA,UAAIkF,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACAjF,MAAAA,mBAAmB,CAACgF,GAAG,CAAC3C,KAAJ,EAAD,CAAnB;AAEF;;AAED,QAAI8C,IAAI,KAAK,wBAAb,EACEK,aAAa,CAACD,GAAD,CAAb,CAAmBhK,sBAAnB,GAA4ChB,KAA5C;;AAEF,QAAI4K,IAAI,KAAK,WAAb,EAA2B;AACzBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmB3J,SAAnB,GAA+BrB,KAA/B,CADyB,CAEzB;;AACA,UAAI0L,OAAO,GAAGtG,oBAAd;AACAuG,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAiC1N,QAAQ,CAAC8B,KAAD,CAAzC;AACA,UAAI6L,WAAW,GAAG3N,QAAQ,CAAC8B,KAAD,CAAR,GAAkB,KAAlB,GAA0B,IAA5C;AACA0L,MAAAA,OAAO,CAACV,GAAD,CAAP,GAAea,WAAf;AACAxG,MAAAA,uBAAuB,CAACqG,OAAO,CAAC5D,KAAR,EAAD,CAAvB,CAPyB,CAQzB;;AACA,UAAI2C,GAAG,GAAGvF,iBAAV;AACA,UAAIwF,OAAO,GAAG5M,WAAW,CAACkC,KAAD,CAAX,GAAqB,KAArB,GAA6B,IAA3C;AACAyK,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWN,OAAX;AACAvF,MAAAA,oBAAoB,CAACsF,GAAG,CAAC3C,KAAJ,EAAD,CAApB;AACD;;AAED,QAAI8C,IAAI,KAAK,MAAb,EAAqB;AACnBK,MAAAA,aAAa,CAACD,GAAD,CAAb,CAAmBzJ,IAAnB,GAA0BuH,QAAQ,CAAC9I,KAAD,CAAlC;AACA,UAAIiL,aAAa,CAACD,GAAD,CAAb,CAAmBvN,UAAnB,KAAkC,OAAtC,EACEwN,aAAa,CAACD,GAAD,CAAb,CAAmBxJ,KAAnB,GAA2BjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyBzB,KAAK,GAAG,CAAjC,EAAoCH,KAA/D;AACF,UAAIoL,aAAa,CAACD,GAAD,CAAb,CAAmBvN,UAAnB,KAAkC,QAAtC,EACEwN,aAAa,CAACD,GAAD,CAAb,CAAmBxJ,KAAnB,GAA2BjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyBzB,KAAK,GAAG,CAAjC,EAAoCuC,MAA/D;AACF,UAAI0I,aAAa,CAACD,GAAD,CAAb,CAAmBvN,UAAnB,KAAkC,QAAtC,EACEwN,aAAa,CAACD,GAAD,CAAb,CAAmBxJ,KAAnB,GAA2BjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyBzB,KAAK,GAAG,CAAjC,EAAoC0C,MAA/D;AACF,UAAIuI,aAAa,CAACD,GAAD,CAAb,CAAmBvN,UAAnB,KAAkC,QAAtC,EACEwN,aAAa,CAACD,GAAD,CAAb,CAAmBxJ,KAAnB,GAA2BjC,UAAU,CAAC,CAAD,CAAV,CAAckC,UAAd,CAAyBzB,KAAK,GAAG,CAAjC,EAAoC6C,MAA/D;AACH;;AACDM,IAAAA,aAAa,CAAC8H,aAAD,CAAb;AACD,GAhjCuB,CAkjCxB;;;AACA,WAASa,qBAAT,CAA+B1E,CAA/B,EAAkC;AAChCpI,IAAAA,YAAY,CAACoI,CAAC,CAACyD,MAAF,CAASkB,OAAV,CAAZ;AACA7M,IAAAA,gBAAgB,CAACkI,CAAC,CAACyD,MAAF,CAASkB,OAAV,CAAhB;AACD;;AAEDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBxI,QAAxB;AACAuI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B1I,UAA1B;AACFyI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA2BzM,UAA3B;AACE,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAG,IAAA,SAAS,EAAC;AAAb,KACE,MAAC,qBAAD,OADF,4JADF,EAKE,MAAC,OAAD,QACE,MAAC,WAAD,QACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,mGADF,EAEE,qBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,GAFR;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,OAAO,EAAEV,GAJX;AAKE,IAAA,QAAQ,EAAEqI;AALZ,IADF,EAQE;AAAM,IAAA,SAAS,EAAC;AAAhB,IARF,EASE,+CATF,CAFF,EAaE,qBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,KAAK,EAAC,GAHR;AAIE,IAAA,OAAO,EAAEnI,MAJX;AAKE,IAAA,QAAQ,EAAEoI;AALZ,IADF,EAQE;AAAM,IAAA,SAAS,EAAC;AAAhB,IARF,EASE,qDATF,CAbF,EAwBE,qBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,KAAK,EAAC,GAHR;AAIE,IAAA,OAAO,EAAElI,MAJX;AAKE,IAAA,QAAQ,EAAEmI;AALZ,IADF,EAQE;AAAM,IAAA,SAAS,EAAC;AAAhB,IARF,EASE,6IATF,CAxBF,CADF,EAqCE,MAAC,IAAD,QACGvI,GAAG,GACF,MAAC,GAAD;AAAK,IAAA,IAAI;AAAT,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,wCADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EACHiH,kBAAkB,IAAIE,wBAAtB,GACI9C,WADJ,GAEI,EAJR;AAME,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,OAAJ,CAN3B;AAOE,IAAA,KAAK,EAAEhE,QAAQ,CAACG,KAPlB;AAQE,IAAA,IAAI,EAAC,OARP;AASE,IAAA,IAAI,EAAC,YATP;AAUE,IAAA,EAAE,EAAC;AAVL,IAFF,EAcGmC,kBAAkB,GACjB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,kGADiB,GAMjB,EApBJ,EAsBGE,wBAAwB,GACvB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,oHADuB,GAMvB,EA5BJ,CADF,CADF,CADE,GAqCF,4BACGjH,MAAM,GACL,MAAC,GAAD;AAAK,IAAA,IAAI;AAAT,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,4BADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEmH,iBAAiB,GAAGhD,WAAH,GAAiB,EAD3C;AAEE,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,WAAJ,CAF3B;AAGE,IAAA,KAAK,EAAEhE,QAAQ,CAAClD,SAHlB;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,IAAI,EAAC,WALP;AAME,IAAA,EAAE,EAAC;AANL,IAFF,EAUG4F,iBAAiB,GAChB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,sFADgB,GAMhB,EAhBJ,CADF,CADF,EAsBE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,6EADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEE,mBAAmB,GAAGlD,WAAH,GAAiB,EAD7C;AAEE,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,UAAJ,CAF3B;AAGE,IAAA,KAAK,EAAEhE,QAAQ,CAACjD,QAHlB;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,IAAI,EAAC,aALP;AAME,IAAA,EAAE,EAAC;AANL,IAFF,EAUG6F,mBAAmB,GAClB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,uIADkB,GAMlB,EAhBJ,CADF,CAtBF,EA2CE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,8CADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EACHE,mBAAmB,IAAIE,yBAAvB,GACItD,WADJ,GAEI,EAJR;AAME,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,cAAJ,CAN3B;AAOE,IAAA,KAAK,EAAEhE,QAAQ,CAACI,YAPlB;AAQE,IAAA,IAAI,EAAC,OARP;AASE,IAAA,IAAI,EAAC,aATP;AAUE,IAAA,EAAE,EAAC;AAVL,IAFF,EAcG0C,mBAAmB,GAClB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,wGADkB,GAMlB,EApBJ,EAsBGE,yBAAyB,GACxB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,0HADwB,GAMxB,EA5BJ,CADF,CA3CF,EA4EE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,wCADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EACHV,kBAAkB,IAAIE,wBAAtB,GACI9C,WADJ,GAEI,EAJR;AAME,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,OAAJ,CAN3B;AAOE,IAAA,KAAK,EAAEhE,QAAQ,CAACG,KAPlB;AAQE,IAAA,IAAI,EAAC,OARP;AASE,IAAA,IAAI,EAAC,aATP;AAUE,IAAA,EAAE,EAAC;AAVL,IAFF,EAcGmC,kBAAkB,GACjB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,kGADiB,GAMjB,EApBJ,EAsBGE,wBAAwB,GACvB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,oHADuB,GAMvB,EA5BJ,CADF,CA5EF,CADK,GAgHL,MAAC,GAAD;AAAK,IAAA,IAAI;AAAT,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,wCADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EACHF,kBAAkB,IAAIE,wBAAtB,GACI9C,WADJ,GAEI,EAJR;AAME,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,OAAJ,CAN3B;AAOE,IAAA,KAAK,EAAEhE,QAAQ,CAACG,KAPlB;AAQE,IAAA,IAAI,EAAC,OARP;AASE,IAAA,IAAI,EAAC,aATP;AAUE,IAAA,EAAE,EAAC;AAVL,IAFF,EAcGmC,kBAAkB,GACjB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,kGADiB,GAMjB,EApBJ,EAsBGE,wBAAwB,GACvB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,oHADuB,GAMvB,EA5BJ,CADF,CADF,EAkCE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,8CADF,EAEE,MAAC,KAAD;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,KAAK,EACHU,aAAa,IAAIhC,cAAjB,GAAkCxB,WAAlC,GAAgD,EAHpD;AAKE,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,cAAJ,CAL3B;AAME,IAAA,KAAK,EAAEhE,QAAQ,CAACI,YANlB;AAOE,IAAA,IAAI,EAAC,MAPP;AAQE,IAAA,IAAI,EAAC,cARP;AASE,IAAA,EAAE,EAAC;AATL,IAFF,EAaG8C,aAAa,GACZ;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,+LADY,GAMZ,EAnBJ,CADF,EAuBE;AAAM,IAAA,SAAS,EAAC;AAAhB,oBAvBF,CAlCF,EA2DE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAT,KACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,IAAA,GAAG,EAAC;AAAX,mFADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEA,aAAa,GAAGxD,WAAH,GAAiB,EADvC;AAEE,IAAA,QAAQ,EAAEsE,CAAC,IAAIuD,UAAU,CAACvD,CAAD,EAAI,MAAJ,CAF3B;AAGE,IAAA,KAAK,EAAEhE,QAAQ,CAACM,IAHlB;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,EAAE,EAAC;AANL,IAFF,EAUG4C,aAAa,GACZ;AAAM,IAAA,SAAS,EAAC;AAAhB,KACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAC;AAAnB,IADF,+LADY,GAMZ,EAhBJ,CADF,CA3DF,CAjHJ,CAtCJ,CArCF,EAkRE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAC;AAAT,KACGpD,UAAU,CAACnD,GAAX,CAAe,CAACiM,MAAD,EAAShB,GAAT,KAAiB;AAC/B,WACE;AAAK,MAAA,GAAG,EAAEiB,QAAQ,CAACC,QAAT;AAAV,OACE,iBADF,EAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,uDACS1O,SAAS,CAACwN,GAAG,GAAG,CAAP,CADlB,QAC+B,GAD/B,EAEGvN,UAAU,CAACuO,MAAM,CAACvO,UAAR,CAFb,CADF,CAFF,EAQE,MAAC,GAAD;AAAK,MAAA,IAAI;AAAT,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,8BADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EACHkG,SAAS,CAACqH,GAAD,CAAT,IAAkBlH,cAAc,CAACkH,GAAD,CAAhC,GACIlI,WADJ,GAEI,EAJR;AAME,MAAA,IAAI,EAAC,MANP;AAOE,MAAA,KAAK,EAAEkJ,MAAM,CAAC9L,SAPhB;AAQE,MAAA,QAAQ,EAAEkH,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,WAAT,CARlC;AASE,MAAA,IAAI,EAAC,WATP;AAUE,MAAA,EAAE,EAAC,WAVL;AAWE,MAAA,WAAW,EAAC;AAXd,MAFF,EAeGrH,SAAS,CAACqH,GAAD,CAAT,GACC;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,mGAC+C,GAD/C,CADD,GAKC,EApBJ,EAsBGlH,cAAc,CAACkH,GAAD,CAAd,GACC;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,oBAAD;AAAsB,MAAA,IAAI,EAAC;AAA3B,MADF,oGAEM,GAFN,CADD,GAMC,EA5BJ,CADF,CADF,EAkCE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,+EADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EACHhH,WAAW,CAACgH,GAAD,CAAX,IAAoB9G,gBAAgB,CAAC8G,GAAD,CAApC,GACIlI,WADJ,GAEI,EAJR;AAME,MAAA,IAAI,EAAC,MANP;AAOE,MAAA,KAAK,EAAEkJ,MAAM,CAAC7L,QAPhB;AAQE,MAAA,QAAQ,EAAEiH,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,UAAT,CARlC;AASE,MAAA,IAAI,EAAC,UATP;AAUE,MAAA,EAAE,EAAC,UAVL;AAWE,MAAA,WAAW,EAAC;AAXd,MAFF,EAeGhH,WAAW,CAACgH,GAAD,CAAX,GACC;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,oJAEW,GAFX,CADD,GAMC,EArBJ,EAuBG9G,gBAAgB,CAAC8G,GAAD,CAAhB,GACC;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,oBAAD;AAAsB,MAAA,IAAI,EAAC;AAA3B,MADF,qJAEiB,GAFjB,CADD,GAMC,EA7BJ,CADF,CAlCF,EAoEE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,0CADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgB,MAAM,CAAC3L,MADhB;AAEE,MAAA,QAAQ,EAAE+G,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,QAAT,CAFlC;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,IAAI,EAAC,QAJP;AAKE,MAAA,EAAE,EAAC,QALL;AAME,MAAA,WAAW,EAAC;AANd,OAQE;AAAQ,MAAA,KAAK,EAAE;AAAf,sBARF,EASE;AAAQ,MAAA,KAAK,EAAE;AAAf,4BATF,CAFF,CADF,CApEF,EAoFE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,oCADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgB,MAAM,CAACzK,IADhB;AAEE,MAAA,QAAQ,EAAE6F,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,MAAT,CAFlC;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,EAAE,EAAC;AALL,OAOGtE,SAAS,CAAC3G,GAAV,CAAc,CAACoM,CAAD,EAAInC,KAAJ,KAAc;AAC3B,aACE;AAAQ,QAAA,KAAK,EAAEA,KAAK,GAAG;AAAvB,SAA2BA,KAAK,GAAG,CAAnC,CADF;AAGD,KAJA,CAPH,CAFF,CADF,CApFF,EAsGE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,gDADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgC,MAAM,CAACxL,eADhB;AAEE,MAAA,QAAQ,EAAE4G,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,aAAT,CAHrB;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,IAAI,EAAC,aANP;AAOE,MAAA,EAAE,EAAC,aAPL;AAQE,MAAA,WAAW,EAAC;AARd,OAUG3N,SAAS,CAAC0C,GAAV,CAAcqM,GAAG,IAAI;AACpB,aACE;AACE,QAAA,GAAG,EAAEA,GAAG,CAACC,IAAJ,CAASH,QAAT,EADP;AAEE,QAAA,KAAK,EAAEE,GAAG,CAACC;AAFb,SAIGD,GAAG,CAACE,IAJP,CADF;AAQD,KATA,CAVH,CAFF,CADF,CAtGF,EAiIE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,gDADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EACHhI,cAAc,CAAC0G,GAAD,CAAd,IAAuB5G,iBAAiB,CAAC4G,GAAD,CAAxC,GACIlI,WADJ,GAEI,EAJR;AAME,MAAA,KAAK,EAAEkJ,MAAM,CAAC5L,eANhB;AAOE,MAAA,QAAQ,EAAEgH,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,iBAAT,CARrB;AAUE,MAAA,IAAI,EAAC,MAVP;AAWE,MAAA,IAAI,EAAC,iBAXP;AAYE,MAAA,EAAE,EAAC,iBAZL;AAaE,MAAA,WAAW,EAAC;AAbd,MAFF,EAiBG1G,cAAc,CAAC0G,GAAD,CAAd,GACC;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,wGADD,GAMC,EAvBJ,EAyBG5G,iBAAiB,CAAC4G,GAAD,CAAjB,GACC;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,0HADD,GAMC,EA/BJ,CADF,CAjIF,EAqKE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,mEADF,EAEE,MAAC,GAAD;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EACHxG,YAAY,CAACwG,GAAD,CAAZ,IAAqBtG,eAAe,CAACsG,GAAD,CAApC,GACIlI,WADJ,GAEI,EAJR;AAME,MAAA,KAAK,EAAEkJ,MAAM,CAACrL,IANhB;AAOE,MAAA,QAAQ,EAAEyG,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,MAAT,CAPlC;AAQE,MAAA,IAAI,EAAC,MARP;AASE,MAAA,IAAI,EAAC,MATP;AAUE,MAAA,EAAE,EAAC,MAVL;AAWE,MAAA,WAAW,EAAC;AAXd,MADF,EAcGxG,YAAY,CAACwG,GAAD,CAAZ,GACC;AACE,MAAA,SAAS,EAAC,wBADZ;AAEE,MAAA,KAAK,EAAE;AAAEuB,QAAAA,QAAQ,EAAE;AAAZ;AAFT,6GADD,GAOG7H,eAAe,CAACsG,GAAD,CAAf,GACF;AACE,MAAA,SAAS,EAAC,wBADZ;AAEE,MAAA,KAAK,EAAE;AAAEuB,QAAAA,QAAQ,EAAE;AAAZ;AAFT,0GADE,GAQF,EA7BJ,CADF,EAkCE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EACH3H,YAAY,CAACoG,GAAD,CAAZ,IAAqBlG,eAAe,CAACkG,GAAD,CAApC,GACIlI,WADJ,GAEI,EAJR;AAME,MAAA,KAAK,EAAEkJ,MAAM,CAACpL,MANhB;AAOE,MAAA,QAAQ,EAAEwG,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,QAAT,CAPlC;AAQE,MAAA,IAAI,EAAC,MARP;AASE,MAAA,IAAI,EAAC,QATP;AAUE,MAAA,EAAE,EAAC,QAVL;AAWE,MAAA,WAAW,EAAC;AAXd,MADF,EAcGpG,YAAY,CAACoG,GAAD,CAAZ,GACC;AACE,MAAA,SAAS,EAAC,wBADZ;AAEE,MAAA,KAAK,EAAE;AAAEuB,QAAAA,QAAQ,EAAE;AAAZ;AAFT,6GADD,GAOGzH,eAAe,CAACkG,GAAD,CAAf,GACF;AACE,MAAA,SAAS,EAAC,wBADZ;AAEE,MAAA,KAAK,EAAE;AAAEuB,QAAAA,QAAQ,EAAE;AAAZ;AAFT,0GADE,GAQF,EA7BJ,CAlCF,EAmEE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEvH,aAAa,CAACgG,GAAD,CAAb,GAAqBlI,WAArB,GAAmC,EAD5C;AAEE,MAAA,KAAK,EAAEkJ,MAAM,CAACnL,KAFhB;AAGE,MAAA,QAAQ,EAAEuG,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,OAAT,CAHlC;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,IAAI,EAAC,OALP;AAME,MAAA,EAAE,EAAC,OANL;AAOE,MAAA,WAAW,EAAC;AAPd,MADF,EAUGhG,aAAa,CAACgG,GAAD,CAAb,GACC;AACE,MAAA,SAAS,EAAC,wBADZ;AAEE,MAAA,KAAK,EAAE;AAAEuB,QAAAA,QAAQ,EAAE;AAAZ;AAFT,6GADD,GAQC,EAlBJ,CAnEF,EAyFE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEP,MAAM,CAACtL,SADhB;AAEE,MAAA,QAAQ,EAAE0G,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,WAAT,CAHrB;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,IAAI,EAAC,WANP;AAOE,MAAA,EAAE,EAAC;AAPL,OASE;AAAQ,MAAA,KAAK,EAAE;AAAf,kCATF,EAUE;AAAQ,MAAA,KAAK,EAAE;AAAf,8CAVF,CADF,CAzFF,CAFF,CArKF,EAgRE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,2CADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgB,MAAM,CAAClL,QADhB;AAEE,MAAA,QAAQ,EAAEsG,CAAC,IAAI2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,UAAT,CAFlC;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,EAAE,EAAC,aALL;AAME,MAAA,WAAW,EAAC;AANd,OAQE;AAAQ,MAAA,KAAK,EAAE;AAAf,yCARF,EASE;AAAQ,MAAA,KAAK,EAAE;AAAf,mFATF,CAFF,CADF,CAhRF,EAgSGgB,MAAM,CAAClL,QAAP,GACC,4BACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,qFADF,EAEE,MAAC,KAAD;AACA,MAAA,KAAK,EACH0E,gBAAgB,CAACwF,GAAD,CAAhB,GACIlI,WADJ,GAEI,EAJN;AAME,MAAA,KAAK,EAAEkJ,MAAM,CAACjL,UANhB;AAOE,MAAA,QAAQ,EAAEqG,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,YAAT,CARrB;AAUE,MAAA,IAAI,EAAC,MAVP;AAWE,MAAA,IAAI,EAAC,YAXP;AAYE,MAAA,EAAE,EAAC,YAZL;AAaE,MAAA,WAAW,EAAC;AAbd,MAFF,EAiBIxF,gBAAgB,CAACwF,GAAD,CAAhB,GACF;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,0JACyD,GADzD,CADE,GAKF,EAtBF,CADF,CADF,EA4BE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,2FADF,EAIE,MAAC,GAAD;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgB,MAAM,CAAC9K,IADhB;AAEE,MAAA,QAAQ,EAAEkG,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,MAAT,CAHrB;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,IAAI,EAAC,MANP;AAOE,MAAA,EAAE,EAAC,MAPL;AAQE,MAAA,WAAW,EAAC;AARd,MADF,CADF,EAcE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgB,MAAM,CAAC7K,MADhB;AAEE,MAAA,QAAQ,EAAEiG,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,QAAT,CAHrB;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,IAAI,EAAC,QANP;AAOE,MAAA,EAAE,EAAC,QAPL;AAQE,MAAA,WAAW,EAAC;AARd,MADF,CAdF,EA2BE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgB,MAAM,CAAC5K,KADhB;AAEE,MAAA,QAAQ,EAAEgG,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,OAAT,CAHrB;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,IAAI,EAAC,OANP;AAOE,MAAA,EAAE,EAAC,OAPL;AAQE,MAAA,WAAW,EAAC;AARd,MADF,CA3BF,EAwCE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEgB,MAAM,CAAC/K,UADhB;AAEE,MAAA,QAAQ,EAAEmG,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,YAAT,CAHrB;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,IAAI,EAAC,YANP;AAOE,MAAA,EAAE,EAAC;AAPL,OASE;AAAQ,MAAA,KAAK,EAAE;AAAf,8CATF,EAUE;AAAQ,MAAA,KAAK,EAAE;AAAf,kCAVF,CADF,CAxCF,CAJF,CA5BF,CADD,GA2FC,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAT,OACE,MAAC,SAAD,QACE,MAAC,KAAD;AAAO,MAAA,GAAG,EAAC;AAAX,2CADF,EAEE,MAAC,KAAD;AACE,MAAA,KAAK,EACH9F,iBAAiB,CAAC8F,GAAD,CAAjB,IACA5F,oBAAoB,CAAC4F,GAAD,CADpB,IAC6B1F,oBAAoB,CAAC0F,GAAD,CADjD,GAEIlI,WAFJ,GAGI,EALR;AAOE,MAAA,KAAK,EAAEkJ,MAAM,CAAC3K,SAPhB;AAQE,MAAA,QAAQ,EAAE+F,CAAC,IACT2D,iBAAiB,CAAC3D,CAAD,EAAI4D,GAAJ,EAAS,WAAT,CATrB;AAWE,MAAA,IAAI,EAAC,MAXP;AAYE,MAAA,IAAI,EAAC,WAZP;AAaE,MAAA,EAAE,EAAC,WAbL;AAcE,MAAA,WAAW,EAAC;AAdd,MAFF,EAkBG9F,iBAAiB,CAAC8F,GAAD,CAAjB,GACC;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,gHACkD,GADlD,CADD,GAIG5F,oBAAoB,CAAC4F,GAAD,CAApB,GACF;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,mIACsD,GADtD,CADE,GAIA1F,oBAAoB,CAAC0F,GAAD,CAApB,GACF;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC;AAAnB,MADF,kJAC2D,GAD3D,CADE,GAKF,EA/BJ,CADF,CA3XJ,CARF,EAyaE,MAAC,GAAD,OAzaF,CADF;AA6aD,GA9aA,CADH,CAlRF,EAmsBE,iBAnsBF,EAosBE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,iBACE,MAAC,qBAAD,OADF,EAEE;AAAM,IAAA,SAAS,EAAC;AAAhB,0FAFF,CADF,EAKE;AAAO,IAAA,SAAS,EAAC;AAAjB,KACE,iGADF,kMAGE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,OAAO,EAAEjM,SAFX;AAGE,IAAA,QAAQ,EAAE+M;AAHZ,IAHF,EAQE;AAAM,IAAA,SAAS,EAAC;AAAhB,IARF,CALF,CApsBF,EAotBE,iBAptBF,EAqtBE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,+HADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAO,IAAA,SAAS,EAAC;AAAjB,KACE;AAAK,IAAA,GAAG,EAAEU,OAAO,CAAC,sBAAD;AAAjB,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,OAAO,EAAC,SAA5B;AAAsC,IAAA,IAAI,EAAC;AAA3C,IAFF,EAGE;AAAM,IAAA,SAAS,EAAC;AAAhB,IAHF,CADF,CAJF,CADF,EAaE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,8EADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,mBACE;AAAM,IAAA,SAAS,EAAC;AAAhB,kEADF,EAEE,oBACGvF,gBAAgB,CAAC1H,UAAU,CAAC,CAAD,CAAV,CAAckN,UAAf,CADnB,6BAFF,CADF,EAQE,mBACE;AAAM,IAAA,SAAS,EAAC;AAAhB,gGADF,EAEE,oBACGxF,gBAAgB,CAAC1H,UAAU,CAAC,CAAD,CAAV,CAAckN,UAAf,CADnB,6BAFF,CARF,EAeE,iBAfF,CAJF,EAqBE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,oEADF,EAGE,MAAC,UAAD;AAAY,IAAA,IAAI,EAAC;AAAjB,KACE,MAAC,KAAD,OADF,CAHF,EAME;AAAQ,IAAA,SAAS,EAAC;AAAlB,sCANF,CArBF,CAbF,EA2CE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,OAAO,EAAEtF,UAFX;AAGE,IAAA,SAAS,EAAC,eAHZ;AAIE,IAAA,QAAQ,EAAE,CAAChI,UAAD,IAAe,CAACF;AAJ5B,4CADF,EASE;AAAQ,IAAA,SAAS,EAAC;AAAlB,4CATF,CADF,CA3CF,CArtBF,CADF,CALF,CADF;AAyxBD,CAp1DD;;AAs1DA,MAAMyN,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAMpN,UAAU,GAAGoN,KAAK,CAACC,YAAN,CAAmBrN,UAAtC;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD,CAHD;;AAKA,eAAe/C,OAAO,CAACkQ,eAAD,CAAP,CAAyBnO,QAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n//redux\r\nimport { connect } from \"react-redux\";\r\n\r\n//UI Libraries\r\nimport { MDBCard, MDBCardBody } from \"mdbreact\";\r\nimport { IoIosWarning, IoMdInformationCircle } from \"react-icons/io\";\r\nimport { TiSortAlphabetically } from \"react-icons/ti\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  InputGroup,\r\n  Input\r\n} from \"reactstrap\";\r\n\r\n//components\r\nimport Countries from \"../../Countries\";\r\n\r\n//axios\r\nimport axios from \"axios\";\r\nimport Ports from \"../../ports\";\r\n\r\n//utilities\r\nimport {\r\n  numToWord,\r\n  personType,\r\n  latinOrPersianValidate,\r\n  requiredInput,\r\n  validateEmail,\r\n  just_persian,\r\n  isRealValue,\r\n  mobileFormatInputValidate,\r\n  mobile_format,\r\n  checkLimits,\r\n  isNumber,\r\n  mellicode_format\r\n} from \"../../Functions\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport moment from \"moment-jalaali\";\r\nimport { FaRegFlag } from \"react-icons/fa\";\r\n\r\nconst InfoForm = props => {\r\n  const [iAm, setIAm] = useState(true);\r\n  const [iAmnot, setIAmnot] = useState(false);\r\n  const [before, setBefore] = useState(false);\r\n  const [condotion, setCondotion] = useState(false);\r\n  const [condotionFlag, setCondotionFlag] = useState(false);\r\n  const [submitFlag, setSubmitFlag] = useState(false);\r\n  const [customerFlag, setcustomerFlag] = useState(true);\r\n  const { paymentObj } = props;\r\n  const [formAdult, setFormAdult] = useState(\r\n    new Array(Math.abs(paymentObj[0].Adult)).fill(0).map(\r\n      (value, i) =>\r\n        (value = {\r\n          personType: \"adult\",\r\n          FirstName: \"\",\r\n          LastName: \"\",\r\n          // PersianFirstName: \"ساسان\",\r\n          // PersianLastName: \"کریمی\",\r\n          CellPhoneNumber: \"\",\r\n          Gender: 1,\r\n          AgeRange: 0,\r\n          Nationality: \"IRAN\",\r\n          NationalityCode: \"IR\",\r\n          BirthDate: \"\",\r\n          birthType: 0,\r\n          bDay: \"\",\r\n          bMonth: \"\",\r\n          bYear: \"\",\r\n          cardType: 0,\r\n          PassportNo: \"\",\r\n          PassportExpirationDate: \"\",\r\n          passExType: 1,\r\n          pDay: \"\",\r\n          pMonth: \"\",\r\n          pYear: \"\",\r\n          melliCode: \"\",\r\n          Type: \"Package\",\r\n          Room: 1,\r\n          Price: paymentObj[0].RoomPrices[0].Adult,\r\n          PackageFlightId: paymentObj[0].FlightID,\r\n          Insurance: paymentObj[0].Insurance,\r\n          InsuranceId: paymentObj[0].InsuranceId,\r\n          //default insurance price is adult\r\n          InsurancePrice: paymentObj[0].InsuranceAdultPrice,\r\n          Visa: paymentObj[0].Visa,\r\n          VisaPrice: paymentObj[0].VisaPrice,\r\n          VisaID: paymentObj[0].VisaId,\r\n          //i dont know about type and value of Services data.(just for exist for Api)\r\n          Services: paymentObj[0].Services\r\n        })\r\n    )\r\n  );\r\n  const [formChild1, setFormChild1] = useState(\r\n    new Array(Math.abs(paymentObj[0].Child1)).fill(0).map(\r\n      (value, i) =>\r\n        (value = {\r\n          personType: \"child1\",\r\n          FirstName: \"\",\r\n          LastName: \"\",\r\n          // PersianFirstName: \"\",\r\n          // PersianLastName: \"\",\r\n          CellPhoneNumber: \"\",\r\n          Gender: 1,\r\n          AgeRange: 1,\r\n          Nationality: \"IRAN\",\r\n          NationalityCode: \"IR\",\r\n          BirthDate: \"\",\r\n          birthType: 0,\r\n          bDay: \"\",\r\n          bMonth: \"\",\r\n          bYear: \"\",\r\n          cardType: 0,\r\n          PassportNo: \"\",\r\n          PassportExpirationDate: \"\",\r\n          passExType: 1,\r\n          pDay: \"\",\r\n          pMonth: \"\",\r\n          pYear: \"\",\r\n          melliCode: \"\",\r\n          Type: \"Package\",\r\n          Room: 1,\r\n          Price: paymentObj[0].RoomPrices[0].Child1,\r\n          PackageFlightId: paymentObj[0].FlightID,\r\n          Insurance: paymentObj[0].Insurance,\r\n          InsuranceId: paymentObj[0].InsuranceId,\r\n          //default insurance price is adult\r\n          InsurancePrice: paymentObj[0].InsuranceAdultPrice,\r\n          Visa: paymentObj[0].Visa,\r\n          VisaPrice: paymentObj[0].VisaPrice,\r\n          VisaID: paymentObj[0].VisaId,\r\n          //i dont know about type and value of Services data.(just for exist for Api)\r\n          Services: paymentObj[0].Services\r\n        })\r\n    )\r\n  );\r\n  const [formChild2, setFormChild2] = useState(\r\n    new Array(Math.abs(paymentObj[0].Child2)).fill(0).map(\r\n      (value, i) =>\r\n        (value = {\r\n          personType: \"child2\",\r\n          FirstName: \"\",\r\n          LastName: \"\",\r\n          // PersianFirstName: \"\",\r\n          // PersianLastName: \"\",\r\n          CellPhoneNumber: \"\",\r\n          Gender: 1,\r\n          AgeRange: 2,\r\n          Nationality: \"IRAN\",\r\n          NationalityCode: \"IR\",\r\n          BirthDate: \"\",\r\n          birthType: 0,\r\n          bDay: \"\",\r\n          bMonth: \"\",\r\n          bYear: \"\",\r\n          cardType: 0,\r\n          PassportNo: \"\",\r\n          PassportExpirationDate: \"\",\r\n          passExType: 1,\r\n          pDay: \"\",\r\n          pMonth: \"\",\r\n          pYear: \"\",\r\n          melliCode: \"\",\r\n          Type: \"Package\",\r\n          Room: 1,\r\n          Price: paymentObj[0].RoomPrices[0].Child2,\r\n          PackageFlightId: paymentObj[0].FlightID,\r\n          Insurance: paymentObj[0].Insurance,\r\n          InsuranceId: paymentObj[0].InsuranceId,\r\n          //default insurance price is adult\r\n          InsurancePrice: paymentObj[0].InsuranceAdultPrice,\r\n          Visa: paymentObj[0].Visa,\r\n          VisaPrice: paymentObj[0].VisaPrice,\r\n          VisaID: paymentObj[0].VisaId\r\n        })\r\n    )\r\n  );\r\n  const [formInfant, setFormInfant] = useState(\r\n    new Array(Math.abs(paymentObj[0].Infant)).fill(0).map(\r\n      (value, i) =>\r\n        (value = {\r\n          personType: \"infant\",\r\n          FirstName: \"\",\r\n          LastName: \"\",\r\n          // PersianFirstName: \"\",\r\n          // PersianLastName: \"\",\r\n          CellPhoneNumber: \"\",\r\n          Gender: 1,\r\n          AgeRange: 3,\r\n          Nationality: \"IRAN\",\r\n          NationalityCode: \"IR\",\r\n          BirthDate: \"\",\r\n          birthType: 0,\r\n          bDay: \"\",\r\n          bMonth: \"\",\r\n          bYear: \"\",\r\n          cardType: 0,\r\n          PassportNo: \"\",\r\n          PassportExpirationDate: \"\",\r\n          passExType: 1,\r\n          pDay: \"\",\r\n          pMonth: \"\",\r\n          pYear: \"\",\r\n          melliCode: \"\",\r\n          Type: \"Package\",\r\n          Room: 1,\r\n          Price: paymentObj[0].RoomPrices[0].Infant,\r\n          PackageFlightId: paymentObj[0].FlightID,\r\n          InsuranceId: paymentObj[0].InsuranceId,\r\n          Insurance: paymentObj[0].Insurance,\r\n          //default insurance price is adult\r\n          InsurancePrice: paymentObj[0].InsuranceAdultPrice,\r\n          Visa: paymentObj[0].Visa,\r\n          VisaPrice: paymentObj[0].VisaPrice,\r\n          VisaID: paymentObj[0].VisaId\r\n        })\r\n    )\r\n  );\r\n  const errorBorder = {\r\n    border: \"1px solid red\"\r\n  };\r\n  const allPassengers = formAdult.concat(formChild1, formChild2, formInfant);\r\n  const [passengers, setPassengers] = useState(allPassengers);\r\n  const [customer, setCustomer] = useState({\r\n    CustomerId: \"\",\r\n    FirstName: \"\",\r\n    LastName: \"\",\r\n    Email: \"\",\r\n    MobileNumber: \"\",\r\n    From: \"Site\",\r\n    Code: \"\"\r\n  });\r\n\r\n  //errors of passengers\r\n  const [nameError, setNameError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [latinNameError, setLatinNameError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [familyError, setFamilyError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [latinFamilyError, setLatinFamilyError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [mobileFormatError, setMobileFormatError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [mobileReqError, setMobileReqError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [bDayReqError, setBDayReqError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [bDayFormatError, setBDayFormatError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [bMonReqError, setBMonReqError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [bMonFormatError, setBMonFormatError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [bYearReqError, setBYearReqError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [mellicodeReqErroe, setMellicodeReqErroe] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [mellicodeFormatError, setMellicodeFormatError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [mellicodeLengthError, setMellicodeLengthError] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n  const [passportReqErroe, setPassportReqErroe] = useState(\r\n    new Array(allPassengers.length).fill(false)\r\n  );\r\n\r\n  //erros of customer\r\n  const [submiterEmailError, setSubmiterEmailError] = useState(false);\r\n  const [submiterEmailFormatError, setSubmiterEmailFormatError] = useState(\r\n    false\r\n  );\r\n  const [submiterNameError, setSubmiterNameError] = useState(false);\r\n  const [submiterFamilyError, setSubmiterFamilyError] = useState(false);\r\n  const [submiterMobileError, setSubmiterMobileError] = useState(false);\r\n  const [submiterMobileFormatError, setSubmiterMobileFormatError] = useState(\r\n    false\r\n  );\r\n  const [contractError, setContractError] = useState(false);\r\n  const [customerType, setCustomerType] = useState(0);\r\n  const roomCount = props.searchParams.roomRules.split(\",\");\r\n\r\n  //one of passengers\r\n  function onSetIamChanged() {\r\n    setIAmnot(false);\r\n    setBefore(false);\r\n    setIAm(true);\r\n    setCustomerType(0);\r\n  }\r\n\r\n  //not one of passengers\r\n  function onSetIamNotChanged() {\r\n    setIAm(false);\r\n    setBefore(false);\r\n    setIAmnot(true);\r\n    setCustomerType(1);\r\n  }\r\n\r\n  //old customer\r\n  function onSetBeforeChanged() {\r\n    setIAm(false);\r\n    setIAmnot(false);\r\n    setBefore(true);\r\n    setCustomerType(2);\r\n  }\r\n\r\n  //Utility\r\n  function HotelPriceFormat(num) {\r\n    return (\r\n      <NumberFormat\r\n        value={num}\r\n        displayType={\"text\"}\r\n        thousandSeparator={true}\r\n        renderText={num => <div>{num}</div>}\r\n      />\r\n    );\r\n  }\r\n\r\n  //handel customer and passenger forms\r\n  async function handleForm(e) {\r\n    e.preventDefault();\r\n\r\n    //submitter (customer) Validation\r\n\r\n    //email validatiom\r\n    let emailFlag = isRealValue(customer.Email) ? false : true;\r\n    setSubmiterEmailError(emailFlag);\r\n    let emailFormatFlag = false;\r\n    //first check required and when email has value then chack email format\r\n    if (!emailFlag) {\r\n      emailFormatFlag = validateEmail(customer.Email) ? false : true;\r\n      setSubmiterEmailFormatError(emailFormatFlag);\r\n    }\r\n    if (emailFormatFlag || emailFlag) setSubmitFlag(false);\r\n\r\n    //name and familyl and mobile\r\n    if (customerType === 1) {\r\n      let submiterNameFlag = isRealValue(customer.FirstName) ? false : true;\r\n      setSubmiterNameError(submiterNameFlag);\r\n      let submiterFamilyFlag = isRealValue(customer.LastName) ? false : true;\r\n      setSubmiterFamilyError(submiterFamilyFlag);\r\n      let submiterMobileFlag = isRealValue(customer.MobileNumber)\r\n        ? false\r\n        : true;\r\n      setSubmiterMobileError(submiterMobileFlag);\r\n      let mobileFormatFlag = false;\r\n      if (!submiterMobileFlag) {\r\n        mobileFormatFlag = mobile_format(customer.MobileNumber) ? false : true;\r\n        setSubmiterMobileFormatError(mobileFormatFlag);\r\n      }\r\n      if (submiterNameFlag || submiterFamilyFlag || submiterMobileFlag)\r\n        setSubmitFlag(false);\r\n    }\r\n\r\n    //mobile or contract\r\n    if (customerType === 2) {\r\n      if (isRealValue(customer.MobileNumber) || isRealValue(customer.Code)) {\r\n        if (isRealValue(customer.MobileNumber)) {\r\n          if (!mobile_format(customer.MobileNumber)) {\r\n            setContractError(true);\r\n            setSubmitFlag(false);\r\n          }\r\n          setContractError(false);\r\n        } else setContractError(false);\r\n      } else {\r\n        setContractError(true);\r\n        setSubmitFlag(false);\r\n      }\r\n    }\r\n\r\n    /* passengers Validations  */\r\n    //name required validate\r\n    let nameErrorTemp = nameError;\r\n    var nameValidate = requiredInput(passengers, nameErrorTemp, \"FirstName\");\r\n    setNameError(nameValidate[0].slice());\r\n    if (!nameValidate[1]) setSubmitFlag(false);\r\n    //name latin validate\r\n    let latinNameErrorTemp = latinNameError;\r\n    var nameLatinValidate = latinOrPersianValidate(\r\n      passengers,\r\n      latinNameErrorTemp,\r\n      \"FirstName\",\r\n      0\r\n    );\r\n    setLatinNameError(nameLatinValidate[0].slice());\r\n    if (!nameLatinValidate[1]) setSubmitFlag(false);\r\n\r\n    //family required validate\r\n    let familyErrorTemp = familyError;\r\n    var familyValidate = requiredInput(passengers, familyErrorTemp, \"LastName\");\r\n    setFamilyError(familyValidate[0].slice());\r\n    if (!familyValidate[1]) setSubmitFlag(false);\r\n    //family latin validate\r\n    let latinFamilyErrorTemp = latinFamilyError;\r\n    var familyLatinValidate = latinOrPersianValidate(\r\n      passengers,\r\n      latinFamilyErrorTemp,\r\n      \"LastName\",\r\n      0\r\n    );\r\n    setLatinFamilyError(familyLatinValidate[0].slice());\r\n    if (!familyLatinValidate[1]) setSubmitFlag(false);\r\n\r\n    //room choose validation\r\n    var roomFlag = true;\r\n    for (var i = 0; i < roomCount.length; i++) {\r\n      let eachRoom = [];\r\n      eachRoom = passengers.filter(item => item.Room === i + 1);\r\n      let sumAdult = 0;\r\n      let sumChild1 = 0;\r\n      let sumChild2 = 0;\r\n      let sumInfant = 0;\r\n      for (var j = 0; j < eachRoom.length; j++) {\r\n        if (eachRoom[j].personType === \"adult\") sumAdult++;\r\n        if (eachRoom[j].personType === \"child1\") sumChild1++;\r\n        if (eachRoom[j].personType === \"child2\") sumChild2++;\r\n        if (eachRoom[j].personType === \"infant\") sumInfant++;\r\n      }\r\n\r\n      if (parseInt(sumAdult) > parseInt(roomCount[i].charAt(0))) {\r\n        alert(\r\n          `تعداد بزرگسال اتاق  ${numToWord(\r\n            i + 1\r\n          )} بیشتر از مقدار تعیین شده است `\r\n        );\r\n        roomFlag = false;\r\n      } else if (parseInt(sumAdult) < parseInt(roomCount[i].charAt(0))) {\r\n        alert(\r\n          ` تعداد بزرگسال اتاق  ${numToWord(\r\n            i + 1\r\n          )} کمتر از مقدار تعیین شده است `\r\n        );\r\n        roomFlag = false;\r\n      } else if (\r\n        parseInt(sumChild1) + parseInt(sumChild2) <\r\n        parseInt(roomCount[i].charAt(1)) + parseInt(roomCount[i].charAt(2))\r\n      ) {\r\n        alert(\r\n          `تعداد کودک اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `\r\n        );\r\n        roomFlag = false;\r\n      } else if (\r\n        parseInt(sumChild1) + parseInt(sumChild2) >\r\n        parseInt(roomCount[i].charAt(1)) + parseInt(roomCount[i].charAt(2))\r\n      ) {\r\n        alert(\r\n          `تعداد کودک اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `\r\n        );\r\n        roomFlag = false;\r\n      } else if (parseInt(sumInfant) < parseInt(roomCount[i].charAt(3))) {\r\n        alert(\r\n          `تعداد نوزاد اتاق  ${numToWord(i + 1)} کمتر از مقدار تعیین شده است `\r\n        );\r\n        roomFlag = false;\r\n      } else if (parseInt(sumInfant) > parseInt(roomCount[i].charAt(3))) {\r\n        alert(\r\n          `تعداد نوزاد اتاق  ${numToWord(i + 1)} بیشتر از مقدار تعیین شده است `\r\n        );\r\n        roomFlag = false;\r\n      }\r\n      if (!roomFlag) {\r\n        setSubmitFlag(false);\r\n        break;\r\n      }\r\n    } //end of room validation\r\n\r\n    //mobile required validate\r\n    let mobileReqErrorTemp = mobileReqError;\r\n    var CellPhoneNumberValidate = requiredInput(\r\n      passengers,\r\n      mobileReqErrorTemp,\r\n      \"CellPhoneNumber\"\r\n    );\r\n    setMobileReqError(CellPhoneNumberValidate[0].slice());\r\n    if (!CellPhoneNumberValidate[1]) setSubmitFlag(false);\r\n    //mobile format validate\r\n    let mobileFormatErrorTemp = mobileFormatError;\r\n    var mobileFormatValidate = mobileFormatInputValidate(\r\n      passengers,\r\n      mobileFormatErrorTemp,\r\n      \"CellPhoneNumber\",\r\n      1\r\n    );\r\n    setMobileFormatError(mobileFormatValidate[0].slice());\r\n    if (!mobileFormatValidate[1]) setSubmitFlag(false);\r\n\r\n    //birthday required validate (Day)\r\n    let bDayReqErrorTemp = bDayReqError;\r\n    var bDayValidate = requiredInput(passengers, bDayReqErrorTemp, \"bDay\");\r\n    setBDayReqError(bDayValidate[0].slice());\r\n    if (!bDayValidate[1]) setSubmitFlag(false);\r\n\r\n    //birthday format validate (Day)\r\n    let bDayFormatErrorTemp = bDayFormatError;\r\n    var bDayFormatValidate = checkLimits(\r\n      passengers,\r\n      bDayFormatErrorTemp,\r\n      \"bDay\",\r\n      \"DAY\"\r\n    );\r\n    setBDayFormatError(bDayFormatValidate[0].slice());\r\n    if (!bDayFormatValidate[1]) setSubmitFlag(false);\r\n\r\n    //birthday required validate (Month)\r\n    let bMonReqErrorTemp = bMonReqError;\r\n    var bMonValidate = requiredInput(passengers, bMonReqErrorTemp, \"bMonth\");\r\n    setBMonReqError(bMonValidate[0].slice());\r\n    if (!bMonValidate[1]) setSubmitFlag(false);\r\n\r\n    //birthday format validate (Month)\r\n    let bMonFormatErrorTemp = bMonFormatError;\r\n    var bMonFormatValidate = checkLimits(\r\n      passengers,\r\n      bMonFormatErrorTemp,\r\n      \"bMonth\",\r\n      \"Month\"\r\n    );\r\n    setBMonFormatError(bMonFormatValidate[0].slice());\r\n    if (!bMonFormatValidate[1]) setSubmitFlag(false);\r\n\r\n    //birthday required validate (Year)\r\n    let bYearReqErrorTemp = bYearReqError;\r\n    var bYearValidate = requiredInput(passengers, bYearReqErrorTemp, \"bYear\");\r\n    setBYearReqError(bYearValidate[0].slice());\r\n    if (!bYearValidate[1]) setSubmitFlag(false);\r\n\r\n    //birthday age validate\r\n    passengers.map((people, index) => {\r\n      let birthday = \"\";\r\n      let ageFlag = true;\r\n      if (people.birthType === 0) {\r\n        birthday = moment(people.BirthDate, \"jYYYY/jMM/jDD\").format(\r\n          \"YYYY/MM/DD\"\r\n        );\r\n      } else {\r\n        birthday = people.BirthDate;\r\n      }\r\n      let age = moment().diff(birthday, \"years\");\r\n      if (people.personType === \"adult\") {\r\n        if (age < 12) {\r\n          ageFlag=false;\r\n          alert(\r\n            `تاریخ تولد بزگسال ${numToWord(index + 1)} صحیح وارد نشده است! `\r\n          );\r\n        } else {\r\n          if(age>65 ){\r\n            people.InsurancePrice = paymentObj[0].InsuranceOldPrice\r\n          }\r\n        }\r\n      } else if (\r\n        people.personType === \"child1\" ||\r\n        people.personType === \"child2\"\r\n      ) {\r\n        if (age > 12 || age < 2) {\r\n          ageFlag =false;\r\n          alert(`تاریخ تولد کودک ${numToWord(index + 1)} صحیح وارد نشده است! `);\r\n        } \r\n      } else {\r\n        if (age > 2) {\r\n          ageFlag =false;\r\n          alert(\r\n            `تاریخ تولد نوزاد ${numToWord(index + 1)} صحیح وارد نشده است! `\r\n          );\r\n        } \r\n      }\r\n      if(!ageFlag){\r\n        setSubmitFlag(false);\r\n      }\r\n    });\r\n\r\n    //mellicode and passport Require validate\r\n    passengers.map((people, i)=>{\r\n      if (people.cardType===0){\r\n        //length validation\r\n        let mellicodeReqErroeTemp = mellicodeLengthError;\r\n        let mellicodeValidate = mellicode_format(people.melliCode) ? false : true;\r\n        if (mellicodeValidate) setSubmitFlag(false);\r\n        mellicodeReqErroeTemp[i] = mellicodeValidate;\r\n        setMellicodeLengthError(mellicodeReqErroeTemp.slice());\r\n        //required validate\r\n        let req = mellicodeReqErroe;\r\n        let reqFlag = isRealValue(people.melliCode) ? false : true;\r\n        if(reqFlag) setSubmitFlag(false);\r\n        req[i] = reqFlag;\r\n        setMellicodeReqErroe(req.slice());\r\n      }\r\n      else{\r\n        //required validate\r\n        let req = passportReqErroe;\r\n        let reqFlag = isRealValue(people.PassportNo) ? false : true;\r\n        if(reqFlag) setSubmitFlag(false);\r\n        req[i] = reqFlag;\r\n        setPassportReqErroe(req.slice());\r\n      }\r\n    })\r\n \r\n\r\n    //     //before any request check submitFlag until here\r\n        if(!submitFlag)\r\n        {\r\n            return false;\r\n        }\r\n    //     //get customer data\r\n\r\n    //     let customerTemp = customer;\r\n    //     //flag check for submit again by user and prevent for double insert\r\n    //     if (customerFlag) {\r\n    //       if (customerType === 0 || customerType === 1) {\r\n    //         let title = \"\";\r\n    //         let password = \"\";\r\n    //         if (customerType === 0) {\r\n    //           title = passengers[0].FirstName + \" \" + passengers[0].LastName;\r\n    //           password = passengers[0].CellPhoneNumber;\r\n    //         }\r\n    //         if (customerType === 1) {\r\n    //           title = customer.FirstName + \" \" + customer.LastName;\r\n    //           password = customer.MobileNumber;\r\n    //         }\r\n    //         if (isRealValue(title) && isRealValue(password)) {\r\n    //           await axios\r\n    //             .get(`${Ports.domain}${Ports.userRegister}`, {\r\n    //               params: {\r\n    //                 title: title,\r\n    //                 username: customer.Email,\r\n    //                 password: password\r\n    //               }\r\n    //             })\r\n    //             .then(function(response) {\r\n    //               console.log(response);\r\n    //               switch (response.status) {\r\n    //                 case 200:\r\n    //                   return response.data;\r\n    //                 default:\r\n    //                   return false;\r\n    //               }\r\n    //             })\r\n    //             .catch(function(error) {\r\n    //               console.log(\"error \", error);\r\n    //               alert(\"ایمیل کاربر ثبت کننده تکراری است\");\r\n    //               setSubmitFlag(false);\r\n    //             })\r\n    //             .then(data => {\r\n    //               if (data === \"\") {\r\n    //                 alert(\"ok\");\r\n    //                 if (customerType === 0) {\r\n    //                   customerTemp.FirstName = passengers[0].FirstName;\r\n    //                   customerTemp.LastName = passengers[0].LastName;\r\n    //                   customerTemp.MobileNumber = passengers[0].CellPhoneNumber;\r\n    //                 }\r\n    //                 setCustomer(customerTemp);\r\n    //                 setcustomerFlag(false);\r\n    //                 console.log(\"custumer\", customerTemp);\r\n    //               }\r\n    //             });\r\n    //         }\r\n    //       }\r\n    //       if (customerType === 2) {\r\n    //         if (\r\n    //           isRealValue(customer.Email) &&\r\n    //           (isRealValue(customer.Code) || isRealValue(customer.MobileNumber))\r\n    //         ) {\r\n    //           let loginType =\r\n    //             isRealValue(customer.MobileNumber) &&\r\n    //             mobile_format(customer.MobileNumber)\r\n    //               ? \"Account\"\r\n    //               : \"Contract\";\r\n    //           let password =\r\n    //             isRealValue(customer.MobileNumber) &&\r\n    //             mobile_format(customer.MobileNumber)\r\n    //               ? customer.MobileNumber\r\n    //               : customer.Code;\r\n    //           let username = customer.Email;\r\n    //           let formBody = new FormData();\r\n    //           formBody.append(\"username\", username);\r\n    //           formBody.append(\"password\", password);\r\n    //           formBody.append(\"logintype\", loginType);\r\n    //           await axios\r\n    //             .post(`${Ports.domain}${Ports.userLogin}`, formBody)\r\n    //             .then(function(response) {\r\n    //               console.log(response);\r\n    //               switch (response.status) {\r\n    //                 case 200:\r\n    //                   return response.data;\r\n    //                 default:\r\n    //                   return false;\r\n    //               }\r\n    //             })\r\n    //             .catch(function(error) {\r\n    //               console.log(\"error \", error);\r\n    //               alert(\"مشخصات کاربر ثبت کننده یافت نشد\");\r\n    //               setSubmitFlag(false);\r\n    //             })\r\n    //             .then(data => {\r\n    //               if (data === \"ERROR\") {\r\n    //                 alert(\"مشخصات کاربر ثبت کننده یافت نشد\");\r\n    //                 setSubmitFlag(false);\r\n    //               } else {\r\n    //                 let fullName = data.Title.split(\" \");\r\n    //                 let name = \"\";\r\n    //                 let family = \"\";\r\n    //                 if (fullName.length > 1) {\r\n    //                   name = fullName[0];\r\n    //                   family = fullName[1];\r\n    //                 } else {\r\n    //                   name = fullName[0];\r\n    //                   family = fullName[0];\r\n    //                 }\r\n    //                 customerTemp = {\r\n    //                   CustomerId: data.CustomersId,\r\n    //                   FirstName: name,\r\n    //                   LastName: family,\r\n    //                   Email: data.Email,\r\n    //                   MobileNumber: data.MobileNumber,\r\n    //                   From: \"Site\",\r\n    //                   Code: customer.Code\r\n    //                 };\r\n    //                 console.log(\"data from user login \", data);\r\n    //               }\r\n    //             });\r\n    //         }\r\n    //         console.log(\"custumer type 2\", customerTemp);\r\n    //       }\r\n    //     } //customerFlag\r\n\r\n    //     let paymentObj = paymentObj[0];\r\n    //     let info = [\r\n    //       {\r\n    //         Flight: [],\r\n    //         Package: [\r\n    //           {\r\n    //             Flight: [],\r\n    //             Row: [\r\n    //               {\r\n    //                 Flight: [\r\n    //                   {\r\n    //                     Going: [\r\n    //                       {\r\n    //                         ItemType: paymentObj.Flight.ItemType,\r\n    //                         AirLineAbbrevation: paymentObj.AirLineAbbrevation_Going,\r\n    //                         AirLineId: paymentObj.Flight.AirLineId_Going,\r\n    //                         FileName: paymentObj.Flight.FileName_Going,\r\n    //                         AirLineTitle: paymentObj.Flight.AirLineTitle_Going,\r\n    //                         DestAirportAbbrevation:\r\n    //                           paymentObj.Flight.AirLineAbbrevation_Going,\r\n    //                         DestAirportTitle:\r\n    //                           paymentObj.Flight.SourceAirportTitle_Going,\r\n    //                         DestCityAbbrevation:\r\n    //                           paymentObj.Flight.DestCityAbbrevation_Going,\r\n    //                         DestCityTitle: paymentObj.Flight.DestCityTitle_Going,\r\n    //                         DestCountryAbbrevation:\r\n    //                           paymentObj.Flight.DestCountryAbbrevation_Going,\r\n    //                         DestCountryTitle:\r\n    //                           paymentObj.Flight.DestCountryTitle_Going,\r\n    //                         FlightDuration: paymentObj.Flight.FlightDuration_Going,\r\n    //                         FlightNo: paymentObj.Flight.FlightNo_Going,\r\n    //                         Id: paymentObj.Flight.Id_Going,\r\n    //                         LocalARRDate: paymentObj.Flight.LocalARRDate_Going,\r\n    //                         LocalARRTime: paymentObj.Flight.LocalARRTime_Going,\r\n    //                         LocalDEPDate: paymentObj.Flight.LocalDEPDate_Going,\r\n    //                         LocalDEPTime: paymentObj.Flight.LocalDEPTime_Going,\r\n    //                         SourceAirportAbbrevation:\r\n    //                           paymentObj.Flight.SourceAirportAbbrevation_Going,\r\n    //                         SourceAirportTitle:\r\n    //                           paymentObj.Flight.SourceAirportTitle_Going,\r\n    //                         SourceCityAbbrevation:\r\n    //                           paymentObj.Flight.SourceCityAbbrevation_Going,\r\n    //                         SourceCityTitle:\r\n    //                           paymentObj.Flight.SourceCityTitle_Going,\r\n    //                         SourceCountryAbbrevation:\r\n    //                           paymentObj.Flight.SourceCountryAbbrevation_Going,\r\n    //                         SourceCountryTitle:\r\n    //                           paymentObj.Flight.SourceCountryTitle_Going,\r\n    //                         FlightClass: paymentObj.Flight.FlightClassTitle_Going,\r\n    //                         CityId: paymentObj.Flight.DestCityId_Going,\r\n    //                         Load: paymentObj.Flight.Load,\r\n    //                         IsWebService: paymentObj.Flight.IsWebService,\r\n    //                         WebServiceName: paymentObj.Flight.WebServiceName,\r\n    //                         B2BID: paymentObj.Flight.B2BID,\r\n    //                         UserLoginId: paymentObj.Flight.UserLoginId,\r\n    //                         OnRequest: paymentObj.Flight.OnRequest_Going,\r\n    //                         DeparturePrice: paymentObj.Flight.DeparturePrice,\r\n    //                         ReturnPrice: paymentObj.Flight.ReturnPrice,\r\n    //                         PackageFlightId: paymentObj.Flight.PackageFlightId\r\n    //                       }\r\n    //                     ],\r\n    //                     Coming: [\r\n    //                       {\r\n    //                         ItemType: paymentObj.Flight.ItemType,\r\n    //                         AirLineAbbrevation:\r\n    //                           paymentObj.AirLineAbbrevation_Coming,\r\n    //                         AirLineId: paymentObj.Flight.AirLineId_Coming,\r\n    //                         FileName: paymentObj.Flight.FileName_Coming,\r\n    //                         AirLineTitle: paymentObj.Flight.AirLineTitle_Coming,\r\n    //                         DestAirportAbbrevation:\r\n    //                           paymentObj.Flight.AirLineAbbrevation_Coming,\r\n    //                         DestAirportTitle:\r\n    //                           paymentObj.Flight.SourceAirportTitle_Coming,\r\n    //                         DestCityAbbrevation:\r\n    //                           paymentObj.Flight.DestCityAbbrevation_Coming,\r\n    //                         DestCityTitle: paymentObj.Flight.DestCityTitle_Coming,\r\n    //                         DestCountryAbbrevation:\r\n    //                           paymentObj.Flight.DestCountryAbbrevation_Coming,\r\n    //                         DestCountryTitle:\r\n    //                           paymentObj.Flight.DestCountryTitle_Coming,\r\n    //                         FlightDuration: paymentObj.Flight.FlightDuration_Coming,\r\n    //                         FlightNo: paymentObj.Flight.FlightNo_Coming,\r\n    //                         Id: paymentObj.Flight.Id_Coming,\r\n    //                         LocalARRDate: paymentObj.Flight.LocalARRDate_Coming,\r\n    //                         LocalARRTime: paymentObj.Flight.LocalARRTime_Coming,\r\n    //                         LocalDEPDate: paymentObj.Flight.LocalDEPDate_Coming,\r\n    //                         LocalDEPTime: paymentObj.Flight.LocalDEPTime_Coming,\r\n    //                         SourceAirportAbbrevation:\r\n    //                           paymentObj.Flight.SourceAirportAbbrevation_Coming,\r\n    //                         SourceAirportTitle:\r\n    //                           paymentObj.Flight.SourceAirportTitle_Coming,\r\n    //                         SourceCityAbbrevation:\r\n    //                           paymentObj.Flight.SourceCityAbbrevation_Coming,\r\n    //                         SourceCityTitle:\r\n    //                           paymentObj.Flight.SourceCityTitle_Coming,\r\n    //                         SourceCountryAbbrevation:\r\n    //                           paymentObj.Flight.SourceCountryAbbrevation_Coming,\r\n    //                         SourceCountryTitle:\r\n    //                           paymentObj.Flight.SourceCountryTitle_Coming,\r\n    //                         FlightClass: paymentObj.Flight.FlightClassTitle_Coming,\r\n    //                         CityId: paymentObj.Flight.DestCityId_Coming,\r\n    //                         Load: paymentObj.Flight.Load,\r\n    //                         IsWebService: paymentObj.Flight.IsWebService,\r\n    //                         WebServiceName: paymentObj.Flight.WebServiceName,\r\n    //                         B2BID: paymentObj.Flight.B2BID,\r\n    //                         UserLoginId: paymentObj.Flight.UserLoginId,\r\n    //                         OnRequest: paymentObj.Flight.OnRequest_Coming,\r\n    //                         DeparturePrice: paymentObj.Flight.DeparturePrice,\r\n    //                         ReturnPrice: paymentObj.Flight.ReturnPrice,\r\n    //                         PackageFlightId: paymentObj.Flight.PackageFlightId\r\n    //                       }\r\n    //                     ]\r\n    //                   }\r\n    //                 ],\r\n    //                 HotelList: paymentObj.Hotel,\r\n    //                 HotelPrice: paymentObj.RoomInfo,\r\n    //                 hotelprice_index: 0,\r\n    //                 Id: paymentObj.PackageHotelRowId\r\n    //               }\r\n    //             ],\r\n    //             Insurance_AdultPrice: paymentObj.InsuranceAdultPrice,\r\n    //             Insurance_OldPrice: paymentObj.InsuranceOldPrice,\r\n    //             PackageLength: paymentObj.PackageLength,\r\n    //             Id: paymentObj.packageId,\r\n    //             AdultCount: paymentObj.Adult,\r\n    //             Child1Count: paymentObj.Child1,\r\n    //             Child2Count: paymentObj.Child2,\r\n    //             InfantCount: paymentObj.Infant,\r\n    //             InfantPrice: paymentObj.InfantPrice,\r\n    //             RoomRule: paymentObj.RoomRules,\r\n    //             RoomRules: paymentObj.RoomRules\r\n    //           }\r\n    //         ],\r\n    //         Passengers: passengers,\r\n    //         Customer: [customerTemp],\r\n    //         Registration: [],\r\n    //         ReserveType: \"Package\",\r\n    //         CounterId: \"\",\r\n    //         Price: paymentObj.TotalPrice,\r\n    //         PrePayment: 0,\r\n    //         PriceType: \"All\",\r\n    //         Discount: 0,\r\n    //         DiscountWithCode: 0,\r\n    //         Description: \"\",\r\n    //         PromoCode: \"\",\r\n    //         From: \"Site\",\r\n    //         CommissionInReserveType: \"\",\r\n    //         CommissionValue: -1,\r\n    //         CurrencyValue: 1,\r\n    //         CurrencyTitle: \"ریال\",\r\n    //         CurrencyTypeId: \"\"\r\n    //       }\r\n    //     ];\r\n    //     //console.log(\"insertOBJ\",info)\r\n    //     console.log(\"passengers\", JSON.stringify(passengers));\r\n    //     console.log(\"info\", JSON.stringify(info));\r\n\r\n    //     if (!setSubmitFlag) {\r\n    //       return false;\r\n    //     }\r\n    //     await axios\r\n    //       .get(`${Ports.domain}${Ports.book}`, {\r\n    //         params: {\r\n    //           info: JSON.stringify(info),\r\n    //           getway_type: \"MELLAT\",\r\n    //           force_payment: true,\r\n    //           is_webservice: false,\r\n    //           webservice_name: \"\",\r\n    //           IsOnRequest: false,\r\n    //           passengers: JSON.stringify(passengers),\r\n    //           TrackerUniqueId: \"\"\r\n    //         }\r\n    //       })\r\n    //       .then(function(response) {\r\n    //         console.log(response);\r\n    //         switch (response.status) {\r\n    //           case 200:\r\n    //             return response.data;\r\n    //           default:\r\n    //             return false;\r\n    //         }\r\n    //       })\r\n    //       .catch(function(error) {\r\n    //         console.log(\"error \", error);\r\n    //         alert(\"Error\" + error);\r\n    //       })\r\n    //       .then(data => {\r\n    //         console.log(\"reserv data after form submit\", data);\r\n    //       });\r\n  }\r\n\r\n  //handle customer Fields\r\n  function handleUser(e, type) {\r\n    let value = e.target.value;\r\n    if (type === \"Email\") {\r\n      let emailFlag = isRealValue(value) ? false : true;\r\n      setSubmiterEmailError(emailFlag);\r\n      setCustomer({ ...customer, Email: value });\r\n    }\r\n    if (type === \"FirstName\") {\r\n      let submiterNameFlag = isRealValue(value) ? false : true;\r\n      setSubmiterNameError(submiterNameFlag);\r\n      setCustomer({ ...customer, FirstName: value });\r\n    }\r\n    if (type === \"LastName\") {\r\n      let submiterFamilyFlag = isRealValue(value) ? false : true;\r\n      setSubmiterFamilyError(submiterFamilyFlag);\r\n      setCustomer({ ...customer, LastName: value });\r\n    }\r\n    if (type === \"MobileNumber\") {\r\n      if (customerType === 1) {\r\n        let submiterMobileFlag = isRealValue(value) ? false : true;\r\n        setSubmiterMobileError(submiterMobileFlag);\r\n      }\r\n      if (customerType === 2) {\r\n        let submiterMobileFlag = isRealValue(value) ? false : true;\r\n        setContractError(submiterMobileFlag);\r\n      }\r\n      setCustomer({ ...customer, MobileNumber: value });\r\n    }\r\n    if (type === \"Code\") {\r\n      if (customerType === 2) {\r\n        let submiterCodeFlag = isRealValue(value) ? false : true;\r\n        setContractError(submiterCodeFlag);\r\n      }\r\n      setCustomer({ ...customer, Code: value });\r\n    }\r\n  }\r\n  //handle passengers validation\r\n  function handleInputChange(e, idx, type) {\r\n    let nextPassenger = passengers.slice();\r\n    nextPassenger[idx].id = idx;\r\n    let value = e.target.value;\r\n\r\n    if (type === \"FirstName\") {\r\n      nextPassenger[idx].FirstName = value;\r\n      //check latin\r\n      let latin = latinNameError;\r\n      let latinFlag = just_persian(value) ? true : false;\r\n      latin[idx] = latinFlag;\r\n      setLatinNameError(latin.slice());\r\n      //check required\r\n      let req = nameError;\r\n      let reqFlag = isRealValue(value) ? false : true;\r\n      req[idx] = reqFlag;\r\n      setNameError(req.slice());\r\n    }\r\n\r\n    if (type === \"LastName\") {\r\n      nextPassenger[idx].LastName = value;\r\n      //check latin\r\n      let latin = latinFamilyError;\r\n      let latinFlag = just_persian(value) ? true : false;\r\n      latin[idx] = latinFlag;\r\n      setLatinFamilyError(latin.slice());\r\n      //check required\r\n      let req = familyError;\r\n      let reqFlag = isRealValue(value) ? false : true;\r\n      req[idx] = reqFlag;\r\n      setFamilyError(req.slice());\r\n    }\r\n\r\n    if (type === \"CellPhoneNumber\") {\r\n      nextPassenger[idx].CellPhoneNumber = value;\r\n      //check required\r\n      let req = mobileReqError;\r\n      let reqFlag = isRealValue(value) ? false : true;\r\n      req[idx] = reqFlag;\r\n      setMobileReqError(req.slice());\r\n      //check format\r\n      let format = mobileFormatError;\r\n      let formatFlag = mobile_format(value) ? false : true;\r\n      if (!isRealValue(value)) formatFlag = false;\r\n      format[idx] = formatFlag;\r\n      setMobileFormatError(format.slice());\r\n    }\r\n\r\n    if (type === \"Gender\") nextPassenger[idx].Gender = value;\r\n    if (type === \"birthType\") nextPassenger[idx].birthType = value;\r\n\r\n    if (type === \"Nationality\") {\r\n      var option_user_selection = e.target.options[e.target.selectedIndex].text;\r\n      nextPassenger[idx].Nationality = option_user_selection;\r\n      nextPassenger[idx].NationalityCode = value;\r\n    }\r\n\r\n    if (type === \"bDay\") {\r\n      nextPassenger[idx].bDay = value;\r\n      //check required\r\n      let req = bDayReqError;\r\n      let reqFlag = isRealValue(value) ? false : true;\r\n      req[idx] = reqFlag;\r\n      setBDayReqError(req.slice());\r\n    }\r\n\r\n    if (type === \"bMonth\") {\r\n      nextPassenger[idx].bMonth = value;\r\n      //check required\r\n      let req = bMonReqError;\r\n      let reqFlag = isRealValue(value) ? false : true;\r\n      req[idx] = reqFlag;\r\n      setBMonReqError(req.slice());\r\n    }\r\n\r\n    if (type === \"bYear\") {\r\n      nextPassenger[idx].bYear = value;\r\n      //check required\r\n      let req = bYearReqError;\r\n      let reqFlag = isRealValue(value) ? false : true;\r\n      req[idx] = reqFlag;\r\n      setBYearReqError(req.slice());\r\n    }\r\n\r\n    if (type === \"bDay\" || type === \"bMonth\" || type === \"bYear\") {\r\n      nextPassenger[idx].BirthDate =\r\n        nextPassenger[idx].bYear +\r\n        \"/\" +\r\n        nextPassenger[idx].bMonth +\r\n        \"/\" +\r\n        nextPassenger[idx].bDay;\r\n    }\r\n\r\n    if (type === \"pDay\" || type === \"pMonth\" || type === \"pYear\") {\r\n      if (type === \"pDay\") nextPassenger[idx].pDay = value;\r\n      if (type === \"pMonth\") nextPassenger[idx].pMonth = value;\r\n      if (type === \"pYear\") nextPassenger[idx].pYear = value;\r\n      nextPassenger[idx].PassportExpirationDate =\r\n        nextPassenger[idx].pYear +\r\n        \"/\" +\r\n        nextPassenger[idx].pMonth +\r\n        \"/\" +\r\n        nextPassenger[idx].pDay;\r\n    }\r\n\r\n    if (type === \"cardType\") nextPassenger[idx].cardType = parseInt(value);\r\n\r\n    if (type === \"PassportNo\") {\r\n      nextPassenger[idx].PassportNo = value;\r\n       //check required\r\n       let req = passportReqErroe;\r\n       let reqFlag = isRealValue(value) ? false : true;\r\n       req[idx] = reqFlag;\r\n       setPassportReqErroe(req.slice());\r\n    \r\n    }\r\n\r\n    if (type === \"PassportExpirationDate\")\r\n      nextPassenger[idx].PassportExpirationDate = value;\r\n\r\n    if (type === \"melliCode\" ) {\r\n      nextPassenger[idx].melliCode = value;\r\n      //check numbare\r\n      let numbare = mellicodeFormatError;\r\n      console.log(\"is number output\" , isNumber(value))\r\n      let numbareFlag = isNumber(value) ? false : true;\r\n      numbare[idx] = numbareFlag;\r\n      setMellicodeFormatError(numbare.slice());\r\n      //check required\r\n      let req = mellicodeReqErroe;\r\n      let reqFlag = isRealValue(value) ? false : true;\r\n      req[idx] = reqFlag;\r\n      setMellicodeReqErroe(req.slice());\r\n    }\r\n\r\n    if (type === \"Room\") {\r\n      nextPassenger[idx].Room = parseInt(value);\r\n      if (nextPassenger[idx].personType === \"adult\")\r\n        nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Adult;\r\n      if (nextPassenger[idx].personType === \"child1\")\r\n        nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Child1;\r\n      if (nextPassenger[idx].personType === \"child2\")\r\n        nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Child2;\r\n      if (nextPassenger[idx].personType === \"infant\")\r\n        nextPassenger[idx].Price = paymentObj[0].RoomPrices[value - 1].Infant;\r\n    }\r\n    setPassengers(nextPassenger);\r\n  }\r\n\r\n  //handle contions and rules\r\n  function handleConditionChange(e) {\r\n    setCondotion(e.target.checked);\r\n    setCondotionFlag(e.target.checked);\r\n  }\r\n\r\n  console.log(\"customer\", customer);\r\n  console.log(\"passengers\", passengers);\r\nconsole.log(\"submitFkag\" , submitFlag)\r\n  return (\r\n    <div className=\"info-form\">\r\n      <p className=\"desc-tag\">\r\n        <IoMdInformationCircle />\r\n        لطفا اطلاعات زیر را کامل کنید :\r\n      </p>\r\n      <MDBCard>\r\n        <MDBCardBody>\r\n          <div className=\"travelers-info\">\r\n            <span>یکی از مسافران :</span>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                value=\"a\"\r\n                name=\"travelers\"\r\n                checked={iAm}\r\n                onChange={onSetIamChanged}\r\n              />\r\n              <span className=\"checkmark\"></span>\r\n              <span>هستم</span>\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"travelers\"\r\n                value=\"b\"\r\n                checked={iAmnot}\r\n                onChange={onSetIamNotChanged}\r\n              />\r\n              <span className=\"checkmark\"></span>\r\n              <span>نیستم</span>\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"travelers\"\r\n                value=\"c\"\r\n                checked={before}\r\n                onChange={onSetBeforeChanged}\r\n              />\r\n              <span className=\"checkmark\"></span>\r\n              <span>قبلا خرید انجام داده ام</span>\r\n            </label>\r\n          </div>\r\n          <Form>\r\n            {iAm ? (\r\n              <Row form>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label for=\"user_email\">ایمیل :</Label>\r\n                    <Input\r\n                      style={\r\n                        submiterEmailError || submiterEmailFormatError\r\n                          ? errorBorder\r\n                          : {}\r\n                      }\r\n                      onChange={e => handleUser(e, \"Email\")}\r\n                      value={customer.Email}\r\n                      type=\"email\"\r\n                      name=\"user_email\"\r\n                      id=\"user_email\"\r\n                    />\r\n                    {submiterEmailError ? (\r\n                      <span className=\"pr-1 small text-danger\">\r\n                        <IoIosWarning size=\"15\" />\r\n                        ایمیل را وارد کنید\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {submiterEmailFormatError ? (\r\n                      <span className=\"pr-1 small text-danger\">\r\n                        <IoIosWarning size=\"15\" />\r\n                        فرمت ایمیل نادرست است\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            ) : (\r\n              <>\r\n                {iAmnot ? (\r\n                  <Row form>\r\n                    <Col md={3}>\r\n                      <FormGroup>\r\n                        <Label for=\"user_name\">نام :</Label>\r\n                        <Input\r\n                          style={submiterNameError ? errorBorder : {}}\r\n                          onChange={e => handleUser(e, \"FirstName\")}\r\n                          value={customer.FirstName}\r\n                          type=\"text\"\r\n                          name=\"user_name\"\r\n                          id=\"user_name\"\r\n                        />\r\n                        {submiterNameError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            نام را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <FormGroup>\r\n                        <Label for=\"user_family\">نام خانوادگی :</Label>\r\n                        <Input\r\n                          style={submiterFamilyError ? errorBorder : {}}\r\n                          onChange={e => handleUser(e, \"LastName\")}\r\n                          value={customer.LastName}\r\n                          type=\"text\"\r\n                          name=\"user_family\"\r\n                          id=\"user_family\"\r\n                        />\r\n                        {submiterFamilyError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            نام خانوادگی را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <FormGroup>\r\n                        <Label for=\"user_mobile\">موبایل :</Label>\r\n                        <Input\r\n                          style={\r\n                            submiterMobileError || submiterMobileFormatError\r\n                              ? errorBorder\r\n                              : {}\r\n                          }\r\n                          onChange={e => handleUser(e, \"MobileNumber\")}\r\n                          value={customer.MobileNumber}\r\n                          type=\"email\"\r\n                          name=\"user_mobile\"\r\n                          id=\"user_mobile\"\r\n                        />\r\n                        {submiterMobileError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            موبایل را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {submiterMobileFormatError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            فرمت موبایل نادرست است\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                      <FormGroup>\r\n                        <Label for=\"user_email1\">ایمیل :</Label>\r\n                        <Input\r\n                          style={\r\n                            submiterEmailError || submiterEmailFormatError\r\n                              ? errorBorder\r\n                              : {}\r\n                          }\r\n                          onChange={e => handleUser(e, \"Email\")}\r\n                          value={customer.Email}\r\n                          type=\"email\"\r\n                          name=\"user_email1\"\r\n                          id=\"user_email1\"\r\n                        />\r\n                        {submiterEmailError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            ایمیل را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {submiterEmailFormatError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            فرمت ایمیل نادرست است\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                ) : (\r\n                  <Row form>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"user_email2\">ایمیل :</Label>\r\n                        <Input\r\n                          style={\r\n                            submiterEmailError || submiterEmailFormatError\r\n                              ? errorBorder\r\n                              : {}\r\n                          }\r\n                          onChange={e => handleUser(e, \"Email\")}\r\n                          value={customer.Email}\r\n                          type=\"email\"\r\n                          name=\"user_email2\"\r\n                          id=\"user_email2\"\r\n                        />\r\n                        {submiterEmailError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            ایمیل را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {submiterEmailFormatError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            فرمت ایمیل نادرست است\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"MobileNumber\">موبایل :</Label>\r\n                        <Input\r\n                          className=\"mobileContract\"\r\n                          style={\r\n                            contractError && mobileReqError ? errorBorder : {}\r\n                          }\r\n                          onChange={e => handleUser(e, \"MobileNumber\")}\r\n                          value={customer.MobileNumber}\r\n                          type=\"text\"\r\n                          name=\"MobileNumber\"\r\n                          id=\"MobileNumber\"\r\n                        />\r\n                        {contractError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            موبایل یا شماره قرارداد را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                      <span className=\"or\">یا</span>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"code\">شماره قرارداد :</Label>\r\n                        <Input\r\n                          style={contractError ? errorBorder : {}}\r\n                          onChange={e => handleUser(e, \"Code\")}\r\n                          value={customer.Code}\r\n                          type=\"text\"\r\n                          name=\"code\"\r\n                          id=\"code\"\r\n                        />\r\n                        {contractError ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            موبایل یا شماره قرارداد را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                )}\r\n              </>\r\n            )}\r\n          </Form>\r\n\r\n          <Form id=\"form1\">\r\n            {passengers.map((person, idx) => {\r\n              return (\r\n                <div key={IDBIndex.toString()}>\r\n                  <hr />\r\n                  <div className=\"passenger-tag\">\r\n                    <span>\r\n                      مسافر {numToWord(idx + 1)} -{\" \"}\r\n                      {personType(person.personType)}\r\n                    </span>\r\n                  </div>\r\n                  <Row form>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"FirstName\">نام :</Label>\r\n                        <Input\r\n                          style={\r\n                            nameError[idx] || latinNameError[idx]\r\n                              ? errorBorder\r\n                              : {}\r\n                          }\r\n                          type=\"text\"\r\n                          value={person.FirstName}\r\n                          onChange={e => handleInputChange(e, idx, \"FirstName\")}\r\n                          name=\"FirstName\"\r\n                          id=\"FirstName\"\r\n                          placeholder=\"نام به لاتین\"\r\n                        />\r\n                        {nameError[idx] ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" /> فیلد نام اجباریست{\" \"}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {latinNameError[idx] ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <TiSortAlphabetically size=\"15\" /> نام لاتین وارد\r\n                            شود{\" \"}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"LastName\">نام خانوادگی :</Label>\r\n                        <Input\r\n                          style={\r\n                            familyError[idx] || latinFamilyError[idx]\r\n                              ? errorBorder\r\n                              : {}\r\n                          }\r\n                          type=\"text\"\r\n                          value={person.LastName}\r\n                          onChange={e => handleInputChange(e, idx, \"LastName\")}\r\n                          name=\"LastName\"\r\n                          id=\"LastName\"\r\n                          placeholder=\"نام خانوادگی به لاتین\"\r\n                        />\r\n                        {familyError[idx] ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" /> فیلد نام خانوادگی\r\n                            اجباریست{\" \"}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {latinFamilyError[idx] ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <TiSortAlphabetically size=\"15\" /> نام خانوادگی\r\n                            لاتین وارد شود{\" \"}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <FormGroup>\r\n                        <Label for=\"Gender\">جنسیت :</Label>\r\n                        <Input\r\n                          value={person.Gender}\r\n                          onChange={e => handleInputChange(e, idx, \"Gender\")}\r\n                          type=\"select\"\r\n                          name=\"Gender\"\r\n                          id=\"Gender\"\r\n                          placeholder=\"\"\r\n                        >\r\n                          <option value={0}>زن</option>\r\n                          <option value={1}>مرد</option>\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={2}>\r\n                      <FormGroup>\r\n                        <Label for=\"melliCode\">اتاق :</Label>\r\n                        <Input\r\n                          value={person.Room}\r\n                          onChange={e => handleInputChange(e, idx, \"Room\")}\r\n                          type=\"select\"\r\n                          name=\"Room\"\r\n                          id=\"Room\"\r\n                        >\r\n                          {roomCount.map((_, index) => {\r\n                            return (\r\n                              <option value={index + 1}>{index + 1}</option>\r\n                            );\r\n                          })}\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"Nationality\">تابعیت :</Label>\r\n                        <Input\r\n                          value={person.NationalityCode}\r\n                          onChange={e =>\r\n                            handleInputChange(e, idx, \"Nationality\")\r\n                          }\r\n                          type=\"select\"\r\n                          name=\"Nationality\"\r\n                          id=\"Nationality\"\r\n                          placeholder=\"\"\r\n                        >\r\n                          {Countries.map(cnt => {\r\n                            return (\r\n                              <option\r\n                                key={cnt.code.toString()}\r\n                                value={cnt.code}\r\n                              >\r\n                                {cnt.name}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"CellPhoneNumber\">موبایل :</Label>\r\n                        <Input\r\n                          style={\r\n                            mobileReqError[idx] || mobileFormatError[idx]\r\n                              ? errorBorder\r\n                              : {}\r\n                          }\r\n                          value={person.CellPhoneNumber}\r\n                          onChange={e =>\r\n                            handleInputChange(e, idx, \"CellPhoneNumber\")\r\n                          }\r\n                          type=\"text\"\r\n                          name=\"CellPhoneNumber\"\r\n                          id=\"CellPhoneNumber\"\r\n                          placeholder=\"\"\r\n                        />\r\n                        {mobileReqError[idx] ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            موبایل را وارد کنید\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {mobileFormatError[idx] ? (\r\n                          <span className=\"pr-1 small text-danger\">\r\n                            <IoIosWarning size=\"15\" />\r\n                            فرمت موبایل نادرست است\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <Label for=\"BirthDate\">تاریخ تولد :</Label>\r\n                      <Row className=\"px-3 BirthDate\">\r\n                        <FormGroup className=\"w-24\">\r\n                          <Input\r\n                            style={\r\n                              bDayReqError[idx] || bDayFormatError[idx]\r\n                                ? errorBorder\r\n                                : {}\r\n                            }\r\n                            value={person.bDay}\r\n                            onChange={e => handleInputChange(e, idx, \"bDay\")}\r\n                            type=\"text\"\r\n                            name=\"bDay\"\r\n                            id=\"bDay\"\r\n                            placeholder=\"روز\"\r\n                          />\r\n                          {bDayReqError[idx] ? (\r\n                            <span\r\n                              className=\"pr-1 small text-danger\"\r\n                              style={{ fontSize: \"8px\" }}\r\n                            >\r\n                              روز تولد اجباری است\r\n                            </span>\r\n                          ) : bDayFormatError[idx] ? (\r\n                            <span\r\n                              className=\"pr-1 small text-danger\"\r\n                              style={{ fontSize: \"8px\" }}\r\n                            >\r\n                              خارج از محدوده 31 روز\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className=\"w-24\">\r\n                          <Input\r\n                            style={\r\n                              bMonReqError[idx] || bMonFormatError[idx]\r\n                                ? errorBorder\r\n                                : {}\r\n                            }\r\n                            value={person.bMonth}\r\n                            onChange={e => handleInputChange(e, idx, \"bMonth\")}\r\n                            type=\"text\"\r\n                            name=\"bMonth\"\r\n                            id=\"bMonth\"\r\n                            placeholder=\"ماه\"\r\n                          />\r\n                          {bMonReqError[idx] ? (\r\n                            <span\r\n                              className=\"pr-1 small text-danger\"\r\n                              style={{ fontSize: \"8px\" }}\r\n                            >\r\n                              ماه تولد اجباری است\r\n                            </span>\r\n                          ) : bMonFormatError[idx] ? (\r\n                            <span\r\n                              className=\"pr-1 small text-danger\"\r\n                              style={{ fontSize: \"8px\" }}\r\n                            >\r\n                              خارج از محدوده 12 ماه\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className=\"w-24\">\r\n                          <Input\r\n                            style={bYearReqError[idx] ? errorBorder : {}}\r\n                            value={person.bYear}\r\n                            onChange={e => handleInputChange(e, idx, \"bYear\")}\r\n                            type=\"text\"\r\n                            name=\"bYear\"\r\n                            id=\"bYear\"\r\n                            placeholder=\"سال\"\r\n                          />\r\n                          {bYearReqError[idx] ? (\r\n                            <span\r\n                              className=\"pr-1 small text-danger\"\r\n                              style={{ fontSize: \"8px\" }}\r\n                            >\r\n                              سال تولد اجباری است\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className=\"w-24\">\r\n                          <Input\r\n                            value={person.birthType}\r\n                            onChange={e =>\r\n                              handleInputChange(e, idx, \"birthType\")\r\n                            }\r\n                            type=\"select\"\r\n                            name=\"birthType\"\r\n                            id=\"birthType\"\r\n                          >\r\n                            <option value={0}>شمسی</option>\r\n                            <option value={1}>میلادی</option>\r\n                          </Input>\r\n                        </FormGroup>\r\n                      </Row>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <FormGroup>\r\n                        <Label for=\"CardType\">ثبت با :</Label>\r\n                        <Input\r\n                          value={person.cardType}\r\n                          onChange={e => handleInputChange(e, idx, \"cardType\")}\r\n                          type=\"select\"\r\n                          name=\"cardType\"\r\n                          id=\"submit_with\"\r\n                          placeholder=\"\"\r\n                        >\r\n                          <option value={0}>کد ملی</option>\r\n                          <option value={1}>شماره پاسپورت</option>\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    {person.cardType ? (\r\n                      <>\r\n                        <Col md={4}>\r\n                          <FormGroup>\r\n                            <Label for=\"PassportNo\">شماره پاسپورت :</Label>\r\n                            <Input\r\n                            style={\r\n                              passportReqErroe[idx] \r\n                                ? errorBorder\r\n                                : {}\r\n                            }\r\n                              value={person.PassportNo}\r\n                              onChange={e =>\r\n                                handleInputChange(e, idx, \"PassportNo\")\r\n                              }\r\n                              type=\"text\"\r\n                              name=\"PassportNo\"\r\n                              id=\"PassportNo\"\r\n                              placeholder=\"\"\r\n                            />\r\n                             {passportReqErroe[idx] ? (\r\n                            <span className=\"pr-1 small text-danger\">\r\n                              <IoIosWarning size=\"15\" /> فیلد شماره پاسپورت اجباریست{\" \"}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          <Label for=\"PassportExpirationDate\">\r\n                            انقضاء پاسپورت :\r\n                          </Label>\r\n                          <Row className=\"px-3 PassportExpirationDate\">\r\n                            <FormGroup className=\"w-24\">\r\n                              <Input\r\n                                value={person.pDay}\r\n                                onChange={e =>\r\n                                  handleInputChange(e, idx, \"pDay\")\r\n                                }\r\n                                type=\"text\"\r\n                                name=\"pDay\"\r\n                                id=\"pDay\"\r\n                                placeholder=\"روز\"\r\n                              />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup className=\"w-24\">\r\n                              <Input\r\n                                value={person.pMonth}\r\n                                onChange={e =>\r\n                                  handleInputChange(e, idx, \"pMonth\")\r\n                                }\r\n                                type=\"text\"\r\n                                name=\"pMonth\"\r\n                                id=\"pMonth\"\r\n                                placeholder=\"ماه\"\r\n                              />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup className=\"w-24\">\r\n                              <Input\r\n                                value={person.pYear}\r\n                                onChange={e =>\r\n                                  handleInputChange(e, idx, \"pYear\")\r\n                                }\r\n                                type=\"text\"\r\n                                name=\"pYear\"\r\n                                id=\"pYear\"\r\n                                placeholder=\"سال\"\r\n                              />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup className=\"w-24\">\r\n                              <Input\r\n                                value={person.passExType}\r\n                                onChange={e =>\r\n                                  handleInputChange(e, idx, \"passExType\")\r\n                                }\r\n                                type=\"select\"\r\n                                name=\"passExType\"\r\n                                id=\"passExType\"\r\n                              >\r\n                                <option value={0}>میلادی</option>\r\n                                <option value={1}>شمسی</option>\r\n                              </Input>\r\n                            </FormGroup>\r\n                          </Row>\r\n                        </Col>\r\n                      </>\r\n                    ) : (\r\n                      <Col md={4}>\r\n                        <FormGroup>\r\n                          <Label for=\"melliCode\">کد ملی :</Label>\r\n                          <Input\r\n                            style={\r\n                              mellicodeReqErroe[idx] ||\r\n                              mellicodeFormatError[idx] || mellicodeLengthError[idx]\r\n                                ? errorBorder\r\n                                : {}\r\n                            }\r\n                            value={person.melliCode}\r\n                            onChange={e =>\r\n                              handleInputChange(e, idx, \"melliCode\")\r\n                            }\r\n                            type=\"text\"\r\n                            name=\"melliCode\"\r\n                            id=\"melliCode\"\r\n                            placeholder=\"\"\r\n                          />\r\n                          {mellicodeReqErroe[idx] ? (\r\n                            <span className=\"pr-1 small text-danger\">\r\n                              <IoIosWarning size=\"15\" /> فیلد کد ملی اجباریست{\" \"}\r\n                            </span>\r\n                          ) : mellicodeFormatError[idx] ? (\r\n                            <span className=\"pr-1 small text-danger\">\r\n                              <IoIosWarning size=\"15\" />فقط ورود عدد مجاز است شود{\" \"}\r\n                            </span>\r\n                          ) : mellicodeLengthError[idx] ? (\r\n                            <span className=\"pr-1 small text-danger\">\r\n                              <IoIosWarning size=\"15\" />تعداد ارقام کمتر از 10 می باشد{\" \"}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    )}\r\n                  </Row>\r\n                  <Row></Row>\r\n                </div>\r\n              );\r\n            })}\r\n          </Form>\r\n          <hr />\r\n          <div className=\"rule-accept\">\r\n            <p>\r\n              <IoMdInformationCircle />\r\n              <span className=\"title\">قوانین و مقررات :</span>\r\n            </p>\r\n            <label className=\"container\">\r\n              <span>شرایط و قوانین</span>\r\n              را مطالعه کرده و با کلیه موارد موافقم.\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={condotion}\r\n                onChange={handleConditionChange}\r\n              />\r\n              <span className=\"checkmark\"></span>\r\n            </label>\r\n          </div>\r\n          <hr />\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <div className=\"passenger-tag\">\r\n                <span>انتخاب درگاه پرداخت</span>\r\n              </div>\r\n              <div className=\"bank-pose\">\r\n                <label className=\"container\">\r\n                  <img src={require(\"../../img/mellat.png\")} />\r\n                  <input type=\"radio\" checked=\"checked\" name=\"radio\" />\r\n                  <span className=\"checkmark\"></span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div className=\"passenger-tag\">\r\n                <span>قیمت نهایی</span>\r\n              </div>\r\n              <div className=\"last-price\">\r\n                <div>\r\n                  <span className=\"label\">جمع کل قیمت :</span>\r\n                  <span>\r\n                    {HotelPriceFormat(paymentObj[0].TotalPrice)}\r\n                    ریال\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"label\">مبلغ قابل پرداخت :</span>\r\n                  <span>\r\n                    {HotelPriceFormat(paymentObj[0].TotalPrice)}\r\n                    ریال\r\n                  </span>\r\n                </div>\r\n                <hr />\r\n              </div>\r\n              <div className=\"off-code\">\r\n                <span>کد تخفیف :</span>\r\n\r\n                <InputGroup size=\"sm\">\r\n                  <Input />\r\n                </InputGroup>\r\n                <button className=\"btn\">اعمال</button>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-12\">\r\n              <div className=\"pay-btns\">\r\n                <button\r\n                  form=\"form1\"\r\n                  onClick={handleForm}\r\n                  className=\"btn green-btn\"\r\n                  disabled={!submitFlag && !condotionFlag}\r\n                >\r\n                  پرداخت\r\n                </button>\r\n                <button className=\"btn\">انصراف</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const paymentObj = state.paymenObject.paymentObj;\r\n  return { paymentObj };\r\n};\r\n\r\nexport default connect(mapStateToProps)(InfoForm);\r\n"]},"metadata":{},"sourceType":"module"}