{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch'; //imports\n\nimport { loadCitySuccess, failure } from './action';\nimport { actionTypes } from './type';\nimport ports from '../../ports';\nes6promise.polyfill(); //CITY worker\n\nfunction* loadCitySaga() {\n  try {\n    const res = yield fetch(`${ports.domain}${ports.cityList}`);\n    const data = yield res.json(); //console.log(\"cities\" , data)\n\n    data.sort(a => a.CountryAbbrevation === \"IR\" ? -1 : 1);\n    yield put(loadCitySuccess(data));\n  } catch (err) {\n    yield put(failure(err));\n  }\n} //CITY watcher\n\n\nfunction* loadCityWatcher() {\n  yield takeLatest(actionTypes.LOAD_CITY, loadCitySaga);\n}\n\nexport default loadCityWatcher;","map":{"version":3,"sources":["C:/Users/Hope/Desktop/KiteSearchEngine/redux/cityList/saga.js"],"names":["put","takeLatest","es6promise","loadCitySuccess","failure","actionTypes","ports","polyfill","loadCitySaga","res","fetch","domain","cityList","data","json","sort","a","CountryAbbrevation","err","loadCityWatcher","LOAD_CITY"],"mappings":"AAAA,SAAUA,GAAV,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP,C,CAEA;;AACA,SAAQC,eAAR,EAA0BC,OAA1B,QAAyC,UAAzC;AACA,SAAQC,WAAR,QAA0B,QAA1B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEAJ,UAAU,CAACK,QAAX,G,CAEA;;AACA,UAAUC,YAAV,GAAyB;AACrB,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEJ,KAAK,CAACK,MAAO,GAAEL,KAAK,CAACM,QAAS,EAAlC,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB,CAFA,CAGA;;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,CAAC,IAAKA,CAAC,CAACC,kBAAF,KAAyB,IAAzB,GAAgC,CAAC,CAAjC,GAAqC,CAArD;AACA,UAAMjB,GAAG,CAACG,eAAe,CAACU,IAAD,CAAhB,CAAT;AACD,GANH,CAMI,OAAOK,GAAP,EAAY;AACZ,UAAMlB,GAAG,CAACI,OAAO,CAACc,GAAD,CAAR,CAAT;AACD;AACN,C,CAED;;;AACA,UAAUC,eAAV,GAA4B;AACxB,QAAMlB,UAAU,CAACI,WAAW,CAACe,SAAb,EAAwBZ,YAAxB,CAAhB;AACH;;AAGD,eAAeW,eAAf","sourcesContent":["import {  put,takeLatest } from 'redux-saga/effects'\r\nimport es6promise from 'es6-promise'\r\nimport 'isomorphic-unfetch'\r\n\r\n//imports\r\nimport {loadCitySuccess , failure } from './action';\r\nimport {actionTypes} from './type'\r\nimport ports from '../../ports';\r\n\r\nes6promise.polyfill()\r\n\r\n//CITY worker\r\nfunction* loadCitySaga() {\r\n    try {\r\n        const res = yield fetch(`${ports.domain}${ports.cityList}`)\r\n        const data = yield res.json()\r\n        //console.log(\"cities\" , data)\r\n        data.sort(a => (a.CountryAbbrevation === \"IR\" ? -1 : 1));\r\n        yield put(loadCitySuccess(data))\r\n      } catch (err) {\r\n        yield put(failure(err))\r\n      }\r\n}\r\n\r\n//CITY watcher\r\nfunction* loadCityWatcher() {\r\n    yield takeLatest(actionTypes.LOAD_CITY, loadCitySaga)\r\n}\r\n\r\n\r\nexport default loadCityWatcher "]},"metadata":{},"sourceType":"module"}